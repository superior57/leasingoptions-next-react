{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport _ from 'underscore';\nimport { VehicleStorageTypes } from \"enums/VehicleStorageTypes\";\nimport { VehiclesStorageProvider } from \"helpers/vehiclesStorageProvider\";\nimport { isNullOrEmpty, getGUID } from \"helpers/helpers\";\nexport class GarageStorageHelper {\n  static addItem(index, item) {\n    if (item && index >= 0 && index < this.storageMaxSize) {\n      const storageItem = {\n        id: getGUID(),\n        index: index,\n        vehicle: item\n      };\n\n      if (VehiclesStorageProvider.addItem(this.storageType, storageItem, index)) {\n        return storageItem;\n      }\n    }\n\n    return null;\n  }\n\n  static updateItem(itemId, item, alwaysUpdate) {\n    if (item) {\n      const storageItem = VehiclesStorageProvider.getItem(this.storageType, itemId);\n\n      if (storageItem && (alwaysUpdate || !_.isEqual(storageItem.vehicle, item))) {\n        storageItem.vehicle = item;\n\n        if (VehiclesStorageProvider.updateItem(this.storageType, storageItem)) {\n          return storageItem;\n        }\n      }\n    }\n\n    return null;\n  }\n\n  static addOrUpdateItem(item) {\n    if (item) {\n      const storageItems = this.getItems(false);\n      const storageItem = storageItems.find(storageItem => {\n        return storageItem && storageItem.vehicle && storageItem.vehicle.vehicleRef === item.vehicleRef;\n      });\n\n      if (storageItem) {\n        return this.updateItem(storageItem.id, item, true);\n      } else {\n        const index = storageItems.indexOf(null);\n\n        if (!isNullOrEmpty(index) && index >= 0 && index < this.storageMaxSize) {\n          return this.addItem(index, item);\n        }\n      }\n    }\n\n    return null;\n  }\n\n  static cloneItem(itemId) {\n    const storageItems = this.getItems(false);\n    const itemToClone = storageItems.find(item => {\n      return item && item.id === itemId;\n    });\n\n    if (itemToClone) {\n      const index = storageItems.indexOf(null);\n\n      if (!isNullOrEmpty(index) && index >= 0 && index < this.storageMaxSize) {\n        const clonnedItem = {\n          id: getGUID(),\n          index: index,\n          vehicle: itemToClone.vehicle //copy not made as data comes from json\n\n        };\n\n        if (VehiclesStorageProvider.addItem(this.storageType, clonnedItem, index)) {\n          return clonnedItem;\n        }\n      }\n    }\n\n    return null;\n  }\n\n  static removeItem(itemId) {\n    return VehiclesStorageProvider.removeItem(this.storageType, itemId);\n  }\n\n  static getItems(ignoreEmptyItems) {\n    let result = VehiclesStorageProvider.getItems(this.storageType);\n\n    if (result && result.length > 0 && ignoreEmptyItems) {\n      result = result.filter(item => {\n        return item;\n      });\n    }\n\n    return result;\n  }\n\n  static clear() {\n    VehiclesStorageProvider.clear(this.storageType);\n  }\n\n  static countItems() {\n    return this.getItems(true).length;\n  }\n\n  static isFull() {\n    return !(this.countItems() < this.storageMaxSize);\n  }\n\n}\n\n_defineProperty(GarageStorageHelper, \"storageType\", VehicleStorageTypes.Garage);\n\n_defineProperty(GarageStorageHelper, \"storageMaxSize\", VehiclesStorageProvider.getStorageMaxSize(VehicleStorageTypes.Garage) || 0);","map":null,"metadata":{},"sourceType":"module"}