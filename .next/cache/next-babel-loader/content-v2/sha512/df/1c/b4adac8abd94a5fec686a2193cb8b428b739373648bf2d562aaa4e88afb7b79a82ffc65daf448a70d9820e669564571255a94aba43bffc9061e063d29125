{"ast":null,"code":"import { SitemapDefaultPages, SitemapDefaultNewsPages } from \"../types/SitemapPages\";\nimport { NewsTypes } from \"../enums/NewsTypes\";\nimport { ContentAPI } from \"API/ContentAPI\";\nimport SitemapPriorities from \"types/SitemapPriorities\";\nimport moment from 'moment';\nimport SitemapItemChangeFrequencies from \"enums/SitemapItemChangeFrequencies\";\nimport { VehicleTypes } from \"enums/VehicleTypes\";\nimport { NewsService } from \"business-logic/newsService\";\nimport { GetCanonicalUrl, GetAdviceCategoryUrl, GetAdviceArticleUrl, GetAdviceTagUrl, BudgetToUrlVehicleType, BodyTypeUrlVehicleType, BudgetFromUrlVehicleType, InStockUrlVehicleType, GetVehicleManufacturerUrl, GetShortModelUrl, GetVehicleUrl } from \"helpers/urlHelper\";\nimport { LeasingDealTypes } from \"enums/LeasingDealTypes\";\nimport { groupByArray } from \"helpers/helpers\";\nimport { GetCategoriesForType, GetBudgetTo, GetBudgetOver, GetVehicleDenotations, GetManufacturersModels } from \"./vehicleService\";\nexport const getSitemapVehiclesXMLPage = async make => {\n  const pages = [];\n  const vehiclesPromise = await GetVehicleDenotations(make, null, false);\n  vehiclesPromise.data.forEach(vehicle => {\n    let sitemap = {\n      name: vehicle.derivativeUrl,\n      url: GetCanonicalUrl(GetVehicleUrl(false, '', vehicle.vehicleTypeId == VehicleTypes.Car ? LeasingDealTypes.Personal : LeasingDealTypes.Van, vehicle.manufacturerUrl, vehicle.shortModTextUrl, vehicle.modelUrl, vehicle.derivativeUrl, vehicle.vehicleRef)),\n      priority: SitemapPriorities._1_0,\n      changeFrequency: SitemapItemChangeFrequencies.monthly,\n      modifiedOn: moment().format('YYYY-MM-DD')\n    };\n    pages.push(sitemap);\n  });\n  return pages;\n};\nexport const getSitemapPagesXMLPage = async () => {\n  const pages = [];\n  const data = await GetGeneralSitemapPages();\n  data.forEach(item => {\n    pages.push(item);\n  });\n  GetVehicleTypes().forEach(vehicleType => {\n    const inStock = GetInStockPages(vehicleType);\n    const underBudget = GetSitemapBudgetUnderPages(vehicleType);\n    const overBudget = GetSitemapBudgetOverPages(vehicleType);\n    const bodyTypePages = GetSitemapBodyTypePages(vehicleType);\n    const allPages = inStock.concat(underBudget).concat(overBudget).concat(bodyTypePages);\n    allPages.forEach(item => {\n      pages.push(item);\n    });\n  });\n  return pages;\n};\nexport const getSitemapXMLPage = async () => {\n  const currentDate = moment().format('YYYY-MM-DD');\n  const pages = [{\n    url: GetCanonicalUrl(\"/sitemap-pages.xml\"),\n    modifiedOn: currentDate\n  }, {\n    url: GetCanonicalUrl(\"/sitemap-news.xml\"),\n    modifiedOn: currentDate\n  }, {\n    url: GetCanonicalUrl(\"/sitemap-advice-guides.xml\"),\n    modifiedOn: currentDate\n  }, {\n    url: GetCanonicalUrl(\"/sitemap-manufacturers.xml\"),\n    modifiedOn: currentDate\n  }, {\n    url: GetCanonicalUrl(\"/sitemap-models.xml\"),\n    modifiedOn: currentDate\n  }];\n  const manufacturerPages = await GetManufacturersModels();\n  manufacturerPages.data.forEach(item => {\n    let manufacturerPage = {\n      url: GetCanonicalUrl(\"/sitemap-vehicles.xml?make=\" + item.manufacturer.manufacturerUrl),\n      modifiedOn: currentDate\n    };\n    pages.push(manufacturerPage);\n  });\n  return pages;\n};\nexport const GetGeneralSitemapPages = async (includeContentHubBasePages = false) => {\n  let siteMapPages = SitemapDefaultPages;\n\n  if (includeContentHubBasePages) {\n    siteMapPages = siteMapPages.concat(await GetSitemapNewsPages()).concat(await GetSitemapAdviceGuidesPages());\n  }\n\n  return siteMapPages;\n};\nexport const GetPriority = date => {\n  let priority = SitemapPriorities._0_5;\n  var a = moment(date);\n  var b = moment(); // Current Date\n\n  let differenceInDays = b.diff(a, 'days'); // 1\n\n  if (differenceInDays <= 7) priority = SitemapPriorities._0_5;else if (differenceInDays <= 14) priority = SitemapPriorities._0_4;else if (differenceInDays <= 30) priority = SitemapPriorities._0_3;else if (differenceInDays <= 90) priority = SitemapPriorities._0_2;\n  return priority;\n};\nexport const GetSitemapNewsPages = async (baseOnly = true) => {\n  let siteMapPages = SitemapDefaultNewsPages;\n\n  if (!baseOnly) {\n    var blogsBatch = await NewsService.GetAllNewsArticlePreviews(NewsTypes.Blog, null, 1, 500000);\n    var latestNewsBatch = await NewsService.GetAllNewsArticlePreviews(NewsTypes.LatestNews, null, 1, 500000);\n    var vehicleReviewsBatch = await NewsService.GetAllNewsArticlePreviews(NewsTypes.VehicleReviews, null, 1, 500000);\n    let newsItems = blogsBatch.data.dataItems.concat(latestNewsBatch.data.dataItems, vehicleReviewsBatch.data.dataItems);\n    newsItems.forEach(x => {\n      let sitemap = {\n        name: x.title,\n        url: GetCanonicalUrl(x.url),\n        priority: GetPriority(x.onDate != null ? x.onDate : moment()),\n        changeFrequency: SitemapItemChangeFrequencies.monthly,\n        modifiedOn: moment().format('YYYY-MM-DD')\n      };\n      siteMapPages.push(sitemap);\n    });\n  }\n\n  return siteMapPages;\n};\nexport const GetSitemapAdviceGuidesPages = async (baseOnly = false) => {\n  let siteMapPages = [];\n  let sitemap = {\n    name: \"Advice Guides\",\n    url: GetCanonicalUrl(\"/advice\"),\n    priority: SitemapPriorities._0_5,\n    changeFrequency: SitemapItemChangeFrequencies.always,\n    modifiedOn: moment().format('YYYY-MM-DD')\n  };\n  siteMapPages.push(sitemap);\n  var categories = await ContentAPI.GetContentCategories();\n  var tags = await ContentAPI.GetTags();\n  await Promise.all(categories.data.map(async category => {\n    let sitemap = {\n      name: \"Advice Guides - \" + category.name,\n      url: GetCanonicalUrl(GetAdviceCategoryUrl(category.url)),\n      priority: SitemapPriorities._0_5,\n      changeFrequency: SitemapItemChangeFrequencies.always,\n      modifiedOn: moment().format('YYYY-MM-DD')\n    };\n    siteMapPages.push(sitemap);\n\n    if (!baseOnly) {\n      var contentItem = await ContentAPI.GetContentItems(category.id);\n\n      if (contentItem != null && contentItem.data != null) {\n        contentItem.data.forEach(content => {\n          let sitemap = {\n            name: content.pageTitle,\n            url: GetCanonicalUrl(GetAdviceArticleUrl(content.categoryUrl, content.url)),\n            priority: GetPriority(content.publishDate),\n            changeFrequency: SitemapItemChangeFrequencies.monthly,\n            modifiedOn: moment().format('YYYY-MM-DD')\n          };\n          siteMapPages.push(sitemap);\n        });\n      }\n    }\n  }));\n  tags.data.forEach(category => {\n    let sitemap = {\n      name: \"Advice Guides - \" + category.name,\n      url: GetCanonicalUrl(GetAdviceTagUrl(category.url)),\n      priority: SitemapPriorities._0_5,\n      changeFrequency: SitemapItemChangeFrequencies.always,\n      modifiedOn: moment().format('YYYY-MM-DD')\n    };\n    siteMapPages.push(sitemap);\n  });\n  return siteMapPages;\n};\nexport const GetSitemapBodyTypePages = vehicleType => {\n  let pages = [];\n  let bodyTypes = GetCategoriesForType(vehicleType);\n  bodyTypes.forEach(bodyType => {\n    let sitemap = {\n      name: bodyType.name,\n      url: GetCanonicalUrl(BodyTypeUrlVehicleType(vehicleType, bodyType.name)),\n      priority: SitemapPriorities._1_0,\n      changeFrequency: SitemapItemChangeFrequencies.always,\n      modifiedOn: moment().format('YYYY-MM-DD')\n    };\n    pages.push(sitemap);\n  });\n  return pages;\n};\nexport const GetVehicleTypes = () => {\n  return [VehicleTypes.Car, VehicleTypes.Commercial];\n};\nexport const GetSitemapBudgetPages = vehicleType => {\n  let pages = [];\n  let under = GetSitemapBudgetUnderPages(vehicleType);\n  let over = GetSitemapBudgetOverPages(vehicleType);\n  pages = pages.concat(under).concat(over);\n  return pages;\n};\nexport const GetSitemapBudgetUnderPages = vehicleType => {\n  let pages = [];\n  GetBudgetTo().forEach(value => {\n    let sitemap = {\n      name: \"Up to £\" + value,\n      url: GetCanonicalUrl(BudgetToUrlVehicleType(vehicleType, value)),\n      priority: SitemapPriorities._1_0,\n      changeFrequency: SitemapItemChangeFrequencies.always,\n      modifiedOn: moment().format('YYYY-MM-DD')\n    };\n    pages.push(sitemap);\n  });\n  return pages;\n};\nexport const GetSitemapBudgetOverPages = vehicleType => {\n  let pages = [];\n  GetBudgetOver().forEach(value => {\n    let sitemap = {\n      name: \"Above £\" + value,\n      url: GetCanonicalUrl(BudgetFromUrlVehicleType(vehicleType, value)),\n      priority: SitemapPriorities._1_0,\n      changeFrequency: SitemapItemChangeFrequencies.always,\n      modifiedOn: moment().format('YYYY-MM-DD')\n    };\n    pages.push(sitemap);\n  });\n  return pages;\n};\nexport const GetInStockPages = vehicleType => {\n  let pages = [];\n  let sitemap = {\n    name: (vehicleType == VehicleTypes.Commercial ? \"Van\" : \"Car\") + \" Leasing In Stock\",\n    url: GetCanonicalUrl(InStockUrlVehicleType(vehicleType)),\n    priority: SitemapPriorities._1_0,\n    changeFrequency: SitemapItemChangeFrequencies.always,\n    modifiedOn: moment().format('YYYY-MM-DD')\n  };\n  pages.push(sitemap);\n  return pages;\n};\nexport const GetModelPages = async () => {\n  let manufacturerModels = await GetManufacturersModels();\n  let pages = [];\n  let vehicleTypes = GetVehicleTypes();\n  vehicleTypes.forEach(vehicleType => {\n    const manufacturers = manufacturerModels.data.filter(item => {\n      return item.models.some(x => x.vehicleType == vehicleType);\n    });\n    manufacturers.forEach(item => {\n      const models = groupByArray(item.models.filter(item => {\n        return item.vehicleType == vehicleType;\n      }), 'shortModText');\n      models.forEach(model => {\n        let sitemap = {\n          name: model.key,\n          url: GetCanonicalUrl(GetShortModelUrl(false, null, vehicleType == VehicleTypes.Car ? LeasingDealTypes.Personal : LeasingDealTypes.Van, item.manufacturer.manufacturerUrl, model.key, null)),\n          priority: SitemapPriorities._1_0,\n          changeFrequency: SitemapItemChangeFrequencies.monthly,\n          modifiedOn: moment().format('YYYY-MM-DD')\n        };\n        pages.push(sitemap);\n      });\n    });\n  });\n  return pages;\n};\nexport const GetManufacterModelPages = async () => {\n  let manufacturerModels = await GetManufacturersModels();\n  let pages = [];\n  let vehicleTypes = GetVehicleTypes();\n  vehicleTypes.forEach(vehicleType => {\n    const manufacturers = manufacturerModels.data.filter(item => {\n      return item.models.some(x => x.vehicleType == vehicleType);\n    });\n    manufacturers.forEach(element => {\n      let sitemap = {\n        name: element.manufacturer.manufacturerUrl,\n        url: GetCanonicalUrl(GetVehicleManufacturerUrl(false, null, vehicleType == VehicleTypes.Car ? LeasingDealTypes.Personal : LeasingDealTypes.Van, element.manufacturer.manufacturerUrl)),\n        priority: SitemapPriorities._1_0,\n        changeFrequency: SitemapItemChangeFrequencies.always,\n        modifiedOn: moment().format('YYYY-MM-DD')\n      };\n      pages.push(sitemap);\n    });\n  });\n  return pages;\n};","map":null,"metadata":{},"sourceType":"module"}