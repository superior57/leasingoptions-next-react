{"ast":null,"code":"import { dispatchUpdateDealToggle } from 'redux/dispatches/dispatchs';\nimport { LeasingDealTypes } from 'enums/LeasingDealTypes';\nimport { VehicleTypes } from 'enums/VehicleTypes';\nimport { VehiclePageTitle, VehicleMetaDescription } from \"helpers/seoHelper\";\nimport { GetCanonicalUrl } from 'helpers/urlHelper';\nimport { getBaseUrl } from 'helpers/urlsHelper';\nimport { getLOSSRFetchHeaders } from 'helpers/apiHelper';\nimport { GetVehicleInfo } from 'business-logic/vehicleService';\nexport const getProps = async context => {\n  let vehicleType = VehicleTypes.None;\n  let leasingDealType = LeasingDealTypes.None;\n  let isInternal = false;\n  let url = context.req.url;\n\n  if (url.startsWith(\"/internal/\")) {\n    isInternal = true;\n    url = url.replace(\"/internal\", \"\");\n  }\n\n  if (url.startsWith(\"/car-leasing/\")) {\n    dispatchUpdateDealToggle(context);\n    vehicleType = VehicleTypes.Car;\n    leasingDealType = context.store.getState().dealSelector;\n  } else if (url.startsWith(\"/van-leasing/\")) {\n    vehicleType = VehicleTypes.Commercial;\n    leasingDealType = LeasingDealTypes.Van;\n  }\n\n  if (vehicleType === VehicleTypes.None || leasingDealType === LeasingDealTypes.None) {\n    //Do we have custom page to show?\n    context.res.writeHead(404);\n    context.res.end();\n    return;\n  }\n\n  const vehicleRef = context.query.vehicleRef;\n  const vehicle = (await GetVehicleInfo(vehicleRef, null, null, true, true, getLOSSRFetchHeaders(context))).data;\n\n  if (vehicle === null || vehicle.vehicleType !== vehicleType || vehicle.manufacturerUrl.toLowerCase() !== context.query.make.toLowerCase() || vehicle.shortModTextUrl.toLowerCase() !== context.query.shortModel.toLowerCase() || vehicle.modelUrl.toLowerCase() !== context.query.model.toLowerCase() || vehicle.derivativeUrl.toLowerCase() !== context.query.derivative.toLowerCase()) {\n    context.res.writeHead(302, {\n      //TODO: avoid chain redirect\n      Location: (vehicleType === VehicleTypes.Commercial ? '/van-leasing/' : '/car-leasing/') + context.query.make.toLowerCase()\n    });\n    context.res.end();\n    return;\n  } //TODO: implement\n  //    if (CurrentAppContext.IsInternalIP) {\n  //        using(var client = new BibleClient())\n  //            {\n  //                var response = client.GetColoursForCapId(vehicle.CapId);\n  //        if (response != null) {\n  //            var biblecolours2 = new List<BibleColours2>();\n  //            foreach(var item in response)\n  //            {\n  //                biblecolours2.Add(new BibleColours2()\n  //                            {\n  //                        colour = item.colour,\n  //                        count = item.count\n  //                    });\n  //            }\n  //            vehicle.InternalDetails.BibleColours = biblecolours2;\n  //        }\n  //    }\n  //}\n\n\n  let vehicleModel = {\n    vehicleRef: vehicle.vehicleRef,\n    capId: vehicle.capId,\n    vehicleType: vehicle.vehicleType,\n    make: vehicle.manufacturer.trim(),\n    shortModel: vehicle.shortModText.trim(),\n    model: vehicle.model.trim(),\n    derivative: vehicle.derivative.trim(),\n    imageUrl: vehicle.imageUrl,\n    imageUrls: vehicle.imageUrls,\n    interiorUrl: vehicle.interiorUrl,\n    exteriorUrl: vehicle.exteriorUrl,\n    fuelType: vehicle.fuelType,\n    mpg: vehicle.mpg,\n    speed60mph: vehicle.speed60mph,\n    insuranceGroup: vehicle.insuranceGroup,\n    co2: vehicle.cO2,\n    range: vehicle.range,\n    seats: vehicle.seats,\n    doors: vehicle.doors,\n    transmission: vehicle.transmission,\n    features: vehicle.features,\n    stickers: vehicle.stickers,\n    minPrice: vehicle.minPrice,\n    maxPrice: vehicle.maxPrice,\n    optionsSelectAllowed: vehicle.optionsIsSelectable,\n    availableMileages: vehicle.availableMileages,\n    hasMaintenance: vehicle.hasMaintenance\n  };\n\n  if (isInternal) {\n    vehicleModel.extraDetails = vehicle.internalDetails;\n  }\n\n  let metaData = {\n    title: VehiclePageTitle(vehicleModel.vehicleType, vehicleModel.make, vehicleModel.model, vehicleModel.derivative),\n    description: VehicleMetaDescription(vehicleModel.vehicleType, vehicleModel.make, vehicleModel.shortModel, vehicleModel.derivative),\n    imageUrl: vehicleModel.imageUrls && vehicleModel.imageUrls.length > 0 ? vehicleModel.imageUrls[0] : null,\n    canonicalUrl: GetCanonicalUrl(getBaseUrl(url))\n  };\n  return {\n    props: {\n      vehicle: vehicleModel,\n      metaData: metaData,\n      orderModalOpenned: context.query.showordermodal === \"1\"\n    }\n  };\n};","map":null,"metadata":{},"sourceType":"module"}