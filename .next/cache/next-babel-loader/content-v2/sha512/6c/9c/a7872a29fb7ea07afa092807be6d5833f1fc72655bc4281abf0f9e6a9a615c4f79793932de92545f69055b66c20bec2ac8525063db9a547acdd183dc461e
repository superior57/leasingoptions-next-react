{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { useState, useEffect } from 'react';\nimport { useFormContext } from \"react-hook-form\";\nimport { useRouter } from 'next/router';\nimport MarketingConsent from 'components/marketing-consent';\nimport PrivacyPolicyConsent from 'components/privacy-policy-consent';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faSpinner } from \"@fortawesome/pro-regular-svg-icons\";\nimport { PhoneNumberIsValid, EmailAddressIsValid } from 'helpers/validation';\nimport { setPrivacyAccepted } from 'helpers/cookiesHelper';\nimport { getGAClientId } from 'helpers/analytics';\nimport { GarageStorageHelper } from '../_libs/helpers/garageStorageHelper';\nimport { GarageService } from 'business-logic/garageService';\nimport { MarketingCommunicationsService } from 'business-logic/marketingCommunicationsService';\nimport { EnquiryService } from 'business-logic/enquiryService';\nimport { GetSalesPeople } from 'business-logic/systemService';\n\nconst GarageEnquiryForm = ({\n  settings\n}) => {\n  var _errors$telephone, _errors$email;\n\n  const router = useRouter();\n  const {\n    register,\n    handleSubmit,\n    errors\n  } = useFormContext();\n  const {\n    0: isLoading,\n    1: setIsLoading\n  } = useState(false);\n  const {\n    0: salesPersons,\n    1: setSalesPersons\n  } = useState(settings.salesPersons || []);\n  const {\n    0: marketingConsentIsVerifying,\n    1: setMarketingConsentIsVerifying\n  } = useState(false);\n  const {\n    0: emailAddressConsent,\n    1: setEmailAddressConsent\n  } = useState(null); //TODO: get salespersons with settings\n\n  useEffect(() => {\n    if (salesPersons.length === 0 && settings.isInternal) {\n      GetSalesPeople().then(result => {\n        setSalesPersons(result.data);\n      });\n    }\n  }, []); //Fires only when input loses focus and triggers marketing-consent to reinitialize\n\n  const onEmailFocusOut = event => {\n    if (!settings.isInternal) {\n      if (event.target.value && EmailAddressIsValid(event.target.value)) {\n        setEmailAddressConsent(event.target.value);\n      } else {\n        setEmailAddressConsent(null);\n      }\n    }\n  };\n\n  const onSubmit = formData => {\n    if (!settings.isDisabled && !isLoading && !marketingConsentIsVerifying) {\n      setIsLoading(true);\n      const garageData = {\n        email: formData.email,\n        state: settings.isInternal ? settings.getData(formData.garageManualData, formData.fees) : settings.getData()\n      };\n      GarageService.SaveGarage(garageData).then(saveResult => {\n        if (saveResult.isSucceed && saveResult.data) {\n          let enquiryData = {\n            garageEnquiryType: settings.isInternal ? 2 : 1,\n            fullName: formData.fullName,\n            telephone: formData.telephone,\n            email: formData.email,\n            persistedGarageId: saveResult.data,\n            gaClientId: getGAClientId(),\n            allowedCommunicationTypes: null\n          };\n\n          if (settings.isInternal) {\n            enquiryData[\"salesPersonId\"] = formData.salesPersonId || null;\n          } else {\n            enquiryData.allowedCommunicationTypes = formData.allowedCommunicationTypes || null;\n          }\n\n          EnquiryService.SubmitGarageEnquiry(enquiryData).then(enquiryResult => {\n            setIsLoading(false);\n\n            if (enquiryResult.isSucceed && enquiryResult.data) {\n              if (!settings.isInternal) {\n                let expiryDate = new Date();\n                expiryDate.setFullYear(expiryDate.getFullYear() + 1);\n\n                if (enquiryData.allowedCommunicationTypes) {\n                  MarketingCommunicationsService.SetToSeenMarketingForm(enquiryData.email, expiryDate);\n                }\n\n                if (formData.privacyConfirmed) {\n                  setPrivacyAccepted(expiryDate);\n                }\n              }\n\n              GarageStorageHelper.clear();\n\n              if (settings.isInternal) {\n                router.push(\"/thankyouinternal\");\n              } else {\n                //TODO: what value should be passed here?\n                router.push(\"/thankyou?goal=mygarage&i=\" + enquiryResult.data);\n              }\n            } else {\n              alert(\"Failed to send enquiry.\");\n            }\n          });\n        } else {\n          alert(\"Failed to save garage.\");\n          setIsLoading(false);\n        }\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxs(\"div\", {\n    className: \"w-100 box bg-white p-0\",\n    children: [/*#__PURE__*/_jsx(\"div\", {\n      className: \"box__header\",\n      children: \"Enquire on selected vehicles\"\n    }), /*#__PURE__*/_jsxs(\"div\", {\n      className: \"box__content\",\n      children: [/*#__PURE__*/_jsxs(\"div\", {\n        className: \"row\",\n        children: [/*#__PURE__*/_jsxs(\"div\", {\n          className: \"col-24 col-md-12 form-group\",\n          children: [/*#__PURE__*/_jsx(\"label\", {\n            htmlFor: \"fullName\",\n            children: \"Full Name *\"\n          }), /*#__PURE__*/_jsx(\"input\", {\n            type: \"text\",\n            className: `form-control ${errors.fullName ? \"is-invalid\" : \"\"}`,\n            id: \"fullName\",\n            name: \"fullName\",\n            \"aria-describedby\": \"fullName\",\n            placeholder: \"First & Last Name\",\n            maxLength: 50,\n            ref: register({\n              required: true\n            })\n          }), errors.fullName ? /*#__PURE__*/_jsx(\"span\", {\n            className: \"invalid-feedback d-block\",\n            children: \"Full Name is required.\"\n          }) : null]\n        }), /*#__PURE__*/_jsxs(\"div\", {\n          className: \"col-24 col-md-12 form-group\",\n          children: [/*#__PURE__*/_jsx(\"label\", {\n            htmlFor: \"telephone\",\n            children: \"Telephone *\"\n          }), /*#__PURE__*/_jsx(\"input\", {\n            type: \"tel\",\n            className: `form-control ${errors.telephone ? \"is-invalid\" : \"\"}`,\n            id: \"telephone\",\n            name: \"telephone\",\n            \"aria-describedby\": \"telephone\",\n            placeholder: \"Mobile or Home\",\n            maxLength: 20,\n            ref: register({\n              required: 'Telephone is required.',\n              validate: value => PhoneNumberIsValid(value) === true || 'Please specify a valid UK phone number.'\n            })\n          }), errors.telephone ? /*#__PURE__*/_jsx(\"span\", {\n            className: \"invalid-feedback d-block\",\n            children: (_errors$telephone = errors.telephone) === null || _errors$telephone === void 0 ? void 0 : _errors$telephone.message\n          }) : null]\n        }), /*#__PURE__*/_jsxs(\"div\", {\n          className: \"col-24 col-md-12 form-group\",\n          children: [/*#__PURE__*/_jsx(\"label\", {\n            htmlFor: \"emailEnquiry\",\n            children: \"Email Address *\"\n          }), /*#__PURE__*/_jsx(\"input\", {\n            type: \"email\",\n            className: `form-control ${errors.email ? \"is-invalid\" : \"\"}`,\n            id: \"emailEnquiry\",\n            name: \"email\",\n            \"aria-describedby\": \"email\",\n            placeholder: \"E.g. johnsmith@website.co.uk\",\n            maxLength: 50,\n            onBlur: onEmailFocusOut,\n            ref: register({\n              required: 'Email is required.',\n              validate: value => EmailAddressIsValid(value) === true || 'Email is invalid.'\n            })\n          }), errors.email ? /*#__PURE__*/_jsx(\"span\", {\n            className: \"invalid-feedback d-block\",\n            children: (_errors$email = errors.email) === null || _errors$email === void 0 ? void 0 : _errors$email.message\n          }) : null]\n        }), settings.isInternal ? /*#__PURE__*/_jsxs(\"div\", {\n          className: \"col-24 col-lg-12 form-group\",\n          children: [/*#__PURE__*/_jsx(\"label\", {\n            children: \"Salesperson\"\n          }), /*#__PURE__*/_jsxs(\"select\", {\n            className: \"form-control\",\n            name: \"salesPersonId\",\n            ref: register,\n            children: [/*#__PURE__*/_jsx(\"option\", {\n              value: \"\",\n              children: \"Please select\"\n            }), salesPersons.map(item => /*#__PURE__*/_jsx(\"option\", {\n              value: item.id,\n              children: item.fullName\n            }, item.id))]\n          })]\n        }) : null]\n      }), !settings.isInternal ? /*#__PURE__*/_jsx(\"div\", {\n        className: \"row\",\n        children: /*#__PURE__*/_jsxs(\"div\", {\n          className: \"col-24\",\n          children: [/*#__PURE__*/_jsx(MarketingConsent, {\n            emailAddress: emailAddressConsent,\n            settings: {\n              onVerificationStart: () => {\n                setMarketingConsentIsVerifying(true);\n              },\n              onVerificationComplete: () => {\n                setMarketingConsentIsVerifying(false);\n              }\n            }\n          }), /*#__PURE__*/_jsx(PrivacyPolicyConsent, {})]\n        })\n      }) : null, /*#__PURE__*/_jsx(\"div\", {\n        className: \"row\",\n        children: /*#__PURE__*/_jsx(\"div\", {\n          className: \"col-24 col-md-12 offset-md-12\",\n          children: /*#__PURE__*/_jsx(\"button\", {\n            type: \"button\",\n            className: \"w-100 btn btn-primary btn-lg\",\n            disabled: settings.isDisabled,\n            onClick: handleSubmit(onSubmit),\n            children: isLoading ? /*#__PURE__*/_jsx(FontAwesomeIcon, {\n              width: \"16\",\n              height: \"16\",\n              icon: faSpinner,\n              className: \"fa-spin\"\n            }) : settings.isInternal ? \"Get a Multi-Car Quote\" : \"Enquire\"\n          })\n        })\n      })]\n    })]\n  });\n};\n\nexport default GarageEnquiryForm;","map":null,"metadata":{},"sourceType":"module"}