{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport _ from 'underscore';\nimport { VehicleExtraOptionsHelper } from './helpers/VehicleExtraOptionsHelper';\nexport class VehicleExtraOptionsManager {\n  constructor() {\n    _defineProperty(this, \"_vehicleOptions\", []);\n\n    _defineProperty(this, \"_vehicleOptionRelationships\", []);\n\n    _defineProperty(this, \"_selectedOptionIds\", []);\n\n    _defineProperty(this, \"_confirmRelationshipIds\", []);\n\n    _defineProperty(this, \"_optionsStates\", []);\n  }\n\n  _clearMangerState() {\n    this._confirmRelationshipIds = [];\n    this._selectedOptionIds = [];\n    this._optionsStates = [];\n  }\n\n  init(options, relationships) {\n    this._vehicleOptions = options || [];\n    this._vehicleOptionRelationships = relationships || [];\n\n    this._clearMangerState();\n  }\n\n  processOptions(optionsToProcess, confirmRelationshipIds = null, selectedOptionIds = null, optionsStates = null) {\n    this._clearMangerState();\n\n    this._selectedOptionIds = _.clone(selectedOptionIds || []);\n    this._confirmRelationshipIds = _.clone(confirmRelationshipIds || []);\n    this._optionsStates = VehicleExtraOptionsHelper.cloneOptionsStates(optionsStates || []);\n    let silentlySelectedOptionIds = null;\n\n    if (optionsToProcess && optionsToProcess.length > 0) {\n      let selectedOptionIds = _.clone(this._selectedOptionIds);\n\n      let optionIdsByAction = VehicleExtraOptionsHelper.splitOptionIdsByAction(optionsToProcess);\n\n      if (_.intersection(optionIdsByAction.selectIds, optionIdsByAction.deselectIds).length > 0) {\n        alert(\"Action is not allowed.\");\n        return null;\n      }\n\n      let forSilentSelect = _.pluck(VehicleExtraOptionsHelper.getOptionsWithoutRelationships(this._vehicleOptions, optionIdsByAction.selectIds), 'id');\n\n      let forSilentDeselect = _.pluck(VehicleExtraOptionsHelper.getOptionsWithoutRelationships(this._vehicleOptions, optionIdsByAction.deselectIds), 'id');\n\n      let optionIdsForSilentApply = _.union(forSilentSelect, forSilentDeselect);\n\n      if (optionIdsForSilentApply.length > 0) {\n        selectedOptionIds = _.union(selectedOptionIds, forSilentSelect);\n        selectedOptionIds = _.difference(selectedOptionIds, forSilentDeselect);\n        this._selectedOptionIds = _.clone(selectedOptionIds);\n        silentlySelectedOptionIds = _.clone(selectedOptionIds);\n      }\n\n      let optionsToConfirm = _.filter(optionsToProcess, function (optionToProcess) {\n        return !_.contains(optionIdsForSilentApply, optionToProcess.id);\n      });\n\n      if (optionsToConfirm != null && optionsToConfirm.length > 0) {\n        let confirmDetails = this._getConfirmDetails(optionsToConfirm, selectedOptionIds, this._confirmRelationshipIds, this._optionsStates);\n\n        if (confirmDetails.hasConflicts) {\n          alert(\"Action is not allowed.\");\n          return null;\n        }\n\n        let optionsForSilentApply = _.filter(optionsToConfirm, function (option) {\n          let notAny = !_.some(confirmDetails.confirmRelationships, function (confirmRelationship) {\n            let contains = _.contains(confirmRelationship.optionIds, option.id);\n\n            return contains;\n          });\n          return notAny;\n        });\n\n        if (optionsForSilentApply.length > 0) {\n          silentlySelectedOptionIds = _.clone(this._selectedOptionIds);\n          optionIdsByAction = VehicleExtraOptionsHelper.splitOptionIdsByAction(optionsForSilentApply);\n          silentlySelectedOptionIds = _.union(silentlySelectedOptionIds, optionIdsByAction.selectIds);\n          silentlySelectedOptionIds = _.difference(silentlySelectedOptionIds, optionIdsByAction.deselectIds);\n        }\n\n        this._selectedOptionIds = confirmDetails.selectedOptionIds;\n        this._confirmRelationshipIds = _.pluck(confirmDetails.confirmRelationships, \"id\");\n        this._optionsStates = confirmDetails.optionsStates;\n      }\n    }\n\n    let result = {\n      selectedOptionIds: _.clone(this._selectedOptionIds),\n      confirmRelationshipIds: _.clone(this._confirmRelationshipIds),\n      optionsStates: _.clone(this._optionsStates),\n      silentlySelectedOptionIds: silentlySelectedOptionIds\n    };\n    return result;\n  }\n\n  _getConfirmDetails(optionsToConfirm, initialSelectedOptionIds, initialConfirmReationshipIds, initialOptionsStates) {\n    let result = {\n      hasConflicts: false,\n      selectedOptionIds: [],\n      confirmRelationships: [],\n      optionsStates: []\n    };\n\n    if (optionsToConfirm && optionsToConfirm.length > 0) {\n      let currentSelectedOptionIds = _.clone(initialSelectedOptionIds || []);\n\n      let currentPendingRelationshipIds = _.clone(initialConfirmReationshipIds || []);\n\n      let currentOptionsStates = VehicleExtraOptionsHelper.cloneOptionsStates(initialOptionsStates || []);\n\n      let iterationOptions = _.clone(optionsToConfirm);\n\n      let iterationResult = this._getConfirmDetailsIteration(iterationOptions, currentSelectedOptionIds, currentOptionsStates);\n\n      while (iterationResult) {\n        if (iterationResult.hasConflicts) {\n          result.hasConflicts = true;\n          break;\n        }\n\n        iterationOptions.forEach(function (iterationOptionState) {\n          let optionState = _.find(currentOptionsStates, function (optionState) {\n            return optionState.id === iterationOptionState.id;\n          });\n\n          if (!optionState) {\n            optionState = {\n              id: iterationOptionState.id,\n              selectionRequiredBy: [],\n              deselectionRequiredBy: [],\n              mirrorIn: []\n            };\n            currentOptionsStates.push(optionState);\n          }\n\n          optionState.selectionRequiredBy = _.union(optionState.selectionRequiredBy, _.difference(iterationOptionState.selectionRequiredBy, [-1]));\n          optionState.deselectionRequiredBy = _.union(optionState.deselectionRequiredBy, _.difference(iterationOptionState.deselectionRequiredBy, [-1]));\n          optionState.mirrorIn = _.union(optionState.mirrorIn, iterationOptionState.mirrorIn);\n        });\n\n        if (iterationResult.recallRestrictionRelationshipIds) {\n          currentOptionsStates.forEach(function (optionState) {\n            optionState.selectionRequiredBy = _.difference(optionState.selectionRequiredBy, iterationResult.recallRestrictionRelationshipIds);\n            optionState.deselectionRequiredBy = _.difference(optionState.deselectionRequiredBy, iterationResult.recallRestrictionRelationshipIds);\n          });\n        }\n\n        let selectIds = _.pluck(_.filter(iterationOptions, function (option) {\n          return option.selectionRequiredBy.length > 0;\n        }), \"id\");\n\n        let deselectIds = _.pluck(_.filter(iterationOptions, function (option) {\n          return option.deselectionRequiredBy.length > 0;\n        }), \"id\");\n\n        currentSelectedOptionIds = _.difference(_.union(currentSelectedOptionIds, selectIds), deselectIds);\n        currentPendingRelationshipIds = _.union(currentPendingRelationshipIds, iterationResult.confirmRelationshipIds);\n        iterationOptions = iterationResult.nextIterationOptions;\n        iterationResult = this._getConfirmDetailsIteration(iterationOptions, currentSelectedOptionIds, currentOptionsStates);\n      }\n\n      if (!result.hasConflicts) {\n        let self = this;\n        let optionsStates = currentOptionsStates;\n        let selectedOptionIds = currentSelectedOptionIds;\n        let confirmRelationships = [];\n        currentPendingRelationshipIds.forEach(function (relationshipId) {\n          let relationship = _.find(self._vehicleOptionRelationships, function (item) {\n            return item && item.id === relationshipId;\n          });\n\n          if (relationship) {\n            let optionIds = [];\n            optionIds = _.union(optionIds, relationship.primaryOptionIds);\n            optionIds = _.union(optionIds, relationship.regularOptionIds);\n            optionIds = _.filter(optionIds, function (id) {\n              return VehicleExtraOptionsHelper.optionExists(id, self._vehicleOptions);\n            });\n\n            if (optionIds.length > 0) {\n              confirmRelationships.push({\n                id: relationshipId,\n                optionIds: optionIds\n              });\n            }\n          }\n        }); //process empty RO, IO here\n        //wrong, should be applied processed items which not covered by confirm rules\n        //if ((!confirmRelationships || confirmRelationships.length === 0) && silentApplyAllowed && selectedOptionIds.length > 0) {\n        //    if (this.onApply) {\n        //        this.onApply(_.clone(selectedOptionIds));\n        //    }\n        //}\n        //cleanup confirm relationships\n        //--------------------------\n\n        let emptyRelationships = _.filter(confirmRelationships, function (item) {\n          return _.intersection(item.optionIds, selectedOptionIds).length == 0;\n        });\n\n        if (confirmRelationships.length > emptyRelationships.length) {\n          confirmRelationships = _.filter(confirmRelationships, function (item) {\n            return _.intersection(item.optionIds, selectedOptionIds).length > 0;\n          });\n        } //--------------------------\n        //confirmRelationships.forEach(function (confirmRelationship) {\n        //    VehicleExtraOptionsHelper.disableConfirmRelationshipOptions(confirmRelationship, selectedOptionIds);\n        //});\n\n\n        let zeroPriceOptionIds = [];\n\n        let activeINRelationships = _.filter(this._vehicleOptionRelationships, function (relationship) {\n          return relationship && _.contains(VehicleExtraOptionsHelper.allowedRelationshipTypes, relationship.type) && relationship.type === \"IN\" && _.intersection(selectedOptionIds, relationship.primaryOptionIds).length === relationship.primaryOptionIds.length;\n        });\n\n        if (activeINRelationships && activeINRelationships.length > 0) {\n          activeINRelationships.forEach(function (relationship) {\n            zeroPriceOptionIds = _.union(zeroPriceOptionIds, relationship.regularOptionIds);\n          });\n        }\n\n        optionsStates.forEach(function (optionState) {\n          optionState.useZeroPrice = _.contains(zeroPriceOptionIds, optionState.id);\n          optionState.selectionRequiredBy = _.without(optionState.selectionRequiredBy, 0);\n          optionState.deselectionRequiredBy = _.without(optionState.deselectionRequiredBy, 0);\n        });\n        result.optionsStates = optionsStates;\n        result.selectedOptionIds = selectedOptionIds;\n        result.confirmRelationships = confirmRelationships;\n      }\n    }\n\n    return result;\n  }\n\n  _getConfirmDetailsIteration(iterationOptions, selectedOptionIds, optionsStates) {\n    if (iterationOptions && iterationOptions.length > 0) {\n      let hasConflicts = false;\n      let confirmRelationshipIds = [];\n      let nextIterationOptions = [];\n      let recallRestrictionRelationshipIds = [];\n      let requiredOptionIdsByAction = VehicleExtraOptionsHelper.splitOptionIdsByAction(iterationOptions);\n      hasConflicts = _.intersection(requiredOptionIdsByAction.selectIds, requiredOptionIdsByAction.deselectIds).length > 0;\n\n      if (!hasConflicts) {\n        let uniqueSelectIds = _.difference(requiredOptionIdsByAction.selectIds, selectedOptionIds);\n\n        let uniqueDeselectIds = _.intersection(requiredOptionIdsByAction.deselectIds, selectedOptionIds);\n\n        let iterationSelectedOptionIds = _.difference(_.union(selectedOptionIds, uniqueSelectIds), uniqueDeselectIds);\n\n        let relationshipsToConfirm = VehicleExtraOptionsHelper.getRelationships(this._vehicleOptionRelationships, _.union(uniqueSelectIds, uniqueDeselectIds));\n\n        if (relationshipsToConfirm && relationshipsToConfirm.length > 0) {\n          for (let relationshipIdx = 0; relationshipIdx < relationshipsToConfirm.length; relationshipIdx++) {\n            let relationshipToConfirm = relationshipsToConfirm[relationshipIdx];\n            let primaryOptionIds = relationshipToConfirm.primaryOptionIds;\n            let regularOptionIds = relationshipToConfirm.regularOptionIds;\n\n            let optionIds = _.union(primaryOptionIds, regularOptionIds);\n\n            let selectIntersection = _.intersection(optionIds, uniqueSelectIds);\n\n            let deselectIntersection = _.intersection(optionIds, uniqueDeselectIds);\n\n            if (selectIntersection.length > 0 && deselectIntersection.length > 0) {} else if (selectIntersection.length > 0) {\n              let isActive = relationshipToConfirm.type === \"OO\" || _.intersection(primaryOptionIds, iterationSelectedOptionIds).length === primaryOptionIds.length;\n\n              if (!isActive) {\n                continue;\n              }\n\n              for (let i = 0; i < selectIntersection.length; i++) {\n                let optionId = selectIntersection[0];\n\n                let optionState = _.find(optionsStates, function (optionState) {\n                  return optionState.id === optionId;\n                });\n\n                if (optionState) {\n                  if (_.difference(optionState.deselectionRequiredBy, [relationshipToConfirm.id, -1]).length > 0) {\n                    hasConflicts = true;\n                    break;\n                  }\n                }\n              }\n\n              if (hasConflicts) {\n                break;\n              }\n\n              if (relationshipToConfirm.type == \"OO\") {\n                if (selectIntersection.length > 1) {\n                  hasConflicts = true;\n                  break;\n                } else {\n                  let selectOptionState = _.find(optionsStates, function (optionState) {\n                    return optionState.id === selectIntersection[0];\n                  }); //if (selectOptionState) {\n                  //    selectOptionState.deselectionRequiredBy = _.without(selectOptionState.deselectionRequiredBy, relationshipToConfirm.id);\n                  //}\n\n\n                  _.difference(regularOptionIds, selectIntersection).forEach(function (optionId) {\n                    let nextIterationOption = _.find(nextIterationOptions, function (option) {\n                      return option.id === optionId;\n                    });\n\n                    if (!nextIterationOption) {\n                      nextIterationOption = {\n                        id: optionId,\n                        selectionRequiredBy: [],\n                        deselectionRequiredBy: []\n                      };\n                      nextIterationOptions.push(nextIterationOption);\n                    }\n\n                    nextIterationOption.deselectionRequiredBy = _.union(nextIterationOption.deselectionRequiredBy, [-1]);\n                  });\n                }\n              } else if (relationshipToConfirm.type == \"RA\" || relationshipToConfirm.type == \"IN\") {\n                let isMirror = relationshipToConfirm.mirrorRelationshipIds && relationshipToConfirm.mirrorRelationshipIds.length > 0;\n                regularOptionIds.forEach(function (optionId) {\n                  let nextIterationOption = _.find(nextIterationOptions, function (option) {\n                    return option.id === optionId;\n                  });\n\n                  if (!nextIterationOption) {\n                    nextIterationOption = {\n                      id: optionId,\n                      selectionRequiredBy: [],\n                      deselectionRequiredBy: [],\n                      mirrorIn: []\n                    };\n                    nextIterationOptions.push(nextIterationOption);\n                  }\n\n                  nextIterationOption.selectionRequiredBy = _.union(nextIterationOption.selectionRequiredBy, [relationshipToConfirm.id]);\n\n                  if (isMirror) {\n                    nextIterationOption.mirrorIn = _.union(nextIterationOption.mirrorIn, [relationshipToConfirm.id], relationshipToConfirm.mirrorRelationshipIds);\n                  }\n                });\n              }\n\n              confirmRelationshipIds = _.union(confirmRelationshipIds, [relationshipToConfirm.id]);\n            } else if (deselectIntersection.length > 0) {\n              for (let i = 0; i < deselectIntersection.length; i++) {\n                let optionId = deselectIntersection[i];\n\n                let optionState = _.find(optionsStates, function (optionState) {\n                  return optionState.id === optionId;\n                });\n\n                if (optionState && _.difference(optionState.selectionRequiredBy, optionState.mirrorIn).length > 0) {\n                  hasConflicts = true;\n                  break;\n                }\n              }\n\n              if (hasConflicts) {\n                break;\n              }\n\n              if (relationshipToConfirm.type == \"OO\") {\n                if (_.intersection(iterationSelectedOptionIds, optionIds).length == 0) {\n                  recallRestrictionRelationshipIds.push(relationshipToConfirm.id);\n                }\n\n                confirmRelationshipIds = _.union(confirmRelationshipIds, [relationshipToConfirm.id]);\n              } else if (relationshipToConfirm.type == \"RA\" || relationshipToConfirm.type == \"IN\") {\n                let isMirror = relationshipToConfirm.mirrorRelationshipIds && relationshipToConfirm.mirrorRelationshipIds.length > 0;\n\n                if (isMirror) {\n                  _.difference(optionIds, deselectIntersection).forEach(function (optionId) {\n                    let nextIterationOption = _.find(nextIterationOptions, function (option) {\n                      return option.id === optionId;\n                    });\n\n                    if (!nextIterationOption) {\n                      nextIterationOption = {\n                        id: optionId,\n                        selectionRequiredBy: [],\n                        deselectionRequiredBy: [],\n                        mirrorIn: []\n                      };\n                      nextIterationOptions.push(nextIterationOption);\n                    }\n\n                    nextIterationOption.deselectionRequiredBy = _.union(nextIterationOption.deselectionRequiredBy, [0]);\n                  });\n                }\n\n                if (_.intersection(primaryOptionIds, iterationSelectedOptionIds).length !== primaryOptionIds.length) {\n                  recallRestrictionRelationshipIds.push(relationshipToConfirm.id);\n                }\n\n                if (_.intersection(primaryOptionIds, selectedOptionIds).length === primaryOptionIds.length) {\n                  confirmRelationshipIds = _.union(confirmRelationshipIds, [relationshipToConfirm.id]);\n                }\n              }\n            }\n          }\n        }\n      }\n\n      return {\n        hasConflicts: hasConflicts,\n        confirmRelationshipIds: hasConflicts ? [] : confirmRelationshipIds,\n        nextIterationOptions: hasConflicts ? [] : nextIterationOptions,\n        recallRestrictionRelationshipIds: hasConflicts ? [] : recallRestrictionRelationshipIds\n      };\n    }\n\n    return null;\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}