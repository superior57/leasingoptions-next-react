{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport style from './doofinder-search.module.scss';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faSearch } from \"@fortawesome/free-solid-svg-icons\";\nimport { VehicleTypes } from 'enums/VehicleTypes';\nimport { GetStaticMakes } from 'business-logic/vehicleService';\nimport { GetModels } from 'business-logic/vehicleService';\n\nconst DoofinderSearch = ({\n  vehiclePreference,\n  dispatchvehiclePreference\n}) => {\n  const {\n    0: makeList,\n    1: setMakeList\n  } = useState([]);\n  const {\n    0: modelList,\n    1: setModelList\n  } = useState([]);\n  const {\n    0: query,\n    1: setQuery\n  } = useState('');\n  const {\n    0: manfacturer,\n    1: setManufacturer\n  } = useState('');\n  const {\n    0: model,\n    1: setModel\n  } = useState('');\n  const {\n    0: minBudget,\n    1: setMinBudget\n  } = useState(0);\n  const {\n    0: maxBudget,\n    1: setMaxBudget\n  } = useState(1000000);\n\n  const handleVehicleTypeChange = vehicleType => dispatchvehiclePreference(vehicleType);\n\n  const handleMinClick = evt => setMinBudget(parseInt(evt.currentTarget.value));\n\n  const handleMaxClick = evt => {\n    let maxValue = parseInt(evt.currentTarget.value);\n\n    if (maxValue === 1000000) {\n      setMinBudget(0);\n    } else if (maxValue === 10000001) {\n      setMinBudget(1001);\n    }\n\n    setMaxBudget(maxValue);\n  };\n\n  const handleMakeClick = evt => {\n    const manfacturerUrl = evt.currentTarget.value;\n    setManufacturer(manfacturerUrl);\n    setQuery(manfacturerUrl);\n\n    if (manfacturerUrl !== '') {\n      GetModels(vehiclePreference, manfacturerUrl).then(data => {\n        setModelList(data.data);\n      });\n    } else {\n      setModelList([]);\n      setModel('');\n    }\n  };\n\n  const handleModelClick = (evt, manfacturerUrl) => {\n    const modelUrl = evt.currentTarget.value;\n    setModel(modelUrl);\n    setQuery(manfacturerUrl + \" \" + modelUrl);\n  };\n\n  const handleSearchKeyup = evt => {\n    var _evt$currentTarget;\n\n    return setQuery((_evt$currentTarget = evt.currentTarget) === null || _evt$currentTarget === void 0 ? void 0 : _evt$currentTarget.value);\n  };\n\n  useEffect(() => {\n    setMakeList(GetStaticMakes(vehiclePreference));\n    setModelList([]);\n    setQuery('');\n    setManufacturer('');\n    setModel('');\n    setMinBudget(0);\n    setMaxBudget(1000000);\n  }, [vehiclePreference]);\n  useEffect(() => {\n    updateFilteredResults(query, manfacturer, model, minBudget, maxBudget);\n  }, [query]);\n  useEffect(() => {\n    if (query) {\n      updateFilteredResults(query, manfacturer, model, minBudget, maxBudget);\n    }\n  }, [minBudget, maxBudget]);\n\n  function updateFilteredResults(query, manfacturer, model, minBudget, maxBudget) {\n    var _dfClassicLayers;\n\n    //@ts-ignore doofinder and dfClassicLayers are not declared\n    if (((_dfClassicLayers = dfClassicLayers) === null || _dfClassicLayers === void 0 ? void 0 : _dfClassicLayers.length) > 0) {\n      //@ts-ignore dfClassicLayers is not declared\n      var instance = dfClassicLayers[0];\n\n      if (instance.layer) {\n        // Update search parameters\n        instance.layer.controller.query = query; // Update min budget parameters\n\n        instance.layer.config.searchParams.filter.price.gte = minBudget;\n        instance.layerOptions.searchParams.filter.price.gte = minBudget;\n        instance.layer.controller.defaults.filter.price.gte = minBudget;\n        instance.layer.controller.params.filter.price.gte = minBudget; // Update max budget parameters\n\n        instance.layer.config.searchParams.filter.price.lte = maxBudget;\n        instance.layerOptions.searchParams.filter.price.lte = maxBudget;\n        instance.layer.controller.defaults.filter.price.lte = maxBudget;\n        instance.layer.controller.params.filter.price.lte = maxBudget; // Updated categories parameters\n\n        if (manfacturer && model) {\n          instance.layer.config.searchParams.filter.categories = [manfacturer.toUpperCase(), model.toUpperCase()];\n          instance.layerOptions.searchParams.filter.categories = [manfacturer.toUpperCase(), model.toUpperCase()];\n          instance.layer.controller.defaults.filter.categories = [manfacturer.toUpperCase(), model.toUpperCase()];\n          instance.layer.controller.params.filter.categories = [manfacturer.toUpperCase(), model.toUpperCase()];\n        } else if (manfacturer) {\n          instance.layer.config.searchParams.filter.categories = [manfacturer.toUpperCase()];\n          instance.layerOptions.searchParams.filter.categories = [manfacturer.toUpperCase()];\n          instance.layer.controller.defaults.filter.categories = [manfacturer.toUpperCase()];\n          instance.layer.controller.params.filter.categories = [manfacturer.toUpperCase()];\n        } // Refresh and show doofinder\n\n\n        instance.layer.controller.refresh();\n      }\n    }\n  }\n\n  return /*#__PURE__*/_jsxs(\"div\", {\n    className: style['doofinder-block'],\n    children: [/*#__PURE__*/_jsxs(\"ul\", {\n      children: [/*#__PURE__*/_jsx(\"li\", {\n        children: /*#__PURE__*/_jsx(\"button\", {\n          className: `btn btn-text btn-block text-center ${vehiclePreference === VehicleTypes.Car ? style['is-selected'] : ''}`,\n          onClick: () => handleVehicleTypeChange(VehicleTypes.Car),\n          children: \"Car Leasing\"\n        })\n      }), /*#__PURE__*/_jsx(\"li\", {\n        children: /*#__PURE__*/_jsx(\"button\", {\n          className: `btn btn-text btn-block text-center ${vehiclePreference === VehicleTypes.Commercial ? style['is-selected'] : ''}`,\n          onClick: () => handleVehicleTypeChange(VehicleTypes.Commercial),\n          children: \"Van Leasing\"\n        })\n      })]\n    }), /*#__PURE__*/_jsxs(\"div\", {\n      className: style['doofinder-block__options'],\n      children: [/*#__PURE__*/_jsxs(\"div\", {\n        className: style['doofinder-block__row'],\n        children: [/*#__PURE__*/_jsx(\"label\", {\n          htmlFor: \"min-budget\",\n          children: \"Min Budget\"\n        }), /*#__PURE__*/_jsxs(\"select\", {\n          id: \"min-budget\",\n          value: minBudget,\n          onChange: evt => handleMinClick(evt),\n          children: [/*#__PURE__*/_jsx(\"option\", {\n            value: \"0\",\n            children: \"Any\"\n          }), /*#__PURE__*/_jsx(\"option\", {\n            value: \"151\",\n            children: \"Over \\xA3150\"\n          }), /*#__PURE__*/_jsx(\"option\", {\n            value: \"201\",\n            children: \"Over \\xA3200\"\n          }), /*#__PURE__*/_jsx(\"option\", {\n            value: \"251\",\n            children: \"Over \\xA3250\"\n          }), /*#__PURE__*/_jsx(\"option\", {\n            value: \"301\",\n            children: \"Over \\xA3300\"\n          }), /*#__PURE__*/_jsx(\"option\", {\n            value: \"351\",\n            children: \"Over \\xA3350\"\n          }), /*#__PURE__*/_jsx(\"option\", {\n            value: \"401\",\n            children: \"Over \\xA3400\"\n          }), /*#__PURE__*/_jsx(\"option\", {\n            value: \"451\",\n            children: \"Over \\xA3450\"\n          }), /*#__PURE__*/_jsx(\"option\", {\n            value: \"501\",\n            children: \"Over \\xA3500\"\n          }), /*#__PURE__*/_jsx(\"option\", {\n            value: \"601\",\n            children: \"Over \\xA3600\"\n          }), /*#__PURE__*/_jsx(\"option\", {\n            value: \"701\",\n            children: \"Over \\xA3700\"\n          }), /*#__PURE__*/_jsx(\"option\", {\n            value: \"801\",\n            children: \"Over \\xA3800\"\n          }), /*#__PURE__*/_jsx(\"option\", {\n            value: \"901\",\n            children: \"Over \\xA3900\"\n          }), /*#__PURE__*/_jsx(\"option\", {\n            value: \"1001\",\n            children: \"Over \\xA31000\"\n          })]\n        }), /*#__PURE__*/_jsx(\"label\", {\n          htmlFor: \"max-budget\",\n          children: \"Max Budget\"\n        }), /*#__PURE__*/_jsxs(\"select\", {\n          id: \"max-budget\",\n          value: maxBudget,\n          onChange: evt => handleMaxClick(evt),\n          children: [/*#__PURE__*/_jsx(\"option\", {\n            value: \"1000000\",\n            children: \"Any\"\n          }), /*#__PURE__*/_jsx(\"option\", {\n            value: \"150\",\n            children: \"Up To \\xA3150\"\n          }), /*#__PURE__*/_jsx(\"option\", {\n            value: \"200\",\n            children: \"Up To \\xA3200\"\n          }), /*#__PURE__*/_jsx(\"option\", {\n            value: \"250\",\n            children: \"Up To \\xA3250\"\n          }), /*#__PURE__*/_jsx(\"option\", {\n            value: \"300\",\n            children: \"Up To \\xA3300\"\n          }), /*#__PURE__*/_jsx(\"option\", {\n            value: \"350\",\n            children: \"Up To \\xA3350\"\n          }), /*#__PURE__*/_jsx(\"option\", {\n            value: \"400\",\n            children: \"Up To \\xA3400\"\n          }), /*#__PURE__*/_jsx(\"option\", {\n            value: \"450\",\n            children: \"Up To \\xA3450\"\n          }), /*#__PURE__*/_jsx(\"option\", {\n            value: \"500\",\n            children: \"Up To \\xA3500\"\n          }), /*#__PURE__*/_jsx(\"option\", {\n            value: \"600\",\n            children: \"Up To \\xA3600\"\n          }), /*#__PURE__*/_jsx(\"option\", {\n            value: \"700\",\n            children: \"Up To \\xA3700\"\n          }), /*#__PURE__*/_jsx(\"option\", {\n            value: \"800\",\n            children: \"Up To \\xA3800\"\n          }), /*#__PURE__*/_jsx(\"option\", {\n            value: \"900\",\n            children: \"Up To \\xA3900\"\n          }), /*#__PURE__*/_jsx(\"option\", {\n            value: \"1000\",\n            children: \"Up To \\xA31000\"\n          }), /*#__PURE__*/_jsx(\"option\", {\n            value: \"10000001\",\n            children: \"Over \\xA31000\"\n          })]\n        })]\n      }), /*#__PURE__*/_jsxs(\"div\", {\n        className: style['doofinder-block__row'],\n        children: [/*#__PURE__*/_jsx(\"label\", {\n          htmlFor: \"make\",\n          children: \"Make\"\n        }), /*#__PURE__*/_jsxs(\"select\", {\n          id: \"make\",\n          value: manfacturer,\n          onChange: evt => handleMakeClick(evt),\n          children: [/*#__PURE__*/_jsx(\"option\", {\n            value: \"\",\n            children: \"Any\"\n          }), makeList.map(manufacturer => /*#__PURE__*/_jsx(\"option\", {\n            value: manufacturer.text,\n            children: manufacturer.text\n          }, manufacturer.id))]\n        }), /*#__PURE__*/_jsx(\"label\", {\n          htmlFor: \"model\",\n          children: \"Model\"\n        }), /*#__PURE__*/_jsxs(\"select\", {\n          id: \"model\",\n          value: model,\n          onChange: evt => handleModelClick(evt, manfacturer),\n          children: [/*#__PURE__*/_jsx(\"option\", {\n            value: \"\",\n            children: \"Any\"\n          }), modelList.map(model => /*#__PURE__*/_jsx(\"option\", {\n            value: model.text,\n            children: model.text\n          }, model.id))]\n        })]\n      })]\n    }), /*#__PURE__*/_jsx(\"div\", {\n      className: style['doofinder-block__input'],\n      children: /*#__PURE__*/_jsxs(\"div\", {\n        className: style['input-wrapper'],\n        children: [/*#__PURE__*/_jsx(\"div\", {\n          className: style['input-icon'],\n          children: /*#__PURE__*/_jsx(FontAwesomeIcon, {\n            width: \"16\",\n            height: \"16\",\n            icon: faSearch\n          })\n        }), /*#__PURE__*/_jsx(\"input\", {\n          type: \"search\",\n          id: \"doofinderSearch\",\n          value: query,\n          placeholder: vehiclePreference === VehicleTypes.Car ? \"e.g. BMW 3 Series\" : \"e.g. Ford Transit\",\n          onChange: evt => handleSearchKeyup(evt)\n        })]\n      })\n    })]\n  });\n};\n\nconst mapStateToProps = state => ({\n  vehiclePreference: state.vehiclePreference,\n  isInternal: state.isInternal\n});\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    dispatchvehiclePreference: data => {\n      dispatch({\n        type: \"UPDATE_VEHICLE_PREFERENCE\",\n        data: data\n      });\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DoofinderSearch);","map":null,"metadata":{},"sourceType":"module"}