{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport style from './leasebot.module.scss';\nimport { LexRuntimeService } from \"@aws-sdk/client-lex-runtime-service-browser/LexRuntimeService\";\nimport { CognitoIdentityClient } from \"@aws-sdk/client-cognito-identity\";\nimport { fromCognitoIdentityPool } from \"@aws-sdk/credential-provider-cognito-identity\";\nimport { PostTextCommand } from \"@aws-sdk/client-lex-runtime-service-browser/commands/PostTextCommand\";\n\nvar LeaseBot = /*#__PURE__*/function (_React$Component) {\n  _inherits(LeaseBot, _React$Component);\n\n  var _super = _createSuper(LeaseBot);\n\n  function LeaseBot(props) {\n    var _this;\n\n    _classCallCheck(this, LeaseBot);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"callback\", function (err, data) {\n      if (err) {\n        console.log(err, err.stack);\n\n        _this.showError('Error:  ' + err.message + ' (see console for details)');\n      }\n\n      if (data) {\n        // capture the sessionAttributes for the next cycle\n        _this.setState({\n          sessionAttributes: data.sessionAttributes\n        }); //sessionAttributes = data.sessionAttributes;\n        // show response and/or error/dialog status\n\n\n        _this.showResponse(data);\n      }\n\n      var inputFieldText = document.getElementById('inputField'); // re-enable input\n\n      inputFieldText.value = '';\n      inputFieldText.locked = false;\n    });\n\n    _this.state = {\n      data: '',\n      lexUserId: 'chatbot' + Date.now(),\n      sessionAttributes: {}\n    };\n    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(LeaseBot, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      document.getElementById(\"inputField\").focus();\n      this.lexRuntimeService = new LexRuntimeService({\n        region: \"eu-west-1\",\n        IdentityPoolId: this.props.IdentityPoolId,\n        credentials: fromCognitoIdentityPool({\n          client: new CognitoIdentityClient({\n            region: \"eu-west-1\"\n          }),\n          identityPoolId: this.props.IdentityPoolId // IDENTITY_POOL_ID\n\n        })\n      });\n      var params = {\n        botAlias: 'LeaseBot',\n        botName: this.props.botName,\n        inputText: 'Hi',\n        userId: this.state.lexUserId,\n        sessionAttributes: this.state.sessionAttributes\n      };\n      var postTextRequest = new PostTextCommand(params);\n      this.lexRuntimeService.send(postTextRequest, function (err, data) {\n        _this2.callback(err, data);\n      }); // this.lexruntime.postText(params, this.callback);\n    }\n  }, {\n    key: \"pushChat\",\n    value: function pushChat(event) {\n      var _this3 = this;\n\n      event.preventDefault();\n      var inputFieldText = document.getElementById('inputField');\n\n      if (inputFieldText && inputFieldText.value && inputFieldText.value.trim().length > 0) {\n        // disable input to show we're sending it\n        var inputField = inputFieldText.value.trim();\n        inputFieldText.value = '...';\n        inputFieldText.locked = true; // send it to the Lex runtime\n\n        var params = {\n          botAlias: 'LeaseBot',\n          botName: this.props.botName,\n          inputText: inputField,\n          userId: this.state.lexUserId,\n          sessionAttributes: this.state.sessionAttributes\n        };\n        this.showRequest(inputField);\n        var postTextRequest = new PostTextCommand(params);\n        this.lexRuntimeService.send(postTextRequest, function (err, data) {\n          _this3.callback(err, data);\n        });\n      } // we always cancel form submission\n\n\n      return false;\n    }\n  }, {\n    key: \"showRequest\",\n    value: function showRequest(daText) {\n      var conversationDiv = document.getElementById('conversation');\n      var requestPara = document.createElement(\"P\");\n      requestPara.className = 'userRequest';\n      requestPara.appendChild(document.createTextNode(daText));\n      conversationDiv.appendChild(requestPara);\n      conversationDiv.scrollTop = conversationDiv.scrollHeight;\n    }\n  }, {\n    key: \"showError\",\n    value: function showError(daText) {\n      var conversationDiv = document.getElementById('conversation');\n      var errorPara = document.createElement(\"P\");\n      errorPara.className = 'lexError';\n      errorPara.appendChild(document.createTextNode(daText));\n      conversationDiv.appendChild(errorPara);\n      conversationDiv.scrollTop = conversationDiv.scrollHeight;\n    }\n  }, {\n    key: \"showResponse\",\n    value: function showResponse(lexResponse) {\n      var conversationDiv = document.getElementById('conversation');\n      var responsePara = document.createElement(\"P\");\n      responsePara.className = 'lexResponse';\n\n      if (lexResponse.message) {\n        responsePara.appendChild(document.createTextNode(lexResponse.message));\n        responsePara.appendChild(document.createElement('br'));\n      }\n\n      if (lexResponse.dialogState === 'ReadyForFulfillment') {\n        responsePara.appendChild(document.createTextNode('Ready for fulfillment')); // TODO:  show slot values\n      } else {\n        responsePara.appendChild(document.createTextNode(''));\n      }\n\n      conversationDiv.appendChild(responsePara);\n      conversationDiv.scrollTop = conversationDiv.scrollHeight;\n    }\n  }, {\n    key: \"handleChange\",\n    value: function handleChange(event) {\n      event.preventDefault();\n      this.setState({\n        data: event.target.value\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var inputStyle = {\n        padding: '4px',\n        fontSize: 24,\n        width: '388px',\n        height: '40px',\n        borderRadius: '1px',\n        border: '10px'\n      };\n      var conversationStyle = {\n        width: '400px',\n        height: this.props.height,\n        border: 'px solid #ccc',\n        backgroundColor: this.props.backgroundColor,\n        padding: '4px',\n        overflow: 'scroll',\n        borderBottom: 'thin ridge #bfbfbf'\n      };\n      var chatcontainerStyle = {\n        backgroundColor: '#FFFFFF',\n        width: 408\n      };\n      var chatFormStyle = {\n        margin: '1px',\n        padding: '2px'\n      };\n      return /*#__PURE__*/_jsx(_Fragment, {\n        children: /*#__PURE__*/_jsxs(\"div\", {\n          id: \"chatcontainer\",\n          className: \"\".concat(style['chatcontainer'], \" \").concat(style[this.props.visible]),\n          style: chatcontainerStyle,\n          children: [/*#__PURE__*/_jsxs(\"div\", {\n            id: \"chatheader\",\n            className: style['chatheader'],\n            children: [/*#__PURE__*/_jsx(\"img\", {\n              className: \"lazyload\",\n              alt: \"Leasing Options Leasebot will help you find the best deals 24/7!\",\n              width: \"50\",\n              height: \"50\",\n              \"data-src\": \"\".concat(process.env.NEXT_PUBLIC_CDN, \"/website/static/leasebot.png\")\n            }), /*#__PURE__*/_jsx(\"span\", {\n              children: \"LeaseBot\"\n            })]\n          }), /*#__PURE__*/_jsx(\"div\", {\n            id: \"conversation\",\n            className: style['conversation'],\n            style: conversationStyle\n          }), /*#__PURE__*/_jsx(\"form\", {\n            id: \"chatform\",\n            className: style['chatform'],\n            style: chatFormStyle,\n            onSubmit: this.pushChat.bind(this),\n            children: /*#__PURE__*/_jsx(\"input\", {\n              type: \"text\",\n              id: \"inputField\",\n              size: \"40\",\n              value: this.state.data,\n              placeholder: this.props.placeholder,\n              onChange: this.handleChange.bind(this),\n              style: inputStyle\n            })\n          })]\n        })\n      });\n    }\n  }]);\n\n  return LeaseBot;\n}(React.Component);\n\nexport default LeaseBot;","map":null,"metadata":{},"sourceType":"module"}