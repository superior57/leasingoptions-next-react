{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport _defineProperty from \"E:/current_project/PPH/tfs/Website/website/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect } from 'react';\nimport { Tabs, Tab } from 'react-bootstrap';\nimport VehicleOptionsTabContent from '../vehicle-options-tab-content';\nimport _ from 'underscore';\nimport { VehicleExtraOptionsHelper } from '../_libs/helpers/VehicleExtraOptionsHelper';\nimport { getVehicleMonthlyPrice } from 'helpers/vehiclePricingHelper';\nimport { GetTechOptions, GetSpecOptions, GetExtraOptions } from 'business-logic/vehicleService';\n\nvar VehicleOptionsTabs = function VehicleOptionsTabs(_ref) {\n  var vehicleType = _ref.vehicleType,\n      capId = _ref.capId,\n      options = _ref.options,\n      settings = _ref.settings;\n  var visibleItems = settings.visibleItems && settings.visibleItems.length > 0 ? settings.visibleItems : [\"technical\", \"equipment\", \"extras\"];\n\n  var _useState = useState('technical'),\n      key = _useState[0],\n      setKey = _useState[1];\n\n  var _useState2 = useState([{\n    id: \"technical\",\n    title: \"Technical\",\n    data: null,\n    isDataLoading: false\n  }, {\n    id: \"equipment\",\n    title: \"Equipment\",\n    data: null,\n    isDataLoading: false\n  }, {\n    id: \"extras\",\n    title: \"Add Extras\",\n    data: null,\n    isDataLoading: false\n  }]),\n      keyOptions = _useState2[0],\n      setKeyOptions = _useState2[1];\n\n  useEffect(function () {\n    //maybe load extras only if initial custom options state has selected extra options?\n    if (visibleItems.includes(\"extras\")) {\n      loadOptions(\"extras\");\n    }\n  }, []);\n  useEffect(function () {\n    var optionsType = key;\n    loadOptions(optionsType);\n  }, [key]);\n\n  var updateKeyOptionsItem = function updateKeyOptionsItem(id, data, isDataLoading) {\n    if (id) {\n      setKeyOptions(function (prevState) {\n        var newKeyOptions = prevState.map(function (item) {\n          if (item.id === id) {\n            var updatedItem = _objectSpread(_objectSpread({}, item), {}, {\n              data: data && Array.isArray(data) ? data : null,\n              isDataLoading: isDataLoading\n            });\n\n            return updatedItem;\n          }\n\n          return item;\n        });\n        return newKeyOptions;\n      });\n    }\n  };\n\n  var loadOptions = function loadOptions(optionsType) {\n    var keyOptionsItem = keyOptions.find(function (item) {\n      return item.id === optionsType;\n    });\n\n    if (keyOptionsItem) {\n      if (!keyOptionsItem.data && !keyOptionsItem.isDataLoading) {\n        var dataLoadMethod = null;\n\n        switch (optionsType) {\n          case \"technical\":\n            dataLoadMethod = GetTechOptions;\n            break;\n\n          case \"equipment\":\n            dataLoadMethod = GetSpecOptions;\n            break;\n\n          case \"extras\":\n            dataLoadMethod = GetExtraOptions;\n            break;\n        }\n\n        if (dataLoadMethod) {\n          updateKeyOptionsItem(keyOptionsItem.id, keyOptionsItem.data, true);\n          dataLoadMethod(vehicleType, capId).then(function (result) {\n            var originalData = null;\n            var data = null;\n\n            if (result.isSucceed && result.data) {\n              originalData = result.data;\n\n              if (keyOptionsItem.id === \"technical\") {\n                data = originalData;\n              } else if (keyOptionsItem.id === \"equipment\" && Array.isArray(originalData)) {\n                data = originalData.map(function (x) {\n                  return {\n                    name: x.name,\n                    options: x.options.map(function (x) {\n                      return {\n                        name: x\n                      };\n                    })\n                  };\n                });\n              } else if (keyOptionsItem.id === \"extras\") {\n                data = originalData.options;\n              }\n            }\n\n            updateKeyOptionsItem(keyOptionsItem.id, data, false);\n\n            if (settings.onOptionsDataLoaded) {\n              settings.onOptionsDataLoaded(keyOptionsItem.id, originalData);\n            }\n          });\n        }\n      }\n    }\n  };\n\n  var getOptionsToDisplay = function getOptionsToDisplay(type, data) {\n    if (type === \"extras\" && data && options) {\n      var customOptions = options;\n      return data.map(function (categoryItem) {\n        var resultCategory = {\n          code: categoryItem.code,\n          name: categoryItem.name,\n          options: categoryItem.options.map(function (optionItem) {\n            var resultOption = {\n              code: optionItem.code,\n              name: optionItem.name,\n              price: getVehicleMonthlyPrice(customOptions.leasingDealType, optionItem.price, customOptions.term, customOptions.initialRentalMonths),\n              isSelected: customOptions.options.includes(optionItem.code)\n            };\n            resultOption.price = VehicleExtraOptionsHelper.getOptionPrice({\n              id: resultOption.code,\n              price: resultOption.price,\n              name: \"\",\n              linkedRelationshipIds: []\n            }, customOptions.optionsStates);\n            return resultOption;\n          }),\n          isSelected: false\n        };\n        resultCategory.isSelected = _.some(resultCategory.options || [], function (item) {\n          return item.isSelected;\n        });\n        return resultCategory;\n      });\n    }\n\n    return data;\n  };\n\n  var getVisibleTabs = function getVisibleTabs() {\n    var result = keyOptions.filter(function (item) {\n      return visibleItems.includes(item.id);\n    });\n    return result || [];\n  };\n\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(\"h2\", {\n      className: \"h1 mb-5\",\n      children: \"Technical specification and additional options\"\n    }), /*#__PURE__*/_jsx(\"div\", {\n      className: \"option-tabs\",\n      children: /*#__PURE__*/_jsx(Tabs, {\n        id: \"options-tabs\",\n        defaultActiveKey: \"technical\",\n        onSelect: function onSelect(k) {\n          return setKey(k);\n        },\n        children: getVisibleTabs().map(function (item) {\n          return /*#__PURE__*/_jsx(Tab, {\n            eventKey: item.id,\n            title: item.title,\n            children: /*#__PURE__*/_jsx(VehicleOptionsTabContent, {\n              type: item.id,\n              data: getOptionsToDisplay(item.id, item.data),\n              isLoading: item.isDataLoading,\n              settings: {\n                searchAllowed: settings.searchAllowed,\n                optionsSelectAllowed: settings.optionsSelectAllowed,\n                onOptionClick: settings.onOptionClick\n              }\n            })\n          }, item.id);\n        })\n      })\n    })]\n  });\n};\n\nexport default VehicleOptionsTabs;","map":null,"metadata":{},"sourceType":"module"}