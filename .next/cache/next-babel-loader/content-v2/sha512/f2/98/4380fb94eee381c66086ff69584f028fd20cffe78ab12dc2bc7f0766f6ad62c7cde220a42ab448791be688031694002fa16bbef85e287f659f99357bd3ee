{"ast":null,"code":"import { dispatchUpdateDealToggle, dispatchUpdateUserPostcode } from 'redux/dispatches/dispatchs';\nimport { PricingTypes } from 'enums/PricingTypes';\nimport { LeasingDealTypes } from 'enums/LeasingDealTypes';\nimport { VehicleTypes } from 'enums/VehicleTypes';\nimport { VehiclePageTitle, VehicleMetaDescription } from \"helpers/seoHelper\";\nimport { GetCanonicalUrl } from 'helpers/urlHelper';\nimport { getBaseUrl, getFriendlyUrlSegment } from 'helpers/urlsHelper';\nimport { getLOSSRFetchHeaders } from 'helpers/apiHelper';\nimport { GetVehicleInfo } from 'business-logic/vehicleService';\nexport const getProps = async context => {\n  dispatchUpdateDealToggle(context);\n  dispatchUpdateUserPostcode(context);\n  const pricingType = PricingTypes.Atc;\n  const userPostcode = context.store.getState().userPostcode;\n  const leasingDealType = context.store.getState().dealSelector;\n  const vehicleRef = context.query.vehicleRef;\n  const isInternal = context.req.url.startsWith(\"/internal/\");\n  const vehicle = (await GetVehicleInfo(vehicleRef, pricingType, userPostcode, true, true, getLOSSRFetchHeaders(context))).data;\n\n  if (leasingDealType == LeasingDealTypes.None || ![LeasingDealTypes.Business, LeasingDealTypes.Personal].includes(leasingDealType) || vehicle === null || vehicle.vehicleType !== VehicleTypes.Car || vehicle.manufacturerUrl.toLowerCase() !== context.query.make.toLowerCase() || vehicle.shortModTextUrl.toLowerCase() !== context.query.shortModel.toLowerCase() || vehicle.modelUrl.toLowerCase() !== context.query.model.toLowerCase() || vehicle.derivativeUrl.toLowerCase() !== context.query.derivative.toLowerCase()) {\n    context.res.writeHead(302, {\n      Location: '/car-leasing-with-insurance/' + getFriendlyUrlSegment(userPostcode) + '/' + context.query.make.toLowerCase()\n    });\n    context.res.end();\n  }\n\n  let vehicleModel = {\n    vehicleRef: vehicle.vehicleRef,\n    capId: vehicle.capId,\n    vehicleType: vehicle.vehicleType,\n    make: vehicle.manufacturer.trim(),\n    shortModel: vehicle.shortModText.trim(),\n    model: vehicle.model.trim(),\n    derivative: vehicle.derivative.trim(),\n    imageUrl: vehicle.imageUrl,\n    imageUrls: vehicle.imageUrls,\n    interiorUrl: vehicle.interiorUrl,\n    exteriorUrl: vehicle.exteriorUrl,\n    fuelType: vehicle.fuelType,\n    mpg: vehicle.mpg,\n    speed60mph: vehicle.speed60mph,\n    insuranceGroup: vehicle.insuranceGroup,\n    co2: vehicle.cO2,\n    range: vehicle.range,\n    seats: vehicle.seats,\n    doors: vehicle.doors,\n    transmission: vehicle.transmission,\n    features: vehicle.features,\n    stickers: vehicle.stickers,\n    minPrice: vehicle.minPrice,\n    maxPrice: vehicle.maxPrice,\n    optionsSelectAllowed: vehicle.optionsIsSelectable,\n    availableMileages: vehicle.availableMileages,\n    hasMaintenance: vehicle.hasMaintenance\n  };\n\n  if (isInternal) {\n    vehicleModel.extraDetails = vehicle.internalDetails;\n  }\n\n  let metaData = {\n    title: VehiclePageTitle(vehicleModel.vehicleType, vehicleModel.make, vehicleModel.model, vehicleModel.derivative),\n    description: VehicleMetaDescription(vehicleModel.vehicleType, vehicleModel.make, vehicleModel.shortModel, vehicleModel.derivative),\n    imageUrl: vehicleModel.imageUrls && vehicleModel.imageUrls.length > 0 ? vehicleModel.imageUrls[0] : null,\n    canonicalUrl: GetCanonicalUrl(getBaseUrl(context.req.url)),\n    noIndex: true\n  };\n  return {\n    props: {\n      pricingType: pricingType,\n      userPostcode: userPostcode,\n      vehicle: vehicleModel,\n      metaData: metaData\n    }\n  };\n};","map":null,"metadata":{},"sourceType":"module"}