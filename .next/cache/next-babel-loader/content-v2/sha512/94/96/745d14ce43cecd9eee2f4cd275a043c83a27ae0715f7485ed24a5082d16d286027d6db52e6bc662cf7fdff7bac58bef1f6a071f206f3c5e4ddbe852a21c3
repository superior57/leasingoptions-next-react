{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { useEffect, useState } from 'react';\nimport { useFormContext, Controller } from \"react-hook-form\";\nimport moment from 'moment';\nimport { getFieldName, getFieldId, getFieldError } from 'helpers/fieldArrayHelper';\nimport '../../../node_modules/react-datepicker/dist/react-datepicker.min.css';\nimport DatePicker from \"react-datepicker\";\nimport AddressInput from '../address/address-input';\nimport { IsDateInPresentOrPast } from 'helpers/validation';\n\nconst EmploymentInput = ({\n  formData,\n  index,\n  collectionName,\n  onTimePeriodUpdate,\n  notificationsSubscribe,\n  initialPreviousDate,\n  showYourPosition,\n  showLandLine\n}) => {\n  var _fieldError, _fieldError2;\n\n  const {\n    control,\n    setValue,\n    register,\n    errors\n  } = useFormContext();\n  const {\n    0: isEmployed,\n    1: setIsEmployed\n  } = useState(false);\n  const {\n    0: startDate,\n    1: setStartDate\n  } = useState(formData.startDate || null);\n  const {\n    0: previousDate,\n    1: setPreviousDate\n  } = useState(initialPreviousDate);\n  useEffect(() => {\n    if (formData.typeId) {\n      handleEmploymentTypeChange(formData.typeId);\n    }\n\n    if (notificationsSubscribe) {\n      notificationsSubscribe(handleNotifications, index);\n    }\n  }, []);\n  useEffect(() => {\n    calculateTotalMonths(previousDate, startDate);\n  }, [startDate, previousDate]);\n\n  const fieldName = name => {\n    return getFieldName(name, collectionName, index);\n  }; //Used to avoid warning for non unique IDs\n\n\n  const fieldId = name => {\n    return getFieldId(name, collectionName, index);\n  };\n\n  const fieldError = name => {\n    return getFieldError(name, collectionName, index, errors);\n  }; //fromDate - is a previous or current date\n  //toDate - is selected date (startDate)\n\n\n  const calculateTotalMonths = (fromDate, toDate) => {\n    if (toDate) {\n      const dateStart = moment(fromDate || Date.now()).startOf('day');\n      const dateEnd = moment(toDate).endOf('day');\n\n      if (!dateStart.isBefore(dateEnd)) {\n        const monthsDelta = dateStart.diff(dateEnd, \"months\");\n        const years = Math.floor(monthsDelta / 12);\n        const months = monthsDelta % 12;\n        const totalMonthsEmployed = (years !== null && years !== void 0 ? years : 0) * 12 + (months !== null && months !== void 0 ? months : 0);\n        setValue(fieldName(\"timeEmployedYears\"), years);\n        setValue(fieldName(\"timeEmployedMonths\"), months);\n      } else {\n        setValue(fieldName(\"timeEmployedYears\"), 0);\n        setValue(fieldName(\"timeEmployedMonths\"), 0);\n      }\n    }\n  };\n\n  const handleStartDateChanges = date => {\n    setStartDate(date);\n\n    if (onTimePeriodUpdate && date) {\n      onTimePeriodUpdate(date);\n    }\n  };\n\n  const handleEmploymentTypeChange = typeId => {\n    switch (typeId) {\n      case \"\":\n      case \"4\":\n      case \"6\":\n      case \"7\":\n        setIsEmployed(false);\n        break;\n\n      default:\n        setIsEmployed(true);\n        break;\n    }\n  };\n\n  const handleNotifications = (type, data) => {\n    if (type === \"previous-date\" && data) {\n      setPreviousDate(data);\n    }\n  };\n\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(\"div\", {\n      className: \"form-row mb-3\",\n      children: /*#__PURE__*/_jsxs(\"div\", {\n        className: \"col-24 col-md-12 col-lg-6\",\n        children: [/*#__PURE__*/_jsxs(\"label\", {\n          htmlFor: fieldId(\"typeId\"),\n          children: [\"Type of Employment \", /*#__PURE__*/_jsx(\"small\", {\n            children: \"(Required)\"\n          })]\n        }), /*#__PURE__*/_jsxs(\"select\", {\n          className: `form-control ${fieldError(\"typeId\") ? \"is-invalid\" : \"\"}`,\n          id: fieldId(\"typeId\"),\n          name: fieldName(\"typeId\"),\n          ref: register({\n            required: true\n          }),\n          defaultValue: formData.typeId,\n          onChange: evt => {\n            handleEmploymentTypeChange(evt.target.value);\n          },\n          children: [/*#__PURE__*/_jsx(\"option\", {\n            value: \"\",\n            children: \"Please select...\"\n          }), /*#__PURE__*/_jsx(\"option\", {\n            value: \"1\",\n            children: \"Employed Full Time\"\n          }), /*#__PURE__*/_jsx(\"option\", {\n            value: \"2\",\n            children: \"Employed Part Time\"\n          }), /*#__PURE__*/_jsx(\"option\", {\n            value: \"3\",\n            children: \"Employed Temp\"\n          }), /*#__PURE__*/_jsx(\"option\", {\n            value: \"4\",\n            children: \"Retired\"\n          }), /*#__PURE__*/_jsx(\"option\", {\n            value: \"5\",\n            children: \"Home Maker\"\n          }), /*#__PURE__*/_jsx(\"option\", {\n            value: \"6\",\n            children: \"Student\"\n          }), /*#__PURE__*/_jsx(\"option\", {\n            value: \"7\",\n            children: \"Unemployed\"\n          }), /*#__PURE__*/_jsx(\"option\", {\n            value: \"8\",\n            children: \"Self-employed\"\n          })]\n        }), fieldError(\"typeId\") && /*#__PURE__*/_jsx(\"span\", {\n          className: \"invalid-feedback d-block\",\n          children: \"This field is required\"\n        })]\n      })\n    }), isEmployed && /*#__PURE__*/_jsxs(_Fragment, {\n      children: [/*#__PURE__*/_jsx(\"div\", {\n        className: \"form-row mb-3\",\n        children: /*#__PURE__*/_jsxs(\"div\", {\n          className: \"col-24 col-md-12\",\n          children: [/*#__PURE__*/_jsxs(\"label\", {\n            htmlFor: fieldId(\"employerName\"),\n            children: [\"Employer Name \", /*#__PURE__*/_jsx(\"small\", {\n              children: \"(Required)\"\n            })]\n          }), /*#__PURE__*/_jsx(\"input\", {\n            type: \"text\",\n            className: `form-control ${fieldError(\"employerName\") ? \"is-invalid\" : \"\"}`,\n            id: fieldId(\"employerName\"),\n            name: fieldName(\"employerName\"),\n            \"aria-describedby\": fieldId(\"employerName\"),\n            placeholder: \"Employer Name\",\n            maxLength: 100,\n            ref: register({\n              required: true\n            }),\n            defaultValue: formData.employerName\n          }), fieldError(\"employerName\") && /*#__PURE__*/_jsx(\"span\", {\n            className: \"invalid-feedback d-block\",\n            children: \"This field is required\"\n          })]\n        })\n      }), /*#__PURE__*/_jsx(\"div\", {\n        className: \"form-row mb-3\",\n        children: /*#__PURE__*/_jsxs(\"div\", {\n          className: \"col-24 col-md-12\",\n          children: [/*#__PURE__*/_jsxs(\"label\", {\n            htmlFor: fieldId(\"natureOfBusiness\"),\n            children: [\"Nature of Business \", /*#__PURE__*/_jsx(\"small\", {\n              children: \"(Required)\"\n            })]\n          }), /*#__PURE__*/_jsx(\"input\", {\n            type: \"text\",\n            className: `form-control ${fieldError(\"natureOfBusiness\") ? \"is-invalid\" : \"\"}`,\n            id: fieldId(\"natureOfBusiness\"),\n            name: fieldName(\"natureOfBusiness\"),\n            \"aria-describedby\": fieldId(\"natureOfBusiness\"),\n            placeholder: \"Nature of Business\",\n            maxLength: 100,\n            ref: register({\n              required: true\n            }),\n            defaultValue: formData.natureOfBusiness\n          }), fieldError(\"natureOfBusiness\") && /*#__PURE__*/_jsx(\"span\", {\n            className: \"invalid-feedback d-block\",\n            children: \"This field is required\"\n          })]\n        })\n      }), showYourPosition && /*#__PURE__*/_jsx(\"div\", {\n        className: \"form-row mb-3\",\n        children: /*#__PURE__*/_jsxs(\"div\", {\n          className: \"col-24 col-md-12\",\n          children: [/*#__PURE__*/_jsxs(\"label\", {\n            htmlFor: fieldId(\"position\"),\n            children: [\"Your Position \", /*#__PURE__*/_jsx(\"small\", {\n              children: \"(Required)\"\n            })]\n          }), /*#__PURE__*/_jsx(\"input\", {\n            type: \"text\",\n            className: `form-control ${fieldError(\"position\") ? \"is-invalid\" : \"\"}`,\n            id: fieldId(\"position\"),\n            name: fieldName(\"position\"),\n            \"aria-describedby\": fieldId(\"position\"),\n            placeholder: \"Job Title\",\n            maxLength: 100,\n            ref: register({\n              required: true\n            }),\n            defaultValue: formData.position\n          }), fieldError(\"position\") && /*#__PURE__*/_jsx(\"span\", {\n            className: \"invalid-feedback d-block\",\n            children: \"This field is required\"\n          })]\n        })\n      }), showLandLine && /*#__PURE__*/_jsx(\"div\", {\n        className: \"form-row mb-3\",\n        children: /*#__PURE__*/_jsxs(\"div\", {\n          className: \"col-24 col-md-12\",\n          children: [/*#__PURE__*/_jsxs(\"label\", {\n            htmlFor: fieldId(\"telephone\"),\n            children: [\"Landline Telephone \", /*#__PURE__*/_jsx(\"small\", {\n              children: \"(Required)\"\n            })]\n          }), /*#__PURE__*/_jsx(\"input\", {\n            type: \"tel\",\n            className: `form-control ${fieldError(\"telephone\") ? \"is-invalid\" : \"\"}`,\n            id: fieldId(\"telephone\"),\n            name: fieldName(\"telephone\"),\n            \"aria-describedby\": fieldId(\"telephone\"),\n            placeholder: \"Your Employers No.\",\n            maxLength: 20,\n            ref: register({\n              required: true,\n              pattern: /^[0-9]*$/\n            }),\n            defaultValue: formData.telephone\n          }), fieldError(\"telephone\") && /*#__PURE__*/_jsx(\"span\", {\n            className: \"invalid-feedback d-block\",\n            children: \"This field is required\"\n          })]\n        })\n      }), /*#__PURE__*/_jsx(\"h3\", {\n        className: \"mt-5\",\n        children: \"Address\"\n      }), /*#__PURE__*/_jsx(AddressInput, {\n        excludeTownAndCounty: true,\n        collectionName: collectionName,\n        index: index,\n        formData: formData\n      }), /*#__PURE__*/_jsx(\"hr\", {\n        className: \"mb-3\"\n      }), /*#__PURE__*/_jsxs(\"div\", {\n        className: \"form-row mb-3\",\n        children: [/*#__PURE__*/_jsxs(\"div\", {\n          className: \"col-24 col-md-12\",\n          children: [/*#__PURE__*/_jsx(\"div\", {\n            className: \"form-row\",\n            children: /*#__PURE__*/_jsx(\"div\", {\n              className: \"col-24\",\n              children: /*#__PURE__*/_jsxs(\"label\", {\n                htmlFor: \"startDate\",\n                children: [\"Start Date \", /*#__PURE__*/_jsx(\"small\", {\n                  children: \"(Required)\"\n                })]\n              })\n            })\n          }), /*#__PURE__*/_jsx(\"div\", {\n            className: \"form-row mb-3\",\n            children: /*#__PURE__*/_jsxs(\"div\", {\n              className: \"col-24\",\n              children: [/*#__PURE__*/_jsx(Controller, {\n                as: DatePicker,\n                control: control,\n                onChange: ([selected]) => {\n                  handleStartDateChanges(selected);\n                  return selected;\n                },\n                valueName: \"selected\",\n                name: fieldName(\"startDate\"),\n                className: `form-control ${fieldError(\"startDate\") ? \"is-invalid\" : \"\"}`,\n                dateFormat: \"dd/MM/yyyy\",\n                placeholderText: \"From Date\",\n                defaultValue: formData.startDate,\n                rules: {\n                  required: true,\n                  validate: IsDateInPresentOrPast\n                },\n                showMonthDropdown: true,\n                useShortMonthInDropdown: true,\n                showYearDropdown: true\n              }), ((_fieldError = fieldError(\"startDate\")) === null || _fieldError === void 0 ? void 0 : _fieldError.type) === \"required\" && /*#__PURE__*/_jsx(\"span\", {\n                className: \"invalid-feedback d-block\",\n                children: \"This field is required\"\n              }), ((_fieldError2 = fieldError(\"startDate\")) === null || _fieldError2 === void 0 ? void 0 : _fieldError2.type) === \"validate\" && /*#__PURE__*/_jsx(\"span\", {\n                className: \"invalid-feedback d-block\",\n                children: \"Date can't be in the future\"\n              })]\n            })\n          })]\n        }), /*#__PURE__*/_jsxs(\"div\", {\n          className: \"col-24 col-md-12\",\n          children: [/*#__PURE__*/_jsx(\"div\", {\n            className: \"form-row\",\n            children: /*#__PURE__*/_jsx(\"div\", {\n              className: \"col-24\",\n              children: /*#__PURE__*/_jsxs(\"label\", {\n                children: [\"Years & months Employed \", /*#__PURE__*/_jsx(\"small\", {\n                  children: \"(Required)\"\n                })]\n              })\n            })\n          }), /*#__PURE__*/_jsxs(\"div\", {\n            className: \"form-row mb-3\",\n            children: [/*#__PURE__*/_jsxs(\"div\", {\n              className: \"col-24 col-md-12\",\n              children: [/*#__PURE__*/_jsx(\"input\", {\n                type: \"text\",\n                disabled: true,\n                className: `form-control ${fieldError(\"timeEmployedYears\") ? \"is-invalid\" : \"\"}`,\n                name: fieldName(\"timeEmployedYears\"),\n                placeholder: \"Years\",\n                maxLength: 2,\n                ref: register({\n                  required: true\n                }),\n                defaultValue: formData.timeEmployedYears\n              }), fieldError(\"timeEmployedYears\") && /*#__PURE__*/_jsx(\"span\", {\n                className: \"invalid-feedback d-block\",\n                children: \"This field is required\"\n              })]\n            }), /*#__PURE__*/_jsxs(\"div\", {\n              className: \"col-24 col-md-12\",\n              children: [/*#__PURE__*/_jsx(\"input\", {\n                type: \"text\",\n                disabled: true,\n                className: `form-control ${fieldError(\"timeEmployedMonths\") ? \"is-invalid\" : \"\"}`,\n                name: fieldName(\"timeEmployedMonths\"),\n                placeholder: \"Months\",\n                maxLength: 2,\n                ref: register({\n                  required: true\n                }),\n                defaultValue: formData.timeEmployedMonths\n              }), fieldError(\"timeEmployedMonths\") && /*#__PURE__*/_jsx(\"span\", {\n                className: \"invalid-feedback d-block\",\n                children: \"This field is required\"\n              })]\n            })]\n          })]\n        })]\n      })]\n    })]\n  });\n};\n\nexport default EmploymentInput;","map":null,"metadata":{},"sourceType":"module"}