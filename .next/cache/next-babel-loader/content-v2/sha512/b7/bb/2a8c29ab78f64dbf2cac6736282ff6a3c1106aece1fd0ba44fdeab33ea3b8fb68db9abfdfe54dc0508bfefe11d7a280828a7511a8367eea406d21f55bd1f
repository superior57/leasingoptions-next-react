{"ast":null,"code":"import { VehicleStorageTypes } from \"enums/VehicleStorageTypes\";\nimport { isNullOrWhiteSpace } from \"helpers/stringHelper\";\nimport { isNullOrEmpty } from \"helpers/helpers\";\nexport class VehiclesStorageProvider {\n  static getTriggerMaxSize(storageType) {\n    switch (storageType) {\n      case VehicleStorageTypes.History:\n        return 4;\n\n      default:\n        return null;\n    }\n  }\n\n  static getStorageMaxSize(storageType) {\n    switch (storageType) {\n      case VehicleStorageTypes.Garage:\n        return 4;\n\n      case VehicleStorageTypes.History:\n        return 20;\n\n      default:\n        return null;\n    }\n  }\n\n  static getStorageName(storageType) {\n    switch (storageType) {\n      case VehicleStorageTypes.Garage:\n        return \"garage\";\n\n      case VehicleStorageTypes.History:\n        return \"history\";\n\n      default:\n        return null;\n    }\n  }\n\n  static getItems(storageType) {\n    let items = null;\n    const storageName = this.getStorageName(storageType);\n\n    if (!isNullOrWhiteSpace(storageName)) {\n      items = JSON.parse(localStorage.getItem(storageName));\n    }\n\n    if (!items) {\n      items = [];\n    }\n\n    const requiredSize = this.getStorageMaxSize(storageType);\n\n    if (items.length < requiredSize) {\n      const itemsToAdd = requiredSize - items.length;\n\n      for (let i = 0; i < itemsToAdd; i++) {\n        items.push(null);\n      }\n    }\n\n    return items;\n  }\n\n  static getItem(storageType, itemId) {\n    const items = this.getItems(storageType);\n    const item = items.find(item => {\n      return item && item.id === itemId;\n    });\n    return item;\n  }\n\n  static addItem(storageType, item, index) {\n    let result = false;\n    const items = this.getItems(storageType);\n    const storageMaxSize = this.getStorageMaxSize(storageType);\n    const indexHasValue = !isNullOrEmpty(index);\n\n    if (!indexHasValue && items.length < storageMaxSize || indexHasValue && index >= 0 && index < storageMaxSize) {\n      if (indexHasValue) {\n        items[index] = item;\n      } else {\n        items.push(item);\n      }\n\n      result = this.persistItems(storageType, items);\n    }\n\n    return result;\n  }\n\n  static updateItem(storageType, item) {\n    let result = false;\n    const items = this.getItems(storageType);\n    const existingItem = items.find(existingItem => {\n      return existingItem && existingItem.id === item.id && existingItem.index === item.index;\n    });\n\n    if (existingItem) {\n      items[items.indexOf(existingItem)] = item;\n      result = this.persistItems(storageType, items);\n    }\n\n    return result;\n  }\n\n  static removeItem(storageType, itemId) {\n    let result = false;\n    const items = this.getItems(storageType);\n    const item = items.find(item => {\n      return item && item.id === itemId;\n    });\n\n    if (item) {\n      items[items.indexOf(item)] = null;\n      result = this.persistItems(storageType, items);\n    }\n\n    return result;\n  }\n\n  static clear(storageType) {\n    const storageName = this.getStorageName(storageType);\n\n    if (!isNullOrWhiteSpace(storageName)) {\n      localStorage.removeItem(storageName);\n      return true;\n    }\n\n    return false;\n  }\n\n  static persistItems(storageType, vehicleItems) {\n    const storageName = this.getStorageName(storageType);\n\n    if (!isNullOrWhiteSpace(storageName)) {\n      localStorage.setItem(storageName, JSON.stringify(vehicleItems));\n      return true;\n    }\n\n    return false;\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}