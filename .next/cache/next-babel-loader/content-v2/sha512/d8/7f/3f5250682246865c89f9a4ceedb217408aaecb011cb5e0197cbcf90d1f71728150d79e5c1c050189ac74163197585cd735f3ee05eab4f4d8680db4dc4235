{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport _ from 'underscore';\nimport { VehicleStorageTypes } from \"enums/VehicleStorageTypes\";\nimport { VehiclesStorageProvider } from \"helpers/vehiclesStorageProvider\";\nimport { isNullOrEmpty, getGUID } from \"helpers/helpers\";\nexport class HistoryStorageHelper {\n  static addItem(index, item, summary) {\n    if (item && index >= 0 && index < this.storageMaxSize) {\n      const storageItem = {\n        id: getGUID(),\n        index: index,\n        vehicle: item,\n        timeStamp: Date.now(),\n        summary: summary\n      };\n\n      if (VehiclesStorageProvider.addItem(this.storageType, storageItem, index)) {\n        return storageItem;\n      }\n    }\n\n    return null;\n  }\n\n  static updateItem(itemId, item, alwaysUpdate, summary) {\n    if (item) {\n      const storageItem = VehiclesStorageProvider.getItem(this.storageType, itemId);\n\n      if (storageItem && (alwaysUpdate || !_.isEqual(storageItem.vehicle, item))) {\n        storageItem.vehicle = item;\n        storageItem.timeStamp = Date.now();\n        storageItem.summary = summary;\n\n        if (VehiclesStorageProvider.updateItem(this.storageType, storageItem)) {\n          return storageItem;\n        }\n      }\n    }\n\n    return null;\n  }\n\n  static addOrUpdateItem(item, summary) {\n    if (item) {\n      const storageItems = this.getItems(false);\n      const storageItem = storageItems.find(storageItem => {\n        return storageItem && storageItem.vehicle && storageItem.vehicle.vehicleRef === item.vehicleRef;\n      });\n\n      if (storageItem) {\n        return this.updateItem(storageItem.id, item, true, summary);\n      } else {\n        // If full, remove the oldest entry\n        if (this.isFull()) {\n          var _orderedStorageItems$;\n\n          let orderedStorageItems = _.sortBy(storageItems, function (orderedStorageItem) {\n            return orderedStorageItem.timeStamp;\n          });\n\n          let itemId = (_orderedStorageItems$ = orderedStorageItems[0]) === null || _orderedStorageItems$ === void 0 ? void 0 : _orderedStorageItems$.index;\n          this.removeItem(itemId);\n          this.addItem(itemId, item, summary);\n        } else {\n          const index = storageItems.indexOf(null);\n\n          if (!isNullOrEmpty(index) && index >= 0 && index < this.storageMaxSize) {\n            return this.addItem(index, item, summary);\n          }\n        }\n      }\n    }\n\n    return null;\n  }\n\n  static removeItem(itemId) {\n    return VehiclesStorageProvider.removeItem(this.storageType, itemId);\n  }\n\n  static getItems(ignoreEmptyItems) {\n    let result = VehiclesStorageProvider.getItems(this.storageType);\n\n    if (result && result.length > 0 && ignoreEmptyItems) {\n      result = result.filter(item => {\n        return item;\n      });\n    }\n\n    return result;\n  }\n\n  static countItems() {\n    return this.getItems(true).length;\n  }\n\n  static isFull() {\n    return !(this.countItems() < this.storageMaxSize);\n  }\n\n  static isTriggered() {\n    return !(this.countItems() < this.triggerMaxSize);\n  }\n\n}\n\n_defineProperty(HistoryStorageHelper, \"storageType\", VehicleStorageTypes.History);\n\n_defineProperty(HistoryStorageHelper, \"storageMaxSize\", VehiclesStorageProvider.getStorageMaxSize(VehicleStorageTypes.History) || 0);\n\n_defineProperty(HistoryStorageHelper, \"triggerMaxSize\", VehiclesStorageProvider.getTriggerMaxSize(VehicleStorageTypes.History) || 0);","map":null,"metadata":{},"sourceType":"module"}