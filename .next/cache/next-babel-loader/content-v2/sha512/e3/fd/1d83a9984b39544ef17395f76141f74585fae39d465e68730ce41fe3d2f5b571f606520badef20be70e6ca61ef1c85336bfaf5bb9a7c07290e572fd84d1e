{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { logLabelEvent } from 'helpers/analytics';\nimport React from 'react';\nimport { useForm, FormContext } from \"react-hook-form\";\nimport { connect } from 'react-redux';\nimport AddressInput from './../address/address-input';\n\nconst mapStateToProps = state => {\n  return {\n    formData: state.formData,\n    stepNumber: state.stepIndicator\n  };\n};\n\nconst LimitedStepSix = props => {\n  const handleGATracking = () => logLabelEvent('prop_form_tracking_ltd', 'Click', 'bank-address-details-completed');\n\n  const prepareFormData = () => {\n    let data = props.formData[props.stepNumber];\n    const prevStepData = props.formData[props.stepNumber - 1];\n    let timestampPrev = prevStepData ? parseInt(prevStepData.timestamp || 0) : 0;\n    let timestampCurr = data ? parseInt(data.timestamp || 0) : 0;\n\n    if (timestampPrev > timestampCurr) {\n      data = _objectSpread(_objectSpread({}, data), {}, {\n        postcode: prevStepData.postcode,\n        address1: prevStepData.address1,\n        address2: prevStepData.address2,\n        address3: prevStepData.address3,\n        town: prevStepData.town,\n        county: prevStepData.county\n      });\n    }\n\n    return data;\n  };\n\n  const formData = prepareFormData();\n  const methods = useForm();\n  const {\n    register,\n    handleSubmit,\n    errors\n  } = methods;\n\n  const onSubmit = data => {\n    if (props.handleFormSave(props.stepNumber, data)) {\n      props.handleFormStep(props.stepNumber + 1);\n    }\n  };\n\n  const onBack = () => {\n    props.handleFormStep(props.stepNumber - 1);\n  };\n\n  return /*#__PURE__*/_jsxs(\"div\", {\n    className: \"w-100 bg-white p-3 p-md-5\",\n    children: [/*#__PURE__*/_jsx(\"h3\", {\n      children: \"Your Bank's Address\"\n    }), /*#__PURE__*/_jsx(FormContext, _objectSpread(_objectSpread({}, methods), {}, {\n      children: /*#__PURE__*/_jsxs(\"form\", {\n        onSubmit: handleSubmit(onSubmit),\n        children: [/*#__PURE__*/_jsx(AddressInput, {\n          excludeTownAndCounty: false,\n          formData: formData,\n          index: 0,\n          collectionName: null\n        }), /*#__PURE__*/_jsx(\"div\", {\n          className: \"form-row mb-3\",\n          children: /*#__PURE__*/_jsxs(\"div\", {\n            className: \"col-24 col-md-6\",\n            children: [/*#__PURE__*/_jsxs(\"label\", {\n              htmlFor: \"firstName\",\n              children: [\"Years with Bank  \", /*#__PURE__*/_jsx(\"small\", {\n                children: \"(Required)\"\n              })]\n            }), /*#__PURE__*/_jsx(\"input\", {\n              type: \"text\",\n              className: `form-control ${errors.bankYears ? \"is-invalid\" : \"\"}`,\n              id: \"bankYears\",\n              name: \"bankYears\",\n              \"aria-describedby\": \"bankYears\",\n              placeholder: \"Years\",\n              maxLength: 100,\n              ref: register({\n                required: true,\n                pattern: /^[0-9]*$/\n              }),\n              defaultValue: formData.bankYears\n            }), errors.bankYears && /*#__PURE__*/_jsx(\"span\", {\n              className: \"invalid-feedback d-block\",\n              children: \"This field is required\"\n            })]\n          })\n        }), /*#__PURE__*/_jsxs(\"div\", {\n          className: \"form-row d-flex justify-content-end\",\n          children: [/*#__PURE__*/_jsx(\"button\", {\n            type: \"button\",\n            className: \"btn btn-outline-secondary mr-3\",\n            onClick: onBack,\n            children: \"Back\"\n          }), /*#__PURE__*/_jsx(\"button\", {\n            type: \"submit\",\n            className: \"btn btn-primary btn-lg\",\n            onClick: () => {\n              handleGATracking();\n            },\n            children: \"Next\"\n          })]\n        })]\n      })\n    }))]\n  });\n};\n\nexport default connect(mapStateToProps)(LimitedStepSix);","map":null,"metadata":{},"sourceType":"module"}