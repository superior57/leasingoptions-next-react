{"ast":null,"code":"import { VehicleTypes } from 'enums/VehicleTypes';\nimport { CustomContentTypes } from 'enums/CustomContentTypes';\nimport { LeasingDealTypes } from 'enums/LeasingDealTypes';\nimport { getBaseUrl, getFriendlyUrlSegment } from 'helpers/urlsHelper';\nimport { ModelPageMetaTitle, ModelPageMetaDescription } from 'helpers/seoHelper';\nimport { isNullOrWhiteSpace, capitalize } from 'helpers/stringHelper';\nimport { getLOSSRFetchHeaders } from 'helpers/apiHelper';\nimport { GetCanonicalUrl } from \"helpers/urlHelper\";\nimport { GetProperManufacturerName, GetFriendlyName } from 'helpers/helpers';\nimport { getVehiclesFilter } from 'helpers/vehiclesFilterHelper';\nimport { dispatchUpdateDealToggle, dispatchUpdateUserPostcode, dispatchUpdateVehicleFilterSearch } from 'redux/dispatches/dispatchs';\nimport { ContentService } from 'business-logic/contentService';\nimport { GetModels, GetVehicleAlternativeModels, GetRecommendedForModel, GetVehiclePreviews, GetCapId, GetVehicleImage, GetModelGalleryImages, GetModelReview } from 'business-logic/vehicleService';\nexport const getProps = async context => {\n  dispatchUpdateDealToggle(context);\n  dispatchUpdateUserPostcode(context);\n  const vehicleType = VehicleTypes.Car;\n  const leasingDealType = context.store.getState().dealSelector; //TODO: ensure always is Personal - not critical\n\n  const makeUrl = context.query.make;\n  const shortModelUrl = context.query.shortModel;\n  const userPostcode = context.store.getState().userPostcode; //TODO: should allow just existing makes - critical\n\n  if (isNullOrWhiteSpace(makeUrl)) {\n    context.res.writeHead(302, {\n      Location: '/car-leasing-with-insurance'\n    });\n    context.res.end();\n    return;\n  }\n\n  const fetchHeaders = getLOSSRFetchHeaders(context);\n  const models = (await GetModels(vehicleType, makeUrl, fetchHeaders)).data;\n\n  if (!models) {\n    context.res.writeHead(302, {\n      Location: '/car-leasing-with-insurance'\n    });\n    context.res.end();\n    return;\n  }\n\n  const shortModel = models.find(x => x.id == shortModelUrl);\n\n  if (!shortModel) {\n    context.res.writeHead(302, {\n      Location: '/car-leasing-with-insurance/' + getFriendlyUrlSegment(userPostcode) + '/' + makeUrl\n    });\n    context.res.end();\n    return;\n  }\n\n  const vehiclesFilter = getVehiclesFilter(context);\n  vehiclesFilter.vehicleType = vehicleType;\n  vehiclesFilter.leasingDealType = leasingDealType;\n  vehiclesFilter.maintenance = true;\n  await dispatchUpdateVehicleFilterSearch(context, vehiclesFilter);\n  const pricingType = vehiclesFilter.pricingType; //Shouldn't it be set above?\n\n  const alternativeModels = (await GetVehicleAlternativeModels(vehicleType, makeUrl, shortModel.id, fetchHeaders)).data; //Why do we need them on server-side?\n\n  const topRecommended = (await GetRecommendedForModel(pricingType, userPostcode, vehicleType, leasingDealType, makeUrl, shortModel.id, fetchHeaders)).data;\n  const vehiclePreviews = (await GetVehiclePreviews(vehiclesFilter, {\n    pageIndex: 1,\n    pageSize: 12\n  }, undefined, fetchHeaders)).data;\n  let modelImage = null;\n  let modelGallery = null;\n  let modelReview = null;\n  const capId = (await GetCapId(makeUrl, shortModel.id, fetchHeaders)).data;\n\n  if (capId) {\n    modelImage = (await GetVehicleImage(vehicleType, capId, fetchHeaders)).data;\n    modelGallery = (await GetModelGalleryImages(vehicleType, capId, 750, 500, fetchHeaders)).data;\n\n    if (isNullOrWhiteSpace(modelImage) && modelGallery && modelGallery.length > 0) {\n      modelImage = modelGallery[0];\n    }\n  }\n\n  try {\n    //TODO: BoVehicleReview casting is missing. Needs to be checked and implemented.\n    modelReview = (await GetModelReview(vehicleType, makeUrl, shortModel.id, null, fetchHeaders)).data;\n  } catch (e) {} //Is vehicle type param required?\n\n\n  const pageContent = (await ContentService.GetModelPageContent(CustomContentTypes.ModelAttachments, LeasingDealTypes.Personal, makeUrl, shortModel.text)).data;\n  const makeName = capitalize(GetProperManufacturerName(GetFriendlyName(makeUrl)).toUpperCase()); //TODO: get original make name instead of GetFriendlyName\n\n  const modelName = capitalize(shortModel.text.toUpperCase());\n  const title = `${makeName} ${modelName} Car Lease`;\n  const description = (pageContent === null || pageContent === void 0 ? void 0 : pageContent.text) || null; //Description = customContent != null && !string.IsNullOrEmpty(customContent.Text) ? customContent.Text.Replace(\"#manufacturer#\", makeName).Replace(\"<br/>\", \"\").Replace(\"<br>\", \"\") : null - implement?\n  //----MetaData----\n\n  const metaData = {\n    title: capitalize(pageContent === null || pageContent === void 0 ? void 0 : pageContent.metaPageTitle) || null,\n    description: (pageContent === null || pageContent === void 0 ? void 0 : pageContent.metaDescription) || null,\n    keywords: (pageContent === null || pageContent === void 0 ? void 0 : pageContent.metaKeywords) || null,\n    canonicalUrl: GetCanonicalUrl(getBaseUrl(context.req.url)),\n    noIndex: true\n  };\n\n  if (isNullOrWhiteSpace(metaData.title)) {\n    metaData.title = ModelPageMetaTitle(leasingDealType, makeName, modelName);\n  }\n\n  if (isNullOrWhiteSpace(metaData.description)) {\n    metaData.description = ModelPageMetaDescription(leasingDealType, makeName, modelName);\n  }\n\n  if (!isNullOrWhiteSpace(metaData.description)) {\n    metaData.description = metaData.description.replace(/[\\r\\n]+/g, \" \").trim();\n  } //----//MetaData----\n\n\n  return {\n    props: {\n      pricingType: vehiclesFilter.pricingType,\n      userPostcode: userPostcode,\n      title: title,\n      description: description,\n      metaData: metaData,\n      modelReview: modelReview,\n      modelImage: modelImage,\n      modelGallery: modelGallery,\n      topRecommended: topRecommended,\n      vehiclePreviews: vehiclePreviews,\n      alternativeModels: alternativeModels,\n      //if we pass whole filter why do we need separate properties\n      vehicleType: vehicleType,\n      make: vehiclesFilter.manufacturerUrl,\n      model: vehiclesFilter.shortModTextUrl,\n      vehicleFilter: vehiclesFilter\n    }\n  };\n};","map":null,"metadata":{},"sourceType":"module"}