{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { useState, useEffect } from 'react';\nimport style from './sortcode-lookup.module.scss';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faSpinner } from \"@fortawesome/free-solid-svg-icons\";\nimport { DataLookupAPI } from \"API/DataLookupApi\";\n\nconst SortcodeLookup = ({\n  selectedSortCode,\n  onBankSelected,\n  register,\n  errors\n}) => {\n  const minQueryLength = 6;\n  const {\n    0: isLoading,\n    1: setIsLoading\n  } = useState(false);\n  const {\n    0: isActive,\n    1: setIsActive\n  } = useState(false);\n  const {\n    0: searchResults,\n    1: setSearchResults\n  } = useState([]);\n\n  const handleSearchInit = evt => {\n    let searchQuery = evt.target.value.toString();\n\n    if (searchQuery.length === minQueryLength) {\n      setIsLoading(true);\n      Promise.resolve(getSearchResults(searchQuery)).then(function (results) {\n        setIsActive(true);\n        setSearchResults([results]);\n        setIsLoading(false);\n      });\n    } else {\n      setIsActive(false);\n      setSearchResults([]);\n    }\n  };\n\n  const handleSearchBlur = () => {\n    setTimeout(handleSearchClose, 250);\n  };\n\n  const handleSearchClose = () => {\n    setIsActive(false);\n    setIsLoading(false);\n    setSearchResults([]);\n  };\n\n  const handleBankSelect = item => {\n    if (onBankSelected) {\n      onBankSelected({\n        name: item.longbank1 + ' - ' + item.bankname,\n        address1: item.printaddr1,\n        address2: item.printaddr2,\n        address3: item.printaddr3 + (item.printaddr4 ? \", \" + item.printaddr4 : \"\"),\n        town: item.printtown,\n        county: item.printcounty,\n        postcode: item.printpcode1 + ' ' + item.printpcode2\n      });\n    }\n  };\n\n  async function getSearchResults(searchQuery) {\n    return await DataLookupAPI.SortcodeLookup(searchQuery);\n  }\n\n  useEffect(() => {}, []);\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsxs(\"div\", {\n      className: style['input-wrapper'],\n      children: [/*#__PURE__*/_jsx(\"input\", {\n        type: \"text\",\n        className: `form-control ${errors.sortCode ? \"is-invalid\" : \"\"}`,\n        id: \"sortCode\",\n        name: \"sortCode\",\n        \"aria-describedby\": \"sortCode\",\n        placeholder: \"Sort Code (Lookup)\",\n        maxLength: 6,\n        ref: register({\n          required: true,\n          minLength: 6,\n          maxLength: 6,\n          pattern: /^[0-9]*$/\n        }),\n        defaultValue: selectedSortCode,\n        onFocus: evt => {\n          handleSearchInit(evt);\n        },\n        onKeyUp: evt => {\n          handleSearchInit(evt);\n        },\n        onBlur: handleSearchBlur\n      }), isLoading ? /*#__PURE__*/_jsx(FontAwesomeIcon, {\n        width: \"16\",\n        height: \"16\",\n        icon: faSpinner,\n        className: `fa-spin ${style['input-loading']}`\n      }) : \"\", /*#__PURE__*/_jsx(\"div\", {\n        className: `${style['input-list']} ${isActive ? style['is-active'] : \"\"}`,\n        children: /*#__PURE__*/_jsx(\"ul\", {\n          children: searchResults.map((item, index) => {\n            return /*#__PURE__*/_jsx(\"li\", {\n              onClick: evt => {\n                handleBankSelect(item);\n              },\n              children: /*#__PURE__*/_jsx(\"a\", {\n                children: `${item.longbank1} - ${item.bankname}`\n              })\n            }, `result-${index}`);\n          })\n        })\n      })]\n    }), errors.sortCode && /*#__PURE__*/_jsx(\"span\", {\n      className: \"invalid-feedback d-block\",\n      children: \"This field is required\"\n    })]\n  });\n};\n\nexport default SortcodeLookup;","map":null,"metadata":{},"sourceType":"module"}