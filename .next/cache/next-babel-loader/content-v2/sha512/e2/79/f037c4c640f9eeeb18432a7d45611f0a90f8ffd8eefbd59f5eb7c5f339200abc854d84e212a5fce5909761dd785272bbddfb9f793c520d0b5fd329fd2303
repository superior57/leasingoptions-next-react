{"ast":null,"code":"import { isNullOrWhiteSpace, joinNotEmpty, replaceAll } from './stringHelper';\nexport const getBaseUrl = url => {\n  let result = null;\n\n  if (!isNullOrWhiteSpace(url)) {\n    result = url;\n    const splitIdx = result.indexOf('?');\n\n    if (splitIdx !== -1) {\n      result = result.substring(0, splitIdx);\n    }\n  }\n\n  return result;\n};\nexport const getFriendlyUrlSegment = value => {\n  if (value == null || value == undefined) {\n    return value;\n  }\n\n  let result = value.toString().toLowerCase();\n  result = replaceAll(result, \" \", \"-\");\n  result = replaceAll(result, \",\", \"\");\n  result = replaceAll(result, \".\", \"\");\n  result = replaceAll(result, \"#\", \"\");\n  result = replaceAll(result, \"'\", \"\");\n  result = replaceAll(result, \"\\\"\", \"\");\n  result = replaceAll(result, \"&\", \"\");\n  result = replaceAll(result, \"%\", \"\");\n  result = replaceAll(result, \"!\", \"\");\n  result = replaceAll(result, \"\\\"\", \"\");\n  result = replaceAll(result, \"?\", \"\");\n  result = replaceAll(result, \"(\", \"\");\n  result = replaceAll(result, \")\", \"\");\n  result = replaceAll(result, \":\", \"-\");\n  result = replaceAll(result, \"�\", \"-\");\n  result = replaceAll(result, \"_\", \"-\");\n  result = replaceAll(result, \"��\", \"-\");\n  result = replaceAll(result, \"�\", \"\");\n  result = replaceAll(result, \"�\", \"\");\n  result = replaceAll(result, \"/\", \"\");\n  result = replaceAll(result, \"\\\\\", \"\");\n  result = replaceAll(result, \"[\", \"\");\n  result = replaceAll(result, \"]\", \"\");\n  result = replaceAll(result, \"+\", \"-\");\n\n  while (result.includes(\"--\")) {\n    result = replaceAll(result, \"--\", \"-\");\n  } // result = result.trim('-', '_')\n\n\n  return result;\n};\nexport const getUrl = (baseUrl, queryParams) => {\n  let result = null;\n\n  if (!isNullOrWhiteSpace(baseUrl)) {\n    result = baseUrl;\n\n    if (queryParams && queryParams.length > 0) {\n      result += (result.indexOf('?') === -1 ? '?' : '&') + joinNotEmpty(\"&\", queryParams);\n    }\n  }\n\n  return result;\n};\nexport const getQueryParams = function (queryStringParts) {\n  if (!queryStringParts || queryStringParts.length === 0) return {};\n  let result = {};\n\n  for (let i = 0; i < queryStringParts.length; ++i) {\n    let param = queryStringParts[i].split('=', 2);\n\n    if (param.length === 1) {\n      result[param[0].toLowerCase()] = \"\";\n    } else {\n      result[param[0].toLowerCase()] = decodeURIComponent(param[1].replace(/\\+/g, \" \"));\n    }\n  }\n\n  return result;\n};","map":{"version":3,"sources":["E:/current_project/PPH/tfs/Website/website/helpers/urlsHelper.tsx"],"names":["isNullOrWhiteSpace","joinNotEmpty","replaceAll","getBaseUrl","url","result","splitIdx","indexOf","substring","getFriendlyUrlSegment","value","undefined","toString","toLowerCase","includes","getUrl","baseUrl","queryParams","length","getQueryParams","queryStringParts","i","param","split","decodeURIComponent","replace"],"mappings":"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","sourcesContent":["import { isNullOrWhiteSpace, joinNotEmpty, replaceAll } from './stringHelper';\r\n\r\nexport const getBaseUrl = (url: string): string => {\r\n    let result: string = null;\r\n\r\n    if (!isNullOrWhiteSpace(url)) {\r\n        result = url;\r\n        const splitIdx = result.indexOf('?');\r\n\r\n        if (splitIdx !== -1) {\r\n            result = result.substring(0, splitIdx);\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport const getFriendlyUrlSegment = (value: string): string => {\r\n    if (value == null || value == undefined) {\r\n        return value;\r\n    }\r\n\r\n    let result: string = value.toString().toLowerCase();\r\n    result = replaceAll(result, \" \", \"-\")\r\n    result = replaceAll(result, \",\", \"\")\r\n    result = replaceAll(result, \".\", \"\")\r\n    result = replaceAll(result, \"#\", \"\")\r\n    result = replaceAll(result, \"'\", \"\")\r\n    result = replaceAll(result, \"\\\"\", \"\")\r\n    result = replaceAll(result, \"&\", \"\")\r\n    result = replaceAll(result, \"%\", \"\")\r\n    result = replaceAll(result, \"!\", \"\")\r\n    result = replaceAll(result, \"\\\"\", \"\")\r\n    result = replaceAll(result, \"?\", \"\")\r\n    result = replaceAll(result, \"(\", \"\")\r\n    result = replaceAll(result, \")\", \"\")\r\n    result = replaceAll(result, \":\", \"-\")\r\n    result = replaceAll(result, \"�\", \"-\")\r\n    result = replaceAll(result, \"_\", \"-\")\r\n    result = replaceAll(result, \"��\", \"-\")\r\n    result = replaceAll(result, \"�\", \"\")\r\n    result = replaceAll(result, \"�\", \"\")\r\n    result = replaceAll(result, \"/\", \"\")\r\n    result = replaceAll(result, \"\\\\\", \"\")\r\n    result = replaceAll(result, \"[\", \"\")\r\n    result = replaceAll(result, \"]\", \"\")\r\n    result = replaceAll(result, \"+\", \"-\");\r\n\r\n    while (result.includes(\"--\")) {\r\n        result = replaceAll(result, \"--\", \"-\");\r\n    }\r\n\r\n    // result = result.trim('-', '_')\r\n    return result;\r\n}\r\n\r\nexport const getUrl = (baseUrl: string, queryParams: string[]): string => {\r\n    let result: string = null;\r\n\r\n    if (!isNullOrWhiteSpace(baseUrl)) {\r\n        result = baseUrl;\r\n\r\n        if (queryParams && queryParams.length > 0) {\r\n            result += (result.indexOf('?') === -1 ? '?' : '&') + joinNotEmpty(\"&\", queryParams);\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport const getQueryParams = function (queryStringParts: string[]): any {\r\n    if (!queryStringParts || queryStringParts.length === 0) return {};\r\n\r\n    let result = {};\r\n\r\n    for (let i = 0; i < queryStringParts.length; ++i) {\r\n        let param: string[] = queryStringParts[i].split('=', 2);\r\n\r\n        if (param.length === 1) {\r\n            result[param[0].toLowerCase()] = \"\";\r\n        }\r\n        else {\r\n            result[param[0].toLowerCase()] = decodeURIComponent(param[1].replace(/\\+/g, \" \"));\r\n        }\r\n    }\r\n\r\n    return result;\r\n}"]},"metadata":{},"sourceType":"module"}