{"ast":null,"code":"import { VehicleTypes } from 'enums/VehicleTypes';\nimport { LeasingDealTypes } from 'enums/LeasingDealTypes';\nimport { getBaseUrl } from 'helpers/urlsHelper';\nimport { getLOSSRFetchHeaders } from 'helpers/apiHelper';\nimport { GetCanonicalUrl } from 'helpers/urlHelper';\nimport { isNullOrWhiteSpace } from 'helpers/stringHelper';\nimport { getVehiclesFilter } from 'helpers/vehiclesFilterHelper';\nimport { ContentService } from 'business-logic/contentService';\nimport { dispatchUpdateDealToggle, dispatchUpdateVehicleFilterSearch } from 'redux/dispatches/dispatchs';\nimport { GetVehicleModelPreviews, GetTopLoPickVehicles } from 'business-logic/vehicleService';\nexport const getProps = async context => {\n  var _GetCanonicalUrl;\n\n  const vehiclesFilter = getVehiclesFilter(context);\n  const vehicleType = vehiclesFilter.vehicleType;\n  const leasingDealType = vehiclesFilter.leasingDealType;\n\n  if (vehicleType === VehicleTypes.None || leasingDealType === LeasingDealTypes.None) {\n    //Do we have custom page to show?\n    context.res.writeHead(404);\n    context.res.end();\n    return;\n  }\n\n  const allovedValues = [\"1000\"];\n  const budget = context.query.budget;\n\n  if (!allovedValues.includes(budget)) {\n    //Do we have custom page to show?\n    context.res.writeHead(404);\n    context.res.end();\n    return;\n  }\n\n  const originalValue = parseInt(budget);\n  vehiclesFilter.maintenance = false;\n  vehiclesFilter.priceFrom = originalValue;\n  await dispatchUpdateVehicleFilterSearch(context, vehiclesFilter);\n\n  if (vehicleType === VehicleTypes.Car) {\n    //TODO: set from filter?\n    dispatchUpdateDealToggle(context);\n  }\n\n  const fetchHeaders = getLOSSRFetchHeaders(context);\n  let modelPreviews = (await GetVehicleModelPreviews(vehiclesFilter, {\n    pageSize: 9999,\n    pageIndex: 1\n  }, undefined, fetchHeaders)).data;\n  let topPicks = (await GetTopLoPickVehicles(vehicleType, '', null, null, fetchHeaders)).data;\n  let pageContent = (await ContentService.GetBudgetPageContent(vehicleType, `over-${originalValue}`)).data;\n  let title = (pageContent === null || pageContent === void 0 ? void 0 : pageContent.title) || null;\n  let description = (pageContent === null || pageContent === void 0 ? void 0 : pageContent.text) || null; //TODO: HTML format required on render. Check other pages as well\n\n  if (isNullOrWhiteSpace(title)) {\n    title = `${vehicleType === VehicleTypes.Commercial ? \"Vans\" : \"Cars\"} over Â£${originalValue}`;\n  }\n\n  const metaData = {\n    title: (pageContent === null || pageContent === void 0 ? void 0 : pageContent.metaPageTitle) || null,\n    description: (pageContent === null || pageContent === void 0 ? void 0 : pageContent.metaDescription) || null,\n    keywords: (pageContent === null || pageContent === void 0 ? void 0 : pageContent.metaKeywords) || null,\n    canonicalUrl: (_GetCanonicalUrl = GetCanonicalUrl(getBaseUrl(context.req.url))) === null || _GetCanonicalUrl === void 0 ? void 0 : _GetCanonicalUrl.toLowerCase()\n  };\n\n  if (!isNullOrWhiteSpace(metaData.description)) {\n    metaData.description = metaData.description.replace(/[\\r\\n]+/g, \" \").trim();\n  }\n\n  return {\n    props: {\n      title: title,\n      description: description,\n      metaData: metaData,\n      modelPreviews: modelPreviews,\n      topPicks: topPicks,\n      vehicleFilter: vehiclesFilter\n    }\n  };\n};","map":null,"metadata":{},"sourceType":"module"}