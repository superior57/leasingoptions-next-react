{"ast":null,"code":"import { CustomContentTypes } from 'enums/CustomContentTypes';\nimport { VehicleTypes } from 'enums/VehicleTypes';\nimport { LeasingDealTypes } from 'enums/LeasingDealTypes';\nimport { PricingTypes } from 'enums/PricingTypes';\nimport { isNullOrWhiteSpace, capitalize } from 'helpers/stringHelper';\nimport { MakePageMetaTitle, MakePageMetaDescription } from 'helpers/seoHelper';\nimport { getBaseUrl } from 'helpers/urlsHelper';\nimport { GetCanonicalUrl } from 'helpers/urlHelper';\nimport { getLOSSRFetchHeaders } from 'helpers/apiHelper';\nimport { GetProperManufacturerName } from 'helpers/helpers';\nimport { getVehiclesFilter } from 'helpers/vehiclesFilterHelper';\nimport { ContentService } from 'business-logic/contentService';\nimport { NewsService } from 'business-logic/newsService';\nimport { NewsTypes } from \"enums/NewsTypes\";\nimport { dispatchUpdateDealToggle, dispatchUpdateVehicleFilterSearch } from 'redux/dispatches/dispatchs';\nimport { GetVehicleModelPreviews, GetTopLoPickVehicles, GetAvailableShortModels, GetStaticMakes } from 'business-logic/vehicleService';\nexport const getProps = async context => {\n  var _GetCanonicalUrl, _vehiclesFilter$manuf;\n\n  const vehiclesFilter = getVehiclesFilter(context);\n  const vehicleType = vehiclesFilter.vehicleType;\n  const leasingDealType = vehiclesFilter.leasingDealType;\n\n  if (vehicleType === VehicleTypes.None || leasingDealType === LeasingDealTypes.None) {\n    //Do we have custom page to show?\n    context.res.writeHead(404);\n    context.res.end();\n    return;\n  }\n\n  const makeUrl = context.query.make;\n  const make = GetStaticMakes(vehicleType).find(item => {\n    return item.id === makeUrl;\n  });\n\n  if (!make) {\n    context.res.writeHead(302, {\n      Location: vehicleType === VehicleTypes.Commercial ? '/van-leasing' : '/car-leasing'\n    });\n    context.res.end();\n    return;\n  }\n\n  await dispatchUpdateVehicleFilterSearch(context, vehiclesFilter);\n\n  if (vehicleType === VehicleTypes.Car) {\n    //TODO: set from filter?\n    dispatchUpdateDealToggle(context);\n  }\n\n  const isATC = vehiclesFilter.pricingType === PricingTypes.Atc;\n  const fetchHeaders = getLOSSRFetchHeaders(context); //Temp: Set news tag ID based off URL\n\n  let tagId = null;\n\n  switch (makeUrl === null || makeUrl === void 0 ? void 0 : makeUrl.toLocaleLowerCase()) {\n    case \"seat\":\n      tagId = 278;\n      break;\n\n    case \"skoda\":\n      tagId = 176;\n      break;\n\n    default:\n      break;\n  } //Why do we need them on server-side?\n\n\n  const categoryNews = await NewsService.GetAllNewsArticlePreviews(NewsTypes.LatestNews, [tagId], 1, 4);\n  const modelPreviews = (await GetVehicleModelPreviews(vehiclesFilter, {\n    pageSize: isATC ? 12 : 999,\n    pageIndex: 1\n  }, undefined, fetchHeaders)).data;\n  const topPicks = (await GetTopLoPickVehicles(vehicleType, make.id, null, null, fetchHeaders)).data;\n  const modelData = (await GetAvailableShortModels(vehiclesFilter, fetchHeaders)).data;\n  const pageContent = (await ContentService.GetManufacturePageContent(CustomContentTypes.Manufacturer, vehicleType === VehicleTypes.Commercial ? LeasingDealTypes.Van : LeasingDealTypes.Personal, make.id)).data;\n  const makeName = capitalize(GetProperManufacturerName(make.text).toUpperCase());\n  let title = `${makeName} ${vehicleType === VehicleTypes.Commercial ? 'Van Lease Deals' : 'Lease Deals'}`;\n  const description = (pageContent === null || pageContent === void 0 ? void 0 : pageContent.text) || null; //TODO: implement\n  //Description = !string.IsNullOrEmpty(customContent.Text) ? customContent.Text.Replace(\"#manufacturer#\", manufacturer.Text.ToUpper()).Replace(\"<br/>\", \"\").Replace(\"<br>\", \"\") : null\n  //TODO: implement - not critical\n  //if (!string.IsNullOrEmpty(customContent.ImageUrl)) {\n  //    contentItem.ImageUrl = customContent.ImageUrl;\n  //}\n  //else {\n  //    contentItem.ImageUrl = await this._vehicleImagesService.GetVehicleManufacturerTopImageUrlAsync(vehicleType, manufacturer.Text);\n  //}\n  //----MetaData----\n\n  const metaData = {\n    title: capitalize(pageContent === null || pageContent === void 0 ? void 0 : pageContent.metaPageTitle) || null,\n    description: (pageContent === null || pageContent === void 0 ? void 0 : pageContent.metaDescription) || null,\n    keywords: (pageContent === null || pageContent === void 0 ? void 0 : pageContent.metaKeywords) || null,\n    canonicalUrl: (_GetCanonicalUrl = GetCanonicalUrl(getBaseUrl(context.req.url.replace(\"/internal\", \"\")))) === null || _GetCanonicalUrl === void 0 ? void 0 : _GetCanonicalUrl.toLowerCase(),\n    imageUrl: process.env.NEXT_PUBLIC_CDN + \"/website/static/makes/\" + (vehiclesFilter === null || vehiclesFilter === void 0 ? void 0 : (_vehiclesFilter$manuf = vehiclesFilter.manufacturerUrl) === null || _vehiclesFilter$manuf === void 0 ? void 0 : _vehiclesFilter$manuf.toLowerCase()) + \".svg\"\n  };\n\n  if (isNullOrWhiteSpace(metaData.title)) {\n    metaData.title = MakePageMetaTitle(leasingDealType, makeName);\n  }\n\n  if (isNullOrWhiteSpace(metaData.description)) {\n    metaData.description = MakePageMetaDescription(leasingDealType, makeName);\n  }\n\n  if (!isNullOrWhiteSpace(metaData.description)) {\n    metaData.description = metaData.description.replace(/[\\r\\n]+/g, \" \").trim();\n  } //----//MetaData----\n\n\n  return {\n    props: {\n      title: title,\n      description: description,\n      metaData: metaData,\n      makeName: makeName,\n      makeUrl: makeUrl,\n      modelPreviews: modelPreviews,\n      topPicks: topPicks,\n      modelData: modelData,\n      //if we pass whole filter why do we need separate properties\n      vehicleType: vehiclesFilter.vehicleType,\n      vehicleFilter: vehiclesFilter,\n      categoryNews: categoryNews.data\n    }\n  };\n};","map":null,"metadata":{},"sourceType":"module"}