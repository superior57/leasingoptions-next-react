{"ast":null,"code":"import _classCallCheck from \"E:/current_project/PPH/tfs/Website/website/node_modules/next/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"E:/current_project/PPH/tfs/Website/website/node_modules/next/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _defineProperty from \"E:/current_project/PPH/tfs/Website/website/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _ from 'underscore';\nimport { VehicleStorageTypes } from \"enums/VehicleStorageTypes\";\nimport { VehiclesStorageProvider } from \"helpers/vehiclesStorageProvider\";\nimport { isNullOrEmpty, getGUID } from \"helpers/helpers\";\nexport var GarageStorageHelper = /*#__PURE__*/function () {\n  function GarageStorageHelper() {\n    _classCallCheck(this, GarageStorageHelper);\n  }\n\n  _createClass(GarageStorageHelper, null, [{\n    key: \"addItem\",\n    value: function addItem(index, item) {\n      if (item && index >= 0 && index < this.storageMaxSize) {\n        var storageItem = {\n          id: getGUID(),\n          index: index,\n          vehicle: item\n        };\n\n        if (VehiclesStorageProvider.addItem(this.storageType, storageItem, index)) {\n          return storageItem;\n        }\n      }\n\n      return null;\n    }\n  }, {\n    key: \"updateItem\",\n    value: function updateItem(itemId, item, alwaysUpdate) {\n      if (item) {\n        var storageItem = VehiclesStorageProvider.getItem(this.storageType, itemId);\n\n        if (storageItem && (alwaysUpdate || !_.isEqual(storageItem.vehicle, item))) {\n          storageItem.vehicle = item;\n\n          if (VehiclesStorageProvider.updateItem(this.storageType, storageItem)) {\n            return storageItem;\n          }\n        }\n      }\n\n      return null;\n    }\n  }, {\n    key: \"addOrUpdateItem\",\n    value: function addOrUpdateItem(item) {\n      if (item) {\n        var storageItems = this.getItems(false);\n        var storageItem = storageItems.find(function (storageItem) {\n          return storageItem && storageItem.vehicle && storageItem.vehicle.vehicleRef === item.vehicleRef;\n        });\n\n        if (storageItem) {\n          return this.updateItem(storageItem.id, item, true);\n        } else {\n          var index = storageItems.indexOf(null);\n\n          if (!isNullOrEmpty(index) && index >= 0 && index < this.storageMaxSize) {\n            return this.addItem(index, item);\n          }\n        }\n      }\n\n      return null;\n    }\n  }, {\n    key: \"cloneItem\",\n    value: function cloneItem(itemId) {\n      var storageItems = this.getItems(false);\n      var itemToClone = storageItems.find(function (item) {\n        return item && item.id === itemId;\n      });\n\n      if (itemToClone) {\n        var index = storageItems.indexOf(null);\n\n        if (!isNullOrEmpty(index) && index >= 0 && index < this.storageMaxSize) {\n          var clonnedItem = {\n            id: getGUID(),\n            index: index,\n            vehicle: itemToClone.vehicle //copy not made as data comes from json\n\n          };\n\n          if (VehiclesStorageProvider.addItem(this.storageType, clonnedItem, index)) {\n            return clonnedItem;\n          }\n        }\n      }\n\n      return null;\n    }\n  }, {\n    key: \"removeItem\",\n    value: function removeItem(itemId) {\n      return VehiclesStorageProvider.removeItem(this.storageType, itemId);\n    }\n  }, {\n    key: \"getItems\",\n    value: function getItems(ignoreEmptyItems) {\n      var result = VehiclesStorageProvider.getItems(this.storageType);\n\n      if (result && result.length > 0 && ignoreEmptyItems) {\n        result = result.filter(function (item) {\n          return item;\n        });\n      }\n\n      return result;\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      VehiclesStorageProvider.clear(this.storageType);\n    }\n  }, {\n    key: \"countItems\",\n    value: function countItems() {\n      return this.getItems(true).length;\n    }\n  }, {\n    key: \"isFull\",\n    value: function isFull() {\n      return !(this.countItems() < this.storageMaxSize);\n    }\n  }]);\n\n  return GarageStorageHelper;\n}();\n\n_defineProperty(GarageStorageHelper, \"storageType\", VehicleStorageTypes.Garage);\n\n_defineProperty(GarageStorageHelper, \"storageMaxSize\", VehiclesStorageProvider.getStorageMaxSize(VehicleStorageTypes.Garage) || 0);","map":null,"metadata":{},"sourceType":"module"}