{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useFormContext, Controller } from \"react-hook-form\";\nimport { getFieldName, getFieldError } from 'helpers/fieldArrayHelper';\nimport DatePicker from \"react-datepicker\";\nimport moment from 'moment';\nimport '../../../node_modules/react-datepicker/dist/react-datepicker.min.css';\nimport AddressInput from './address-input';\nimport { IsDateInPresentOrPast } from 'helpers/validation';\n\nconst AddressHistoryItem = ({\n  title,\n  fromDateRequired,\n  timeAtAddressRequired,\n  addressData,\n  collectionName,\n  index,\n  onTimePeriodUpdate\n}, ...props) => {\n  var _addressData$fromDate, _addressData$timeAtAd, _addressData$timeAtAd2, _addressData$totalMon, _getFieldError, _getFieldError2, _getFieldError3, _getFieldError4;\n\n  const {\n    control,\n    setValue,\n    errors,\n    register\n  } = useFormContext();\n  const {\n    0: fromDate,\n    1: setFromDate\n  } = useState((_addressData$fromDate = addressData === null || addressData === void 0 ? void 0 : addressData.fromDate) !== null && _addressData$fromDate !== void 0 ? _addressData$fromDate : null);\n  const {\n    0: timeAtAddressYears,\n    1: setTimeAtAddressYears\n  } = useState((_addressData$timeAtAd = addressData === null || addressData === void 0 ? void 0 : addressData.timeAtAddressYears) !== null && _addressData$timeAtAd !== void 0 ? _addressData$timeAtAd : 0);\n  const {\n    0: timeAtAddressMonths,\n    1: setTimeAtAddressMonths\n  } = useState((_addressData$timeAtAd2 = addressData === null || addressData === void 0 ? void 0 : addressData.timeAtAddressMonths) !== null && _addressData$timeAtAd2 !== void 0 ? _addressData$timeAtAd2 : 0);\n  const {\n    0: totalMonthsAtAddress,\n    1: setTotalMonthsAtAddress\n  } = useState(parseInt((_addressData$totalMon = addressData === null || addressData === void 0 ? void 0 : addressData.totalMonthsAtAddress) !== null && _addressData$totalMon !== void 0 ? _addressData$totalMon : 0));\n  const {\n    0: fromDateYears,\n    1: setFromDateYears\n  } = useState(0);\n  const {\n    0: fromDateMonths,\n    1: setFromDateMonths\n  } = useState(0);\n  useEffect(() => {\n    calculateTotalHistory();\n  }, []);\n  const isInitialMount = useRef(true);\n  useEffect(() => {\n    if (isInitialMount.current) {\n      isInitialMount.current = false;\n    } else {\n      updateTimePeriod();\n    }\n  }, [fromDate, timeAtAddressYears, timeAtAddressMonths]);\n\n  const handleTimePeriodChanges = (fieldName, value) => {\n    switch (fieldName) {\n      case \"fromDate\":\n        setFromDate(value);\n        const now = moment().startOf('day');\n        let result = 0;\n\n        if (!now.isBefore(value)) {\n          result = now.diff(value, \"months\");\n          const years = Math.floor(result / 12);\n          const months = result % 12;\n          setTimeAtAddressYears(years);\n          setTimeAtAddressMonths(months);\n        }\n\n        break;\n\n      case \"timeAtAddressYears\":\n        if (value) {\n          setTimeAtAddressYears(parseInt(value !== null && value !== void 0 ? value : 0));\n        } else {\n          setTimeAtAddressYears(0);\n        }\n\n        break;\n\n      case \"timeAtAddressMonths\":\n        if (value) {\n          setTimeAtAddressMonths(parseInt(value !== null && value !== void 0 ? value : 0));\n        } else {\n          setTimeAtAddressMonths(0);\n        }\n\n        break;\n    }\n  };\n\n  const calculateTotalHistory = () => {\n    let result = 0;\n\n    if (fromDateRequired && fromDate) {\n      const now = moment().startOf('day');\n\n      if (!now.isBefore(fromDate)) {\n        result = now.diff(fromDate, \"months\");\n        const years = Math.floor(result / 12);\n        const months = result % 12;\n        setFromDateYears(years);\n        setFromDateMonths(months);\n      } else {\n        setFromDateYears(0);\n        setFromDateMonths(0);\n      }\n    } else if (timeAtAddressRequired) {\n      result = (timeAtAddressYears !== null && timeAtAddressYears !== void 0 ? timeAtAddressYears : 0) * 12 + (timeAtAddressMonths !== null && timeAtAddressMonths !== void 0 ? timeAtAddressMonths : 0);\n    }\n\n    return result;\n  };\n\n  const updateTimePeriod = () => {\n    const totalMonthsAtAddress = calculateTotalHistory();\n    setTotalMonthsAtAddress(totalMonthsAtAddress);\n\n    if (onTimePeriodUpdate) {\n      onTimePeriodUpdate(totalMonthsAtAddress);\n    }\n  };\n\n  return /*#__PURE__*/_jsxs(React.Fragment, {\n    children: [/*#__PURE__*/_jsx(\"input\", {\n      type: \"hidden\",\n      ref: register(),\n      defaultValue: totalMonthsAtAddress,\n      name: getFieldName(\"totalMonthsAtAddress\", collectionName, index)\n    }), /*#__PURE__*/_jsx(\"input\", {\n      type: \"hidden\",\n      ref: register(),\n      defaultValue: timeAtAddressYears,\n      name: getFieldName(\"timeAtAddressYears\", collectionName, index)\n    }), /*#__PURE__*/_jsx(\"input\", {\n      type: \"hidden\",\n      ref: register(),\n      defaultValue: timeAtAddressMonths,\n      name: getFieldName(\"timeAtAddressMonths\", collectionName, index)\n    }), /*#__PURE__*/_jsx(\"h2\", {\n      className: \"mb-5\",\n      children: title\n    }), /*#__PURE__*/_jsx(AddressInput, {\n      excludeTownAndCounty: false,\n      formData: addressData,\n      index: index,\n      collectionName: collectionName\n    }), fromDateRequired && /*#__PURE__*/_jsxs(_Fragment, {\n      children: [/*#__PURE__*/_jsx(\"div\", {\n        className: \"form-row mb-3\",\n        children: /*#__PURE__*/_jsxs(\"div\", {\n          className: \"col-24 col-md-12 col-lg-6\",\n          children: [/*#__PURE__*/_jsxs(\"label\", {\n            children: [\"From Date \", /*#__PURE__*/_jsx(\"small\", {\n              children: \"(Required)\"\n            })]\n          }), /*#__PURE__*/_jsx(Controller, {\n            as: DatePicker,\n            control: control,\n            onChange: ([selected]) => {\n              handleTimePeriodChanges(\"fromDate\", selected);\n              return selected;\n            },\n            valueName: \"selected\",\n            name: getFieldName(\"fromDate\", collectionName, index),\n            className: `form-control ${getFieldError(\"fromDate\", collectionName, index, errors) ? \"is-invalid\" : \"\"}`,\n            dateFormat: \"dd/MM/yyyy\",\n            placeholderText: \"From Date\",\n            maxDate: new Date(),\n            defaultValue: addressData.fromDate,\n            rules: {\n              required: true,\n              validate: IsDateInPresentOrPast\n            },\n            showMonthDropdown: true,\n            useShortMonthInDropdown: true,\n            showYearDropdown: true\n          }), ((_getFieldError = getFieldError(\"fromDate\", collectionName, index, errors)) === null || _getFieldError === void 0 ? void 0 : _getFieldError.type) === \"required\" && /*#__PURE__*/_jsx(\"span\", {\n            className: \"invalid-feedback d-block\",\n            children: \"This field is required\"\n          }), ((_getFieldError2 = getFieldError(\"fromDate\", collectionName, index, errors)) === null || _getFieldError2 === void 0 ? void 0 : _getFieldError2.type) === \"validate\" && /*#__PURE__*/_jsx(\"span\", {\n            className: \"invalid-feedback d-block\",\n            children: \"Date can't be in the future\"\n          })]\n        })\n      }), /*#__PURE__*/_jsx(\"p\", {\n        children: `${fromDateYears} Year(s) ${fromDateMonths} Month(s)`\n      })]\n    }), timeAtAddressRequired && /*#__PURE__*/_jsxs(_Fragment, {\n      children: [/*#__PURE__*/_jsx(\"div\", {\n        className: \"form-row\",\n        children: /*#__PURE__*/_jsx(\"div\", {\n          className: \"col-24 col-md-12\",\n          children: /*#__PURE__*/_jsxs(\"label\", {\n            htmlFor: \"yearsMonths2\",\n            children: [\"Years & months at address \", /*#__PURE__*/_jsx(\"small\", {\n              children: \"(Required)\"\n            })]\n          })\n        })\n      }), /*#__PURE__*/_jsxs(\"div\", {\n        className: \"form-row mb-3\",\n        children: [/*#__PURE__*/_jsxs(\"div\", {\n          className: \"col-24 col-md-6 col-lg-3\",\n          children: [/*#__PURE__*/_jsx(\"input\", {\n            type: \"text\",\n            className: `form-control ${getFieldError(\"timeAtAddressYears\", collectionName, index, errors) ? \"is-invalid\" : \"\"}`,\n            name: getFieldName(\"timeAtAddressYears\", collectionName, index),\n            placeholder: \"Years\",\n            ref: register({\n              required: 'This field is required',\n              pattern: {\n                value: /^[0-9]*$/,\n                message: 'Valid value is required'\n              },\n              min: {\n                value: 0,\n                message: 'Valid value is required'\n              },\n              max: {\n                value: 100,\n                message: 'Valid value is required'\n              }\n            }),\n            defaultValue: addressData.timeAtAddressYears,\n            onBlur: evt => {\n              handleTimePeriodChanges(\"timeAtAddressYears\", evt.target.value);\n            },\n            onKeyPress: evt => {\n              if (evt.keyCode === 13) {\n                handleTimePeriodChanges(\"timeAtAddressYears\", evt.target.value);\n                evt.stopPropagation();\n              }\n            }\n          }), getFieldError(\"timeAtAddressYears\", collectionName, index, errors) && /*#__PURE__*/_jsx(\"span\", {\n            className: \"invalid-feedback d-block\",\n            children: (_getFieldError3 = getFieldError(\"timeAtAddressYears\", collectionName, index, errors)) === null || _getFieldError3 === void 0 ? void 0 : _getFieldError3.message\n          })]\n        }), /*#__PURE__*/_jsxs(\"div\", {\n          className: \"col-24 col-md-6 col-lg-3\",\n          children: [/*#__PURE__*/_jsx(\"input\", {\n            type: \"text\",\n            className: `form-control ${getFieldError(\"timeAtAddressMonths\", collectionName, index, errors) ? \"is-invalid\" : \"\"}`,\n            name: getFieldName(\"timeAtAddressMonths\", collectionName, index),\n            placeholder: \"Months\",\n            ref: register({\n              required: 'This field is required',\n              pattern: {\n                value: /^[0-9]*$/,\n                message: 'Valid value is required'\n              },\n              min: {\n                value: 0,\n                message: 'Valid value is required'\n              },\n              max: {\n                value: 100,\n                message: 'Valid value is required'\n              }\n            }),\n            defaultValue: addressData.timeAtAddressMonths,\n            onBlur: evt => {\n              handleTimePeriodChanges(\"timeAtAddressMonths\", evt.target.value);\n            }\n          }), getFieldError(\"timeAtAddressMonths\", collectionName, index, errors) && /*#__PURE__*/_jsx(\"span\", {\n            className: \"invalid-feedback d-block\",\n            children: (_getFieldError4 = getFieldError(\"timeAtAddressMonths\", collectionName, index, errors)) === null || _getFieldError4 === void 0 ? void 0 : _getFieldError4.message\n          })]\n        })]\n      })]\n    }), /*#__PURE__*/_jsx(\"div\", {\n      className: \"mb-5\"\n    })]\n  });\n};\n\nexport default AddressHistoryItem;","map":null,"metadata":{},"sourceType":"module"}