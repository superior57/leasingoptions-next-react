{"ast":null,"code":"import { LeasingDealTypes } from \"enums/LeasingDealTypes\";\nimport { VehicleTypes } from 'enums/VehicleTypes';\nimport { faCalendar, faHourglass, faCoin, faTire, faSteeringWheel, faSnowflake, faBullseye } from '@fortawesome/pro-light-svg-icons';\nimport { faGem } from \"@fortawesome/pro-light-svg-icons\";\nimport { faBluetooth } from \"@fortawesome/free-brands-svg-icons\";\nimport { CheckVanUrl } from 'helpers/urlHelper';\nimport { initialFilterData } from \"../redux/initialState\";\nimport * as _ from 'underscore';\nimport { hasWhiteSpace, replaceAll } from './stringHelper';\nimport { SiteSettings } from \"../environment/siteSettings\";\nimport accounting from \"accounting\";\n/**\r\n * Returns the text from a HTML string\r\n * \r\n * @param {html} String The html string\r\n */\n\nexport const stripHtml = html => {\n  // Create a new div element\n  var temporalDivElement = document.createElement(\"div\"); // Set the HTML content with the providen\n\n  temporalDivElement.innerHTML = html; // Retrieve the text property of the element (cross-browser support)\n\n  return temporalDivElement.textContent || temporalDivElement.innerText || \"\";\n};\nexport let listenToScroll = scrolledCheck => {\n  const winScroll = document.body.scrollTop || document.documentElement.scrollTop;\n  const height = document.documentElement.scrollHeight - document.documentElement.clientHeight;\n  const scrolled = winScroll / height;\n  return scrolled > scrolledCheck;\n};\nexport const serialize = obj => {\n  var str = [];\n\n  for (var p in obj) if (obj.hasOwnProperty(p)) {\n    str.push(encodeURIComponent(p) + \"=\" + encodeURIComponent(obj[p]));\n  }\n\n  return str === null || str === void 0 ? void 0 : str.join(\"&\");\n};\nexport const GetProperManufacturerName = manufacturer => {\n  return manufacturer.toLowerCase().replace(\"alfa romeo\", \"alfa\").replace(\"mercedes benz\", \"mercedes\").replace(\"mg motor uk\", \"mg\").replace(\"volkswagen\", \"vw\");\n};\nexport const isEmpty = obj => [Object, Array].includes((obj || {}).constructor) && !Object.entries(obj || {}).length;\nexport const GetFriendlyName = value => {\n  if (value == null || value == undefined) {\n    return;\n  }\n\n  value = value.toString();\n  value = replaceAll(value, \"-\", \" \");\n  value = replaceAll(value, \"––\", \" \");\n  value = replaceAll(value, \"/\", \"\");\n  value = GetProperManufacturerName(value);\n\n  if (value === \"bmw\" || value === \"ds\" || value === \"mg\" || value === \"vw\" || value === \"seat\") {\n    value = value.toUpperCase();\n  }\n\n  return value;\n};\nexport const GetMonthlyVATText = leasingDealType => {\n  if (leasingDealType == LeasingDealTypes.Personal) {\n    return \"Per Month \" + GetVATText(leasingDealType);\n  }\n\n  return \"Per Month \" + GetVATText(leasingDealType);\n};\nexport const GetVATText = leasingDealType => {\n  if (leasingDealType == LeasingDealTypes.Personal) {\n    return \"Inc. VAT\";\n  }\n\n  return \"+VAT\";\n};\nexport const GetFeatureIcon = featureId => {\n  switch (featureId) {\n    case 1:\n      return faBluetooth;\n\n    case 2:\n      return faSnowflake;\n\n    case 3:\n      return faBullseye;\n\n    case 4:\n      return faTire;\n\n    default:\n      return;\n  }\n};\nexport const GetNewsTypeFriendlyName = value => {\n  value = value.toString();\n  value = replaceAll(value, \"-\", \" \");\n  return value;\n};\nexport const GetNewsTagClass = tagId => {\n  switch (tagId) {\n    case 1:\n      return \"card-news__tag--latest\";\n\n    case 2:\n      return \"card-news__tag--reviews\";\n\n    case 3:\n      return \"card-news__tag--blog\";\n\n    case 4:\n      return \"card-news__tag--red\";\n\n    default:\n      return;\n  }\n};\nexport const getVehicleHeaderIcon = optionType => {\n  switch (optionType) {\n    case 1:\n      return faCalendar;\n\n    case 2:\n      return faHourglass;\n\n    case 3:\n      return faCoin;\n\n    default:\n      return null;\n  }\n};\nexport const getFeaturedHeaderIcon = dealType => {\n  switch (dealType) {\n    case \"BASE\":\n      return faTire;\n\n    case \"ADVANCED\":\n      return faSteeringWheel;\n\n    case \"PREMIUM\":\n      return faGem;\n\n    case \"LOPICK\":\n      return null;\n\n    default:\n      return null;\n  }\n};\nexport const getFeaturedHeaderColor = dealType => {\n  switch (dealType) {\n    case \"BASE\":\n      return '#223e77';\n\n    case \"ADVANCED\":\n      return '#009892';\n\n    case \"PREMIUM\":\n      return '#9d8e60';\n\n    case \"LOPICK\":\n      return '#910606';\n\n    default:\n      return null;\n  }\n};\nexport const getFeaturedHeaderLabel = dealType => {\n  switch (dealType) {\n    case \"BASE\":\n      return 'Starts From';\n\n    case \"ADVANCED\":\n      return 'Premium Model';\n\n    case \"PREMIUM\":\n      return 'High Specification';\n\n    case \"LOPICK\":\n      return 'Leasing Options Pick';\n\n    default:\n      return null;\n  }\n};\nexport const getSearchButton = (router, vehicleFilters, leasingDealType) => {\n  let compareState = JSON.parse(JSON.stringify(initialFilterData));\n\n  if (leasingDealType === LeasingDealTypes.Van) {\n    compareState.mileage.id = SiteSettings.DefaultVanMileage.toString();\n    compareState.mileage.name = accounting.formatNumber(SiteSettings.DefaultVanMileage) + \" Miles\";\n  } //TODO: Values mutate on some stage. Check and fix\n\n\n  compareState.isInStock = vehicleFilters.isInStock === null ? null : undefined;\n  compareState.isSpecial = vehicleFilters.isSpecial === null ? null : undefined;\n\n  if (!_.isEqual(vehicleFilters, compareState)) {\n    return \"Refine Search\";\n  } else if (CheckVanUrl(router.pathname)) {\n    return \"Search for a Van\";\n  } else {\n    return \"Search for a Car\";\n  }\n};\nexport const groupByArray = (xs, key) => {\n  return xs.reduce(function (rv, x) {\n    let v = key instanceof Function ? key(x) : x[key];\n    let el = rv.find(r => r && r.key === v);\n\n    if (el) {\n      el.values.push(x);\n    } else {\n      rv.push({\n        key: v,\n        values: [x]\n      });\n    }\n\n    return rv;\n  }, []);\n};\nexport const formatAtcPostcode = userPostcode => {\n  if (userPostcode !== undefined && userPostcode !== '' && userPostcode !== null) {\n    return userPostcode.split(\"-\").join(\" \");\n  } else {\n    return '';\n  }\n};\nexport const checkUrlPostcode = (urlPostcode, userPostcode) => {\n  if (urlPostcode !== undefined && urlPostcode !== '' && urlPostcode !== null) {\n    urlPostcode = urlPostcode.split(\"-\").join(\" \").toLowerCase();\n\n    if (urlPostcode !== userPostcode) {\n      return urlPostcode;\n    } else {\n      return false;\n    }\n  } else {\n    return false;\n  }\n}; // at least one number, one lowercase and one uppercase letter\n// at least six characters\n\nexport const isValidPasswordComplexity = str => {\n  var re = /(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{6,}/;\n  return re.test(str);\n};\nexport const isValidPostcode = userPostcode => {\n  let postcodeRegEx = /[A-Z]{1,2}[0-9]{1,2} ?[0-9][A-Z]{2}/i;\n  return postcodeRegEx.test(userPostcode);\n};\nexport const AddSpaceToPostcode = userPostcode => {\n  userPostcode = userPostcode.toUpperCase();\n\n  if (!hasWhiteSpace(userPostcode)) {\n    userPostcode = userPostcode.replace(/^(.*)(\\d)(.*)/, \"$1 $2$3\"); // Adds space to the postcode\n  }\n\n  return userPostcode;\n};\nexport const FormatValidatePostcode = userPostcode => {\n  if (userPostcode !== '') {\n    AddSpaceToPostcode(userPostcode);\n\n    if (!isValidPostcode(userPostcode)) {\n      return false;\n    } else {\n      return true;\n    }\n  } else {\n    return false;\n  }\n};\nexport const isNullOrEmpty = arg => {\n  if (arg == undefined || arg == null || typeof arg == \"string\" && arg == \"\") {\n    return true;\n  } //else if (arg.toString().trim().length == 0) {\n  else if (arg.toString().length == 0) {\n      return true;\n    }\n\n  return false;\n};\nexport const getGUID = () => {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n    var r = Math.random() * 16 | 0,\n        v = c == 'x' ? r : r & 0x3 | 0x8;\n    return v.toString(16);\n  });\n};\nexport const isLibraryImage = imageUrl => {\n  if (imageUrl && (imageUrl.indexOf('/manual/') !== -1 || imageUrl.indexOf('/ids/') !== -1) || imageUrl.includes('img-placeholder.jpg')) {\n    return true;\n  } else {\n    return false;\n  }\n};\nexport const isIzmoImage = imageUrl => {\n  return imageUrl ? !isLibraryImage(imageUrl) : false;\n};\nexport const GetPhoneNumber = internal => {\n  if (internal) {\n    return process.env.NEXT_PUBLIC_INTERNAL_NUMBER;\n  } else {\n    return process.env.NEXT_PUBLIC_EXTERNAL_NUMBER;\n  }\n};\nexport const MakeVanABCheck = (make, vehicleType) => {\n  if (vehicleType === VehicleTypes.Car) {\n    if (make === \"citroen\" || make === \"fiat\" || make === \"ford\" || make === \"mercedes-benz\" || make === \"mitsubishi\" || make === \"nissan\" || make === \"peugeot\" || make === \"renault\" || make === \"toyota\" || make === \"vauxhall\" || make === \"volkswagen\") {\n      return true;\n    } else {\n      return false;\n    }\n  } else {\n    return false;\n  }\n};\nexport const MakeABCheck = (make, vehicleType) => {\n  if (vehicleType === VehicleTypes.Car) {\n    if (make === \"bmw\" || make === \"tesla\" || make === \"mercedes-benz\" || make === \"ford\" || make === \"kia\") {\n      return true;\n    } else {\n      return false;\n    }\n  } else {\n    return false;\n  }\n};\nexport const MakeContentABCheck = (make, vehicleType) => {\n  if (vehicleType === VehicleTypes.Car) {\n    if (make && make.toLowerCase() === \"seat\" || make && make.toLowerCase() === \"skoda\") {\n      return true;\n    } else {\n      return false;\n    }\n  } else {\n    return false;\n  }\n};\nexport const MakeABSplit = (make, description) => {\n  let descriptionArray = \"\";\n\n  switch (make) {\n    case \"bmw\":\n      descriptionArray = description.split(/(<p>The range also includes)/);\n      break;\n\n    case \"tesla\":\n      descriptionArray = description.split(/(<p>Tesla&rsquo;s sporty)/);\n      break;\n\n    case \"mercedes-benz\":\n      descriptionArray = description.split(/(<p>And at the other end,)/);\n      break;\n\n    case \"ford\":\n      descriptionArray = description.split(/(<p>The <a href=\")/);\n      break;\n\n    case \"kia\":\n      descriptionArray = description.split(/(<p>We love the <a href=\")/);\n      break;\n\n    default:\n      return;\n  }\n\n  return descriptionArray;\n};","map":null,"metadata":{},"sourceType":"module"}