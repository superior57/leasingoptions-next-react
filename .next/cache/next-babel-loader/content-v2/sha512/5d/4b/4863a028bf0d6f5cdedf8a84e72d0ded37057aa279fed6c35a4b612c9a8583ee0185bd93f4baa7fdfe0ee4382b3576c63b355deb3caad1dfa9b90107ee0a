{"ast":null,"code":"import _regeneratorRuntime from \"E:/current_project/PPH/tfs/Website/website/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"E:/current_project/PPH/tfs/Website/website/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { LeasingDealTypes } from \"enums/LeasingDealTypes\";\nimport { TopPageMetaDescription } from \"./seoHelper\";\nimport { GetCanonicalUrl } from \"./urlHelper\";\nimport { VehicleTypes } from \"enums/VehicleTypes\";\nimport { VehicleMetaDescription } from \"helpers/seoHelper\";\nimport { formatNumber } from 'helpers/currencyHelper';\nimport { GetFuelTypeText, GetTransmissionText } from \"helpers/enumsHelper\";\nimport moment from \"moment\";\nimport { GetTrustPilotRating } from \"business-logic/systemService\";\nexport var getLandingPageSchema = function getLandingPageSchema(leasingDealType, url) {\n  var leasingTypeText = \"\";\n\n  switch (leasingDealType) {\n    case LeasingDealTypes.Business:\n      leasingTypeText = \"Business Car Leasing\";\n      break;\n\n    case LeasingDealTypes.Personal:\n      leasingTypeText = \"Car Leasing\";\n      break;\n\n    case LeasingDealTypes.Van:\n      leasingTypeText = \"Van Leasing\";\n      break;\n  }\n\n  var webPageSchema = {\n    name: leasingTypeText,\n    type: \"WebPage\",\n    context: \"http://schema.org\",\n    description: TopPageMetaDescription(leasingDealType, url)\n  };\n  return setSchemaContextTypeProperties(JSON.stringify(webPageSchema));\n};\nexport var getWebPageSchema = function getWebPageSchema(name, description) {\n  var webPageSchema = {\n    name: name,\n    type: \"WebPage\",\n    context: \"http://schema.org\",\n    description: description\n  };\n  return setSchemaContextTypeProperties(JSON.stringify(webPageSchema));\n};\nexport var setSchemaContextTypeProperties = function setSchemaContextTypeProperties(text) {\n  return text.replace('\"type\"', '\"@type\"').replace('\"context\"', '\"@context\"');\n};\nexport var GetServiceSchema = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(vehicleType) {\n    var trustpilotRating, schema;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return GetTrustPilotRating();\n\n          case 2:\n            trustpilotRating = _context.sent;\n            schema = {\n              name: \"Leasing Options\",\n              serviceType: vehicleType == VehicleTypes.Commercial ? \"Van\" : \"Car\" + \" Leasing\",\n              context: \"http://schema.org\",\n              type: \"Service\"\n            };\n\n            if (trustpilotRating.data != null) {\n              schema.aggregateRating = {\n                type: \"AggregateRating\",\n                bestRating: 5,\n                worstRating: 0,\n                url: \"https://uk.trustpilot.com/review/leasingoptions.co.uk\",\n                ratingCount: trustpilotRating.data.reviewsCount,\n                ratingValue: trustpilotRating.data.score,\n                itemReviewed: GetLoOrganization()\n              };\n            }\n\n            return _context.abrupt(\"return\", setSchemaContextTypeProperties(JSON.stringify(schema)));\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function GetServiceSchema(_x) {\n    return _ref.apply(this, arguments);\n  };\n}(); //TODO: review all above\n\nexport var GetFaqsSchema = function GetFaqsSchema(leasingDealType, faqs) {\n  var schema = {\n    mainEntity: []\n  };\n\n  if (faqs && faqs.length > 0) {\n    var author = GetLoOrganization();\n    author.url = (leasingDealType === LeasingDealTypes.Van ? GetCanonicalUrl(\"/van-leasing\") : GetCanonicalUrl(leasingDealType == LeasingDealTypes.Business ? \"/business-car-leasing\" : \"/car-leasing\")).toLowerCase();\n\n    for (var idx = 0; idx < faqs.length; idx++) {\n      var item = faqs[idx];\n      var schemaItem = GetQuestion(item, author);\n      schema.mainEntity.push(schemaItem);\n    }\n  }\n\n  return Object.assign({\n    '@type': 'FAQPage'\n  }, schema);\n};\nexport var GetQuestion = function GetQuestion(faqItem, author) {\n  var schema = {\n    name: faqItem.question,\n    answerCount: 1,\n    author: author,\n    acceptedAnswer: GetAnswer(faqItem, author)\n  };\n  return Object.assign({\n    '@type': 'Question'\n  }, schema);\n};\nexport var GetAnswer = function GetAnswer(faqItem, author) {\n  var schema = {\n    text: faqItem.answer,\n    author: author\n  };\n  return Object.assign({\n    '@type': 'Answer'\n  }, schema);\n};\nexport var GetBreadcrumbsSchema = function GetBreadcrumbsSchema(breadcrumbs) {\n  var schema = {\n    itemListElement: []\n  };\n\n  if (breadcrumbs && breadcrumbs.length > 0) {\n    for (var idx = 0; idx < breadcrumbs.length; idx++) {\n      var item = breadcrumbs[idx];\n      var schemaItem = GetBreadcrumbsListItem(idx + 1, item);\n      schema.itemListElement.push(schemaItem);\n    }\n  }\n\n  return Object.assign({\n    '@type': 'BreadcrumbList'\n  }, schema);\n};\nexport var GetBreadcrumbsListItem = function GetBreadcrumbsListItem(idx, breadcrumbsItem) {\n  var schema = {\n    position: idx,\n    name: breadcrumbsItem.name.toUpperCase(),\n    item: GetCanonicalUrl(breadcrumbsItem.url)\n  };\n  return Object.assign({\n    '@type': 'ListItem'\n  }, schema);\n};\nexport var GetBlogPostSchema = function GetBlogPostSchema(article) {\n  var momentDate = moment(article.onDate, \"YYYY-MM-DDTHH:mm\");\n  var formattedDate = momentDate.format(\"YYYY-MM-DD\");\n  var schema = {\n    author: \"Leasing Options\",\n    publisher: GetLoOrganization(),\n    datePublished: article.onDate ? formattedDate : null,\n    description: article.metaDescription ? article.metaDescription : null,\n    headline: article.title ? article.title : null,\n    image: process.env.NEXT_PUBLIC_CDN + article.imageUrl,\n    mainEntityOfPage: article.newsUrl ? GetCanonicalUrl(\"/news/blog/\".concat(article.newsUrl)) : null,\n    sameAs: \"https://www.facebook.com/LeasingOptionsLtd/\"\n  };\n  return Object.assign({\n    '@type': 'BlogPosting'\n  }, schema);\n};\nexport var GetVehicleSchema = function GetVehicleSchema(vehicle, url, imageUrl) {\n  var schema = {\n    brand: vehicle.make,\n    model: vehicle.model,\n    vehicleConfiguration: vehicle.derivative,\n    sku: vehicle.vehicleRef,\n    name: vehicle.make + \" \" + vehicle.model + \" \" + vehicle.derivative,\n    description: VehicleMetaDescription(vehicle.vehicleType, vehicle.make, vehicle.shortModel, vehicle.derivative),\n    modelDate: null,\n    url: url,\n    image: imageUrl,\n    fuelCapacity: null,\n    fuelEfficiency: vehicle.mpg,\n    fuelType: GetFuelTypeText(vehicle.fuelType),\n    accelerationTime: null,\n    emissionsCO2: vehicle.co2 || vehicle.co2 === 0 ? \"\".concat(formatNumber(vehicle.co2), \" g/km\") : null,\n    meetsEmissionStandard: null,\n    numberOfDoors: vehicle.doors,\n    numberOfForwardGears: null,\n    payload: null,\n    vehicleSeatingCapacity: vehicle.seats,\n    vehicleSpecialUsage: \"Leasing\",\n    vehicleTransmission: vehicle.transmission ? GetTransmissionText(vehicle.transmission) : null,\n    speed: {\n      minValue: 0,\n      maxValue: null\n    },\n    offers: GetAggregateOffer(vehicle.minPrice, vehicle.maxPrice)\n  };\n  return Object.assign({\n    '@type': 'Car'\n  }, schema);\n};\nexport var GetAggregateOffer = function GetAggregateOffer(minPrice, maxPrice, count) {\n  var hasMinPrice = minPrice >= 0;\n  var hasMaxPrice = maxPrice >= 0;\n\n  if (hasMinPrice || hasMaxPrice) {\n    var min = hasMinPrice ? minPrice : maxPrice;\n    var max = hasMaxPrice ? maxPrice : minPrice;\n    var schema = {\n      priceCurrency: \"GBP\",\n      seller: GetLoOrganization(),\n      lowPrice: min,\n      highPrice: max,\n      offerCount: count\n    };\n    return Object.assign({\n      '@type': 'AggregateOffer'\n    }, schema);\n  }\n\n  return null;\n};\nexport var GetLoOrganization = function GetLoOrganization() {\n  var schema = {\n    name: \"Leasing Options\",\n    logo: GetLogo(GetCanonicalUrl(\"/images/logo.png\"))\n  };\n  return Object.assign({\n    '@type': 'Organization'\n  }, schema);\n};\nexport var GetLogo = function GetLogo(url) {\n  var schema = {\n    url: url\n  };\n  return Object.assign({\n    '@type': 'ImageObject'\n  }, schema);\n};\nexport var GetSerializedSchema = function GetSerializedSchema(shemaObject) {\n  return JSON.stringify(Object.assign({\n    '@context': 'http://schema.org'\n  }, shemaObject), function (key, value) {\n    if (value !== null) return value;\n  });\n};","map":null,"metadata":{},"sourceType":"module"}