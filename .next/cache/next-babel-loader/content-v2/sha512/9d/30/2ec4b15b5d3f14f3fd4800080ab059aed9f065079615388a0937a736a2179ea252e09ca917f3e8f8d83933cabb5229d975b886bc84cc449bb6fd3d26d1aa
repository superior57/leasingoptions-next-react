{"ast":null,"code":"import { LeasingDealTypes } from \"enums/LeasingDealTypes\";\nimport { TopPageMetaDescription } from \"./seoHelper\";\nimport { GetCanonicalUrl } from \"./urlHelper\";\nimport { VehicleTypes } from \"enums/VehicleTypes\";\nimport { VehicleMetaDescription } from \"helpers/seoHelper\";\nimport { formatNumber } from 'helpers/currencyHelper';\nimport { GetFuelTypeText, GetTransmissionText } from \"helpers/enumsHelper\";\nimport moment from \"moment\";\nimport { GetTrustPilotRating } from \"business-logic/systemService\";\nexport const getLandingPageSchema = (leasingDealType, url) => {\n  let leasingTypeText = \"\";\n\n  switch (leasingDealType) {\n    case LeasingDealTypes.Business:\n      leasingTypeText = \"Business Car Leasing\";\n      break;\n\n    case LeasingDealTypes.Personal:\n      leasingTypeText = \"Car Leasing\";\n      break;\n\n    case LeasingDealTypes.Van:\n      leasingTypeText = \"Van Leasing\";\n      break;\n  }\n\n  const webPageSchema = {\n    name: leasingTypeText,\n    type: \"WebPage\",\n    context: \"http://schema.org\",\n    description: TopPageMetaDescription(leasingDealType, url)\n  };\n  return setSchemaContextTypeProperties(JSON.stringify(webPageSchema));\n};\nexport const getWebPageSchema = (name, description) => {\n  const webPageSchema = {\n    name: name,\n    type: \"WebPage\",\n    context: \"http://schema.org\",\n    description: description\n  };\n  return setSchemaContextTypeProperties(JSON.stringify(webPageSchema));\n};\nexport const setSchemaContextTypeProperties = text => {\n  return text.replace('\"type\"', '\"@type\"').replace('\"context\"', '\"@context\"');\n};\nexport const GetServiceSchema = async vehicleType => {\n  var trustpilotRating = await GetTrustPilotRating();\n  let schema = {\n    name: \"Leasing Options\",\n    serviceType: vehicleType == VehicleTypes.Commercial ? \"Van\" : \"Car\" + \" Leasing\",\n    context: \"http://schema.org\",\n    type: \"Service\"\n  };\n\n  if (trustpilotRating.data != null) {\n    schema.aggregateRating = {\n      type: \"AggregateRating\",\n      bestRating: 5,\n      worstRating: 0,\n      url: \"https://uk.trustpilot.com/review/leasingoptions.co.uk\",\n      ratingCount: trustpilotRating.data.reviewsCount,\n      ratingValue: trustpilotRating.data.score,\n      itemReviewed: GetLoOrganization()\n    };\n  }\n\n  return setSchemaContextTypeProperties(JSON.stringify(schema));\n}; //TODO: review all above\n\nexport const GetFaqsSchema = (leasingDealType, faqs) => {\n  let schema = {\n    mainEntity: []\n  };\n\n  if (faqs && faqs.length > 0) {\n    let author = GetLoOrganization();\n    author.url = (leasingDealType === LeasingDealTypes.Van ? GetCanonicalUrl(\"/van-leasing\") : GetCanonicalUrl(leasingDealType == LeasingDealTypes.Business ? \"/business-car-leasing\" : \"/car-leasing\")).toLowerCase();\n\n    for (let idx = 0; idx < faqs.length; idx++) {\n      const item = faqs[idx];\n      const schemaItem = GetQuestion(item, author);\n      schema.mainEntity.push(schemaItem);\n    }\n  }\n\n  return Object.assign({\n    '@type': 'FAQPage'\n  }, schema);\n};\nexport const GetQuestion = (faqItem, author) => {\n  let schema = {\n    name: faqItem.question,\n    answerCount: 1,\n    author: author,\n    acceptedAnswer: GetAnswer(faqItem, author)\n  };\n  return Object.assign({\n    '@type': 'Question'\n  }, schema);\n};\nexport const GetAnswer = (faqItem, author) => {\n  let schema = {\n    text: faqItem.answer,\n    author: author\n  };\n  return Object.assign({\n    '@type': 'Answer'\n  }, schema);\n};\nexport const GetBreadcrumbsSchema = breadcrumbs => {\n  let schema = {\n    itemListElement: []\n  };\n\n  if (breadcrumbs && breadcrumbs.length > 0) {\n    for (let idx = 0; idx < breadcrumbs.length; idx++) {\n      const item = breadcrumbs[idx];\n      const schemaItem = GetBreadcrumbsListItem(idx + 1, item);\n      schema.itemListElement.push(schemaItem);\n    }\n  }\n\n  return Object.assign({\n    '@type': 'BreadcrumbList'\n  }, schema);\n};\nexport const GetBreadcrumbsListItem = (idx, breadcrumbsItem) => {\n  let schema = {\n    position: idx,\n    name: breadcrumbsItem.name.toUpperCase(),\n    item: GetCanonicalUrl(breadcrumbsItem.url)\n  };\n  return Object.assign({\n    '@type': 'ListItem'\n  }, schema);\n};\nexport const GetBlogPostSchema = article => {\n  let momentDate = moment(article.onDate, \"YYYY-MM-DDTHH:mm\");\n  let formattedDate = momentDate.format(\"YYYY-MM-DD\");\n  let schema = {\n    author: \"Leasing Options\",\n    publisher: GetLoOrganization(),\n    datePublished: article.onDate ? formattedDate : null,\n    description: article.metaDescription ? article.metaDescription : null,\n    headline: article.title ? article.title : null,\n    image: process.env.NEXT_PUBLIC_CDN + article.imageUrl,\n    mainEntityOfPage: article.newsUrl ? GetCanonicalUrl(`/news/blog/${article.newsUrl}`) : null,\n    sameAs: \"https://www.facebook.com/LeasingOptionsLtd/\"\n  };\n  return Object.assign({\n    '@type': 'BlogPosting'\n  }, schema);\n};\nexport const GetVehicleSchema = (vehicle, url, imageUrl) => {\n  let schema = {\n    brand: vehicle.make,\n    model: vehicle.model,\n    vehicleConfiguration: vehicle.derivative,\n    sku: vehicle.vehicleRef,\n    name: vehicle.make + \" \" + vehicle.model + \" \" + vehicle.derivative,\n    description: VehicleMetaDescription(vehicle.vehicleType, vehicle.make, vehicle.shortModel, vehicle.derivative),\n    modelDate: null,\n    url: url,\n    image: imageUrl,\n    fuelCapacity: null,\n    fuelEfficiency: vehicle.mpg,\n    fuelType: GetFuelTypeText(vehicle.fuelType),\n    accelerationTime: null,\n    emissionsCO2: vehicle.co2 || vehicle.co2 === 0 ? `${formatNumber(vehicle.co2)} g/km` : null,\n    meetsEmissionStandard: null,\n    numberOfDoors: vehicle.doors,\n    numberOfForwardGears: null,\n    payload: null,\n    vehicleSeatingCapacity: vehicle.seats,\n    vehicleSpecialUsage: \"Leasing\",\n    vehicleTransmission: vehicle.transmission ? GetTransmissionText(vehicle.transmission) : null,\n    speed: {\n      minValue: 0,\n      maxValue: null\n    },\n    offers: GetAggregateOffer(vehicle.minPrice, vehicle.maxPrice)\n  };\n  return Object.assign({\n    '@type': 'Car'\n  }, schema);\n};\nexport const GetAggregateOffer = (minPrice, maxPrice, count) => {\n  const hasMinPrice = minPrice >= 0;\n  const hasMaxPrice = maxPrice >= 0;\n\n  if (hasMinPrice || hasMaxPrice) {\n    let min = hasMinPrice ? minPrice : maxPrice;\n    let max = hasMaxPrice ? maxPrice : minPrice;\n    let schema = {\n      priceCurrency: \"GBP\",\n      seller: GetLoOrganization(),\n      lowPrice: min,\n      highPrice: max,\n      offerCount: count\n    };\n    return Object.assign({\n      '@type': 'AggregateOffer'\n    }, schema);\n  }\n\n  return null;\n};\nexport const GetLoOrganization = () => {\n  let schema = {\n    name: \"Leasing Options\",\n    logo: GetLogo(GetCanonicalUrl(\"/images/logo.png\"))\n  };\n  return Object.assign({\n    '@type': 'Organization'\n  }, schema);\n};\nexport const GetLogo = url => {\n  let schema = {\n    url: url\n  };\n  return Object.assign({\n    '@type': 'ImageObject'\n  }, schema);\n};\nexport const GetSerializedSchema = shemaObject => {\n  return JSON.stringify(Object.assign({\n    '@context': 'http://schema.org'\n  }, shemaObject), (key, value) => {\n    if (value !== null) return value;\n  });\n};","map":{"version":3,"sources":["E:/current_project/PPH/tfs/Website/Website/helpers/schemaHelper.tsx"],"names":["LeasingDealTypes","TopPageMetaDescription","GetCanonicalUrl","VehicleTypes","VehicleMetaDescription","formatNumber","GetFuelTypeText","GetTransmissionText","moment","GetTrustPilotRating","getLandingPageSchema","leasingDealType","url","leasingTypeText","Business","Personal","Van","webPageSchema","name","type","context","description","setSchemaContextTypeProperties","JSON","stringify","getWebPageSchema","text","replace","GetServiceSchema","vehicleType","trustpilotRating","schema","serviceType","Commercial","data","aggregateRating","bestRating","worstRating","ratingCount","reviewsCount","ratingValue","score","itemReviewed","GetLoOrganization","GetFaqsSchema","faqs","mainEntity","length","author","toLowerCase","idx","item","schemaItem","GetQuestion","push","Object","assign","faqItem","question","answerCount","acceptedAnswer","GetAnswer","answer","GetBreadcrumbsSchema","breadcrumbs","itemListElement","GetBreadcrumbsListItem","breadcrumbsItem","position","toUpperCase","GetBlogPostSchema","article","momentDate","onDate","formattedDate","format","publisher","datePublished","metaDescription","headline","title","image","process","env","NEXT_PUBLIC_CDN","imageUrl","mainEntityOfPage","newsUrl","sameAs","GetVehicleSchema","vehicle","brand","make","model","vehicleConfiguration","derivative","sku","vehicleRef","shortModel","modelDate","fuelCapacity","fuelEfficiency","mpg","fuelType","accelerationTime","emissionsCO2","co2","meetsEmissionStandard","numberOfDoors","doors","numberOfForwardGears","payload","vehicleSeatingCapacity","seats","vehicleSpecialUsage","vehicleTransmission","transmission","speed","minValue","maxValue","offers","GetAggregateOffer","minPrice","maxPrice","count","hasMinPrice","hasMaxPrice","min","max","priceCurrency","seller","lowPrice","highPrice","offerCount","logo","GetLogo","GetSerializedSchema","shemaObject","key","value"],"mappings":"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","sourcesContent":["import { LeasingDealTypes } from \"enums/LeasingDealTypes\";\r\nimport { TopPageMetaDescription } from \"./seoHelper\";\r\nimport { FaqItem } from \"types/FaqItem\";\r\nimport { GetCanonicalUrl } from \"./urlHelper\";\r\nimport { VehicleTypes } from \"enums/VehicleTypes\";\r\nimport { Vehicle } from 'types/vehicles/Vehicle';\r\nimport { BreadcrumbsItem } from 'types/infrastructure/BreadcrumbsItem';\r\nimport { WebPageSchema } from \"types/schema/WebPageSchema\";\r\nimport { FaqPageSchema } from \"types/schema/FaqPageSchema\";\r\nimport { ServiceSchema } from \"types/schema/ServiceSchema\";\r\nimport { VehicleSchema } from \"types/schema/VehicleSchema\";\r\nimport { BlogSchema } from \"types/schema/BlogSchema\";\r\nimport { BreadcrumbsSchema, BreadcrumbsElement } from \"types/schema/BreadcrumbsSchema\";\r\nimport { Organization } from \"types/schema/Organization\";\r\nimport { Logo } from \"types/schema/Logo\";\r\nimport { Question } from \"types/schema/Question\";\r\nimport { Answer } from \"types/schema/Answer\";\r\nimport { AggregateOffer } from \"types/schema/AggregateOffer\";\r\nimport { VehicleMetaDescription } from \"helpers/seoHelper\";\r\nimport { formatNumber } from 'helpers/currencyHelper';\r\nimport { GetFuelTypeText, GetTransmissionText } from \"helpers/enumsHelper\";\r\nimport moment from \"moment\";\r\nimport { GetTrustPilotRating } from \"business-logic/systemService\";\r\n\r\nexport const getLandingPageSchema = (leasingDealType: LeasingDealTypes, url: string) => {\r\n\r\n    let leasingTypeText = \"\";\r\n\r\n    switch (leasingDealType) {\r\n        case LeasingDealTypes.Business:\r\n            leasingTypeText = \"Business Car Leasing\";\r\n            break;\r\n        case LeasingDealTypes.Personal:\r\n            leasingTypeText = \"Car Leasing\";\r\n            break;\r\n        case LeasingDealTypes.Van:\r\n            leasingTypeText = \"Van Leasing\";\r\n            break;\r\n    }\r\n\r\n    const webPageSchema: WebPageSchema = {\r\n        name: leasingTypeText,\r\n        type: \"WebPage\",\r\n        context: \"http://schema.org\",\r\n        description: TopPageMetaDescription(leasingDealType, url)\r\n    }\r\n\r\n    return setSchemaContextTypeProperties(JSON.stringify(webPageSchema));\r\n}\r\n\r\nexport const getWebPageSchema = (name: string, description: string) => {\r\n    const webPageSchema: WebPageSchema = {\r\n        name: name,\r\n        type: \"WebPage\",\r\n        context: \"http://schema.org\",\r\n        description: description\r\n    }\r\n\r\n    return setSchemaContextTypeProperties(JSON.stringify(webPageSchema));\r\n}\r\n\r\n\r\n\r\nexport const setSchemaContextTypeProperties = (text: string) => {\r\n    return text.replace('\"type\"', '\"@type\"').replace('\"context\"', '\"@context\"')\r\n}\r\n\r\nexport const GetServiceSchema = async (vehicleType: VehicleTypes) => {\r\n\r\n    var trustpilotRating = await GetTrustPilotRating();\r\n\r\n    let schema: ServiceSchema =\r\n    {\r\n        name: \"Leasing Options\",\r\n        serviceType: vehicleType == VehicleTypes.Commercial ? \"Van\" : \"Car\" + \" Leasing\",\r\n        context: \"http://schema.org\",\r\n        type: \"Service\"\r\n    };\r\n\r\n    if (trustpilotRating.data != null) {\r\n        schema.aggregateRating =\r\n        {\r\n            type: \"AggregateRating\",\r\n            bestRating: 5,\r\n            worstRating: 0,\r\n            url: \"https://uk.trustpilot.com/review/leasingoptions.co.uk\",\r\n            ratingCount: trustpilotRating.data.reviewsCount,\r\n            ratingValue: trustpilotRating.data.score,\r\n            itemReviewed: GetLoOrganization()\r\n        };\r\n    }\r\n\r\n    return setSchemaContextTypeProperties(JSON.stringify(schema));\r\n}\r\n\r\n\r\n\r\n//TODO: review all above\r\nexport const GetFaqsSchema = (leasingDealType: LeasingDealTypes, faqs: Array<FaqItem>): FaqPageSchema => {\r\n    let schema: FaqPageSchema = {\r\n        mainEntity: []\r\n    };\r\n\r\n    if (faqs && faqs.length > 0) {\r\n        let author: Organization = GetLoOrganization();\r\n        author.url = (leasingDealType === LeasingDealTypes.Van ? GetCanonicalUrl(\"/van-leasing\") : GetCanonicalUrl(leasingDealType == LeasingDealTypes.Business ? \"/business-car-leasing\" : \"/car-leasing\")).toLowerCase();\r\n\r\n        for (let idx = 0; idx < faqs.length; idx++) {\r\n            const item: FaqItem = faqs[idx];\r\n            const schemaItem: Question = GetQuestion(item, author);\r\n\r\n            schema.mainEntity.push(schemaItem);\r\n        }\r\n    }\r\n\r\n    return Object.assign({ '@type': 'FAQPage' }, schema);\r\n}\r\n\r\nexport const GetQuestion = (faqItem: FaqItem, author: Organization): Question => {\r\n    let schema: Question = {\r\n        name: faqItem.question,\r\n        answerCount: 1,\r\n        author: author,\r\n        acceptedAnswer: GetAnswer(faqItem, author)\r\n    };\r\n\r\n    return Object.assign({ '@type': 'Question' }, schema);\r\n}\r\n\r\nexport const GetAnswer = (faqItem: FaqItem, author: Organization): Answer => {\r\n    let schema: Answer =\r\n    {\r\n        text: faqItem.answer,\r\n        author: author\r\n    };\r\n\r\n    return Object.assign({ '@type': 'Answer' }, schema);\r\n}\r\n\r\nexport const GetBreadcrumbsSchema = (breadcrumbs: BreadcrumbsItem[]): BreadcrumbsSchema => {\r\n    let schema: BreadcrumbsSchema = {\r\n        itemListElement: []\r\n    };\r\n\r\n    if (breadcrumbs && breadcrumbs.length > 0) {\r\n        for (let idx = 0; idx < breadcrumbs.length; idx++) {\r\n            const item: BreadcrumbsItem = breadcrumbs[idx];\r\n            const schemaItem: BreadcrumbsElement = GetBreadcrumbsListItem(idx + 1, item);\r\n\r\n            schema.itemListElement.push(schemaItem);\r\n        }\r\n    }\r\n\r\n    return Object.assign({ '@type': 'BreadcrumbList' }, schema);\r\n}\r\n\r\nexport const GetBreadcrumbsListItem = (idx: number, breadcrumbsItem: BreadcrumbsItem): BreadcrumbsElement => {\r\n    let schema: BreadcrumbsElement = {\r\n        position: idx,\r\n        name: breadcrumbsItem.name.toUpperCase(),\r\n        item: GetCanonicalUrl(breadcrumbsItem.url)\r\n    };\r\n\r\n    return Object.assign({ '@type': 'ListItem' }, schema);\r\n}\r\n\r\nexport const GetBlogPostSchema = (article: any): BlogSchema => {\r\n    let momentDate = moment(article.onDate, \"YYYY-MM-DDTHH:mm\");\r\n    let formattedDate = momentDate.format(\"YYYY-MM-DD\");\r\n    let schema: BlogSchema = {\r\n        author: \"Leasing Options\",\r\n        publisher: GetLoOrganization(),\r\n        datePublished: article.onDate ? formattedDate : null,\r\n        description: article.metaDescription ? article.metaDescription : null,\r\n        headline: article.title ? article.title : null,\r\n        image: process.env.NEXT_PUBLIC_CDN + article.imageUrl,\r\n        mainEntityOfPage: article.newsUrl ? GetCanonicalUrl(`/news/blog/${article.newsUrl}`) : null,\r\n        sameAs: \"https://www.facebook.com/LeasingOptionsLtd/\"\r\n    };\r\n\r\n    return Object.assign({ '@type': 'BlogPosting' }, schema);\r\n}\r\n\r\nexport const GetVehicleSchema = (vehicle: Vehicle, url: string, imageUrl: string): VehicleSchema => {\r\n    let schema: VehicleSchema = {\r\n        brand: vehicle.make,\r\n        model: vehicle.model,\r\n        vehicleConfiguration: vehicle.derivative,\r\n        sku: vehicle.vehicleRef,\r\n        name: vehicle.make + \" \" + vehicle.model + \" \" + vehicle.derivative,\r\n        description: VehicleMetaDescription(vehicle.vehicleType, vehicle.make, vehicle.shortModel, vehicle.derivative),\r\n        modelDate: null,\r\n\r\n        url: url,\r\n        image: imageUrl,\r\n\r\n        fuelCapacity: null,\r\n        fuelEfficiency: vehicle.mpg,\r\n        fuelType: GetFuelTypeText(vehicle.fuelType),\r\n        accelerationTime: null,\r\n        emissionsCO2: vehicle.co2 || vehicle.co2 === 0 ? `${formatNumber(vehicle.co2)} g/km` : null,\r\n        meetsEmissionStandard: null,\r\n        numberOfDoors: vehicle.doors,\r\n        numberOfForwardGears: null,\r\n        payload: null,\r\n        vehicleSeatingCapacity: vehicle.seats,\r\n        vehicleSpecialUsage: \"Leasing\",\r\n        vehicleTransmission: vehicle.transmission ? GetTransmissionText(vehicle.transmission) : null,\r\n        speed: {\r\n            minValue: 0,\r\n            maxValue: null\r\n        },\r\n        offers: GetAggregateOffer(vehicle.minPrice, vehicle.maxPrice)\r\n    };\r\n\r\n    return Object.assign({ '@type': 'Car' }, schema);\r\n}\r\n\r\nexport const GetAggregateOffer = (minPrice?: number, maxPrice?: number, count?: number): AggregateOffer => {\r\n    const hasMinPrice = (minPrice >= 0);\r\n    const hasMaxPrice = (maxPrice >= 0);\r\n\r\n    if (hasMinPrice || hasMaxPrice) {\r\n        let min = hasMinPrice ? minPrice : maxPrice;\r\n        let max = hasMaxPrice ? maxPrice : minPrice;\r\n\r\n        let schema: AggregateOffer = {\r\n            priceCurrency: \"GBP\",\r\n            seller: GetLoOrganization(),\r\n\r\n            lowPrice: min,\r\n            highPrice: max,\r\n            offerCount: count\r\n        };\r\n\r\n        return Object.assign({ '@type': 'AggregateOffer' }, schema);\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\nexport const GetLoOrganization = (): Organization => {\r\n    let schema: Organization = {\r\n        name: \"Leasing Options\",\r\n        logo: GetLogo(GetCanonicalUrl(\"/images/logo.png\"))\r\n    };\r\n\r\n    return Object.assign({ '@type': 'Organization' }, schema);\r\n}\r\n\r\nexport const GetLogo = (url: string): Logo => {\r\n    let schema: Logo = {\r\n        url: url\r\n    };\r\n\r\n    return Object.assign({ '@type': 'ImageObject' }, schema);\r\n}\r\n\r\nexport const GetSerializedSchema = (shemaObject): string => {\r\n    return JSON.stringify(Object.assign({ '@context': 'http://schema.org' }, shemaObject), (key, value) => {\r\n        if (value !== null) return value;\r\n    })\r\n}"]},"metadata":{},"sourceType":"module"}