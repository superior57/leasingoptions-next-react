{"ast":null,"code":"\"use strict\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nexports.__esModule = true;\nexports[\"default\"] = resolveRewrites;\n\nvar _pathMatch = _interopRequireDefault(require(\"./path-match\"));\n\nvar _prepareDestination = _interopRequireDefault(require(\"./prepare-destination\"));\n\nvar _normalizeTrailingSlash = require(\"../../../../client/normalize-trailing-slash\");\n\nvar _normalizeLocalePath = require(\"../../i18n/normalize-locale-path\");\n\nvar _parseRelativeUrl = require(\"./parse-relative-url\");\n\nvar _router = require(\"../router\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar customRouteMatcher = (0, _pathMatch[\"default\"])(true);\n\nfunction resolveRewrites(asPath, pages, rewrites, query, resolveHref, locales) {\n  var matchedPage = false;\n  var parsedAs = (0, _parseRelativeUrl.parseRelativeUrl)(asPath);\n  var fsPathname = (0, _normalizeTrailingSlash.removePathTrailingSlash)((0, _normalizeLocalePath.normalizeLocalePath)((0, _router.delBasePath)(parsedAs.pathname), locales).pathname);\n  var resolvedHref;\n\n  if (!pages.includes(fsPathname)) {\n    var _iterator = _createForOfIteratorHelper(rewrites),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var rewrite = _step.value;\n        var matcher = customRouteMatcher(rewrite.source);\n        var params = matcher(parsedAs.pathname);\n\n        if (params) {\n          if (!rewrite.destination) {\n            // this is a proxied rewrite which isn't handled on the client\n            break;\n          }\n\n          var destRes = (0, _prepareDestination[\"default\"])(rewrite.destination, params, query, true);\n          parsedAs = destRes.parsedDestination;\n          asPath = destRes.newUrl;\n          Object.assign(query, destRes.parsedDestination.query);\n          fsPathname = (0, _normalizeTrailingSlash.removePathTrailingSlash)((0, _normalizeLocalePath.normalizeLocalePath)((0, _router.delBasePath)(asPath), locales).pathname);\n\n          if (pages.includes(fsPathname)) {\n            // check if we now match a page as this means we are done\n            // resolving the rewrites\n            matchedPage = true;\n            resolvedHref = fsPathname;\n            break;\n          } // check if we match a dynamic-route, if so we break the rewrites chain\n\n\n          resolvedHref = resolveHref(fsPathname);\n\n          if (resolvedHref !== asPath && pages.includes(resolvedHref)) {\n            matchedPage = true;\n            break;\n          }\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n\n  return {\n    asPath: asPath,\n    parsedAs: parsedAs,\n    matchedPage: matchedPage,\n    resolvedHref: resolvedHref\n  };\n}","map":{"version":3,"sources":["../../../../../next-server/lib/router/utils/resolve-rewrites.ts"],"names":["customRouteMatcher","matchedPage","parsedAs","fsPathname","pages","matcher","rewrite","params","destRes","asPath","Object","resolvedHref","resolveHref"],"mappings":";;;;;;;;;;;AACA,IAAA,UAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,cAAA,CAAA,CAAA;;AACA,IAAA,mBAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,uBAAA,CAAA,CAAA;;AAEA,IAAA,uBAAA,GAAA,OAAA,CAAA,6CAAA,CAAA;;AACA,IAAA,oBAAA,GAAA,OAAA,CAAA,kCAAA,CAAA;;AACA,IAAA,iBAAA,GAAA,OAAA,CAAA,sBAAA,CAAA;;AACA,IAAA,OAAA,GAAA,OAAA,CAAA,WAAA,CAAA;;;;;;AAEA;;AAAA,IAAMA,kBAAkB,GAAG,CAAA,GAAA,UAAA,WAAA,EAA3B,IAA2B,CAA3B;;AAEe,SAAA,eAAA,CAAA,MAAA,EAAA,KAAA,EAAA,QAAA,EAAA,KAAA,EAAA,WAAA,EAAA,OAAA,EAYb;AACA,MAAIC,WAAW,GAAf,KAAA;AACA,MAAIC,QAAQ,GAAG,CAAA,GAAA,iBAAA,CAAA,gBAAA,EAAf,MAAe,CAAf;AACA,MAAIC,UAAU,GAAG,CAAA,GAAA,uBAAA,CAAA,uBAAA,EACf,CAAA,GAAA,oBAAA,CAAA,mBAAA,EAAoB,CAAA,GAAA,OAAA,CAAA,WAAA,EAAYD,QAAQ,CAAxC,QAAoB,CAApB,EAAA,OAAA,EADF,QAAiB,CAAjB;AAGA,MAAA,YAAA;;AAEA,MAAI,CAACE,KAAK,CAALA,QAAAA,CAAL,UAAKA,CAAL,EAAiC;AAAA,+CAC/B,QAD+B;AAAA;;AAAA;AAC/B,0DAAgC;AAAA,YAAhC,OAAgC;AAC9B,YAAMC,OAAO,GAAGL,kBAAkB,CAACM,OAAO,CAA1C,MAAkC,CAAlC;AACA,YAAMC,MAAM,GAAGF,OAAO,CAACH,QAAQ,CAA/B,QAAsB,CAAtB;;AAEA,YAAA,MAAA,EAAY;AACV,cAAI,CAACI,OAAO,CAAZ,WAAA,EAA0B;AACxB;AACA;AAEF;;AAAA,cAAME,OAAO,GAAG,CAAA,GAAA,mBAAA,WAAA,EACdF,OAAO,CADO,WAAA,EAAA,MAAA,EAAA,KAAA,EAAhB,IAAgB,CAAhB;AAMAJ,UAAAA,QAAQ,GAAGM,OAAO,CAAlBN,iBAAAA;AACAO,UAAAA,MAAM,GAAGD,OAAO,CAAhBC,MAAAA;AACAC,UAAAA,MAAM,CAANA,MAAAA,CAAAA,KAAAA,EAAqBF,OAAO,CAAPA,iBAAAA,CAArBE,KAAAA;AAEAP,UAAAA,UAAU,GAAG,CAAA,GAAA,uBAAA,CAAA,uBAAA,EACX,CAAA,GAAA,oBAAA,CAAA,mBAAA,EAAoB,CAAA,GAAA,OAAA,CAAA,WAAA,EAApB,MAAoB,CAApB,EAAA,OAAA,EADFA,QAAa,CAAbA;;AAIA,cAAIC,KAAK,CAALA,QAAAA,CAAJ,UAAIA,CAAJ,EAAgC;AAC9B;AACA;AACAH,YAAAA,WAAW,GAAXA,IAAAA;AACAU,YAAAA,YAAY,GAAZA,UAAAA;AACA;AAGF,WA3BU,CA2BV;;;AACAA,UAAAA,YAAY,GAAGC,WAAW,CAA1BD,UAA0B,CAA1BA;;AAEA,cAAIA,YAAY,KAAZA,MAAAA,IAA2BP,KAAK,CAALA,QAAAA,CAA/B,YAA+BA,CAA/B,EAA6D;AAC3DH,YAAAA,WAAW,GAAXA,IAAAA;AACA;AAEH;AACF;AACF;AAzCgC;AAAA;AAAA;AAAA;AAAA;AA0CjC;;AAAA,SAAO;AACLQ,IAAAA,MADK,EACLA,MADK;AAELP,IAAAA,QAFK,EAELA,QAFK;AAGLD,IAAAA,WAHK,EAGLA,WAHK;AAILU,IAAAA,YAJF,EAIEA;AAJK,GAAP;AAMD","sourcesContent":["import { ParsedUrlQuery } from 'querystring'\nimport pathMatch from './path-match'\nimport prepareDestination from './prepare-destination'\nimport { Rewrite } from '../../../../lib/load-custom-routes'\nimport { removePathTrailingSlash } from '../../../../client/normalize-trailing-slash'\nimport { normalizeLocalePath } from '../../i18n/normalize-locale-path'\nimport { parseRelativeUrl } from './parse-relative-url'\nimport { delBasePath } from '../router'\n\nconst customRouteMatcher = pathMatch(true)\n\nexport default function resolveRewrites(\n  asPath: string,\n  pages: string[],\n  rewrites: Rewrite[],\n  query: ParsedUrlQuery,\n  resolveHref: (path: string) => string,\n  locales?: string[]\n): {\n  matchedPage: boolean\n  parsedAs: ReturnType<typeof parseRelativeUrl>\n  asPath: string\n  resolvedHref?: string\n} {\n  let matchedPage = false\n  let parsedAs = parseRelativeUrl(asPath)\n  let fsPathname = removePathTrailingSlash(\n    normalizeLocalePath(delBasePath(parsedAs.pathname), locales).pathname\n  )\n  let resolvedHref\n\n  if (!pages.includes(fsPathname)) {\n    for (const rewrite of rewrites) {\n      const matcher = customRouteMatcher(rewrite.source)\n      const params = matcher(parsedAs.pathname)\n\n      if (params) {\n        if (!rewrite.destination) {\n          // this is a proxied rewrite which isn't handled on the client\n          break\n        }\n        const destRes = prepareDestination(\n          rewrite.destination,\n          params,\n          query,\n          true\n        )\n        parsedAs = destRes.parsedDestination\n        asPath = destRes.newUrl\n        Object.assign(query, destRes.parsedDestination.query)\n\n        fsPathname = removePathTrailingSlash(\n          normalizeLocalePath(delBasePath(asPath), locales).pathname\n        )\n\n        if (pages.includes(fsPathname)) {\n          // check if we now match a page as this means we are done\n          // resolving the rewrites\n          matchedPage = true\n          resolvedHref = fsPathname\n          break\n        }\n\n        // check if we match a dynamic-route, if so we break the rewrites chain\n        resolvedHref = resolveHref(fsPathname)\n\n        if (resolvedHref !== asPath && pages.includes(resolvedHref)) {\n          matchedPage = true\n          break\n        }\n      }\n    }\n  }\n  return {\n    asPath,\n    parsedAs,\n    matchedPage,\n    resolvedHref,\n  }\n}\n"]},"metadata":{},"sourceType":"script"}