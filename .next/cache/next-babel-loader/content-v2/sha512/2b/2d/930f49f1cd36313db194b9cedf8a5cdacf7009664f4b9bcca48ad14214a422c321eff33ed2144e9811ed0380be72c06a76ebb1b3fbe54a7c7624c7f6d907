{"ast":null,"code":"import { VehicleTypes } from 'enums/VehicleTypes';\nimport { CustomContentTypes } from 'enums/CustomContentTypes';\nimport { GetCanonicalUrl } from 'helpers/urlHelper';\nimport { getLOSSRFetchHeaders } from 'helpers/apiHelper';\nimport { GetProperManufacturerName, GetFriendlyName } from 'helpers/helpers';\nimport { isNullOrWhiteSpace, capitalize } from 'helpers/stringHelper';\nimport { getBaseUrl } from 'helpers/urlsHelper';\nimport { ModelPageMetaTitle, ModelPageMetaDescription } from 'helpers/seoHelper';\nimport { getVehiclesFilter } from 'helpers/vehiclesFilterHelper';\nimport { dispatchUpdateUserPostcode, dispatchUpdateVehicleFilterSearch } from 'redux/dispatches/dispatchs';\nimport { ContentService } from 'business-logic/contentService';\nimport { GetModels, GetVehicleAlternativeModels, GetRecommendedForModel, GetVehiclePreviews, GetModelReview, GetCapId, GetVehicleImage, GetModelGalleryImages } from 'business-logic/vehicleService';\nexport const getProps = async context => {\n  var _models$find;\n\n  dispatchUpdateUserPostcode(context);\n  const dealSelector = context.store.getState().dealSelector;\n  const userPostcode = context.store.getState().userPostcode;\n  const vehiclesFilter = getVehiclesFilter(context);\n  vehiclesFilter.leasingDealType = dealSelector;\n  vehiclesFilter.maintenance = true;\n  await dispatchUpdateVehicleFilterSearch(context, vehiclesFilter);\n  const fetchHeaders = getLOSSRFetchHeaders(context);\n  const paginationCriteria = {\n    pageIndex: 1,\n    pageSize: 12\n  };\n  const models = (await GetModels(vehiclesFilter.vehicleType, vehiclesFilter.manufacturerUrl, fetchHeaders)).data;\n  const shortModText = (_models$find = models.find(x => x.id == vehiclesFilter.shortModTextUrl)) === null || _models$find === void 0 ? void 0 : _models$find.text;\n  const alternativeModels = (await GetVehicleAlternativeModels(vehiclesFilter.vehicleType, vehiclesFilter.manufacturerUrl, vehiclesFilter.shortModTextUrl, fetchHeaders)).data; //Why do we need them on server-side?\n\n  let topRecommended = await GetRecommendedForModel(vehiclesFilter.pricingType, userPostcode, vehiclesFilter.vehicleType, vehiclesFilter.leasingDealType, vehiclesFilter.manufacturerUrl, vehiclesFilter.shortModTextUrl, fetchHeaders);\n  let vehiclePreviews = await GetVehiclePreviews(vehiclesFilter, paginationCriteria, undefined, fetchHeaders);\n  let modelReview = (await GetModelReview(vehiclesFilter.vehicleType, vehiclesFilter.manufacturerUrl, vehiclesFilter.shortModTextUrl, null, fetchHeaders)).data;\n  let capId = (await GetCapId(vehiclesFilter.manufacturerUrl, vehiclesFilter.shortModTextUrl, fetchHeaders)).data;\n  let modelImage = (await GetVehicleImage(vehiclesFilter.vehicleType, capId.data, fetchHeaders)).data;\n  let modelGallery = (await GetModelGalleryImages(vehiclesFilter.vehicleType, capId.data, 750, 500)).data;\n  let pageContent = (await ContentService.GetModelPageContent(CustomContentTypes.ModelAttachments, vehiclesFilter.leasingDealType, vehiclesFilter.manufacturerUrl, shortModText)).data;\n  const leasingDealType = vehiclesFilter.leasingDealType;\n  const vehicleType = vehiclesFilter.vehicleType;\n  const makeUrl = vehiclesFilter.manufacturerUrl;\n  const makeName = capitalize(GetProperManufacturerName(GetFriendlyName(makeUrl)).toUpperCase()); //TODO: get original make name instead of GetFriendlyName\n\n  const modelName = capitalize(vehiclesFilter.modelUrl.toUpperCase());\n  const title = `${makeName} ${modelName} ${vehicleType === VehicleTypes.Commercial ? 'Van' : 'Car'} Lease`;\n  const description = (pageContent === null || pageContent === void 0 ? void 0 : pageContent.text) || null; //----MetaData----\n\n  const metaData = {\n    title: capitalize(pageContent === null || pageContent === void 0 ? void 0 : pageContent.metaPageTitle) || null,\n    description: (pageContent === null || pageContent === void 0 ? void 0 : pageContent.metaDescription) || null,\n    keywords: (pageContent === null || pageContent === void 0 ? void 0 : pageContent.metaKeywords) || null,\n    canonicalUrl: GetCanonicalUrl(getBaseUrl(context.req.url)),\n    noIndex: true\n  };\n\n  if (isNullOrWhiteSpace(metaData.title)) {\n    metaData.title = ModelPageMetaTitle(leasingDealType, makeName, modelName);\n  }\n\n  if (isNullOrWhiteSpace(metaData.description)) {\n    metaData.description = ModelPageMetaDescription(leasingDealType, makeName, modelName);\n  }\n\n  if (!isNullOrWhiteSpace(metaData.description)) {\n    metaData.description = metaData.description.replace(/[\\r\\n]+/g, \" \").trim();\n  } //----//MetaData----\n\n\n  return {\n    props: {\n      pricingType: vehiclesFilter.pricingType,\n      userPostcode: userPostcode,\n      title: title,\n      description: description,\n      metaData: metaData,\n      modelReview: modelReview,\n      modelImage: modelImage,\n      modelGallery: modelGallery,\n      topRecommended: topRecommended.data,\n      vehiclePreviews: vehiclePreviews.data,\n      alternativeModels: alternativeModels,\n      //if we pass whole filter why do we need separate properties\n      vehicleType: vehicleType,\n      make: vehiclesFilter.manufacturerUrl,\n      model: vehiclesFilter.shortModTextUrl,\n      vehicleFilter: vehiclesFilter\n    }\n  };\n};","map":null,"metadata":{},"sourceType":"module"}