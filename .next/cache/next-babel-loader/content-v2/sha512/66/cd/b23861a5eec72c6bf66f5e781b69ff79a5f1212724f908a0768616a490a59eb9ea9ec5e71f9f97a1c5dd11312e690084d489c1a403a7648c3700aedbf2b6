{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport wrapper from 'redux/store.tsx/store';\nimport MainLayout from 'components/layout/main-layout';\nimport MakePageTemplate from 'components/pages/make';\nimport { LeasingDealTypes } from 'enums/LeasingDealTypes';\nimport { VehicleTypes } from 'enums/VehicleTypes';\nimport { CustomContentTypes } from 'enums/CustomContentTypes';\nimport { getBaseUrl } from 'helpers/urlsHelper';\nimport { isNullOrWhiteSpace, capitalize } from 'helpers/stringHelper';\nimport { MakePageMetaTitle, MakePageMetaDescription } from 'helpers/seoHelper';\nimport { getLOSSRFetchHeaders } from 'helpers/apiHelper';\nimport { GetProperManufacturerName } from 'helpers/helpers';\nimport { GetCanonicalUrl } from 'helpers/urlHelper';\nimport { getVehiclesFilter } from 'helpers/vehiclesFilterHelper';\nimport { ContentService } from 'business-logic/contentService';\nimport { dispatchUpdateDealToggle, dispatchUpdateUserPostcode, dispatchUpdateVehicleFilterSearch } from 'redux/dispatches/dispatchs';\nimport { GetVehicleModelPreviews, GetTopLoPickVehicles, GetAvailableShortModels, GetStaticMakes } from 'business-logic/vehicleService';\nexport const getServerSideProps = wrapper.getServerSideProps(async context => {\n  dispatchUpdateDealToggle(context);\n  dispatchUpdateUserPostcode(context);\n  const vehicleType = VehicleTypes.Car;\n  const leasingDealType = context.store.getState().dealSelector; //TODO: ensure always is Personal - not critical\n\n  const makeUrl = context.query.make;\n  const userPostcode = context.store.getState().userPostcode;\n  const make = GetStaticMakes(vehicleType).find(item => {\n    return item.id === makeUrl;\n  });\n\n  if (!make) {\n    context.res.writeHead(302, {\n      Location: '/car-leasing-with-insurance'\n    });\n    context.res.end();\n    return;\n  }\n\n  const vehiclesFilter = getVehiclesFilter(context);\n  vehiclesFilter.vehicleType = vehicleType;\n  vehiclesFilter.leasingDealType = leasingDealType;\n  vehiclesFilter.maintenance = true;\n  await dispatchUpdateVehicleFilterSearch(context, vehiclesFilter);\n  const fetchHeaders = getLOSSRFetchHeaders(context);\n  const pricingType = vehiclesFilter.pricingType; //Shouldn't it be set above?\n  //Why do we need them on server-side?\n\n  const modelPreviews = (await GetVehicleModelPreviews(vehiclesFilter, {\n    pageSize: 12,\n    pageIndex: 1\n  }, undefined, fetchHeaders)).data;\n  const topPicks = (await GetTopLoPickVehicles(vehicleType, make.id, pricingType, userPostcode, fetchHeaders)).data;\n  const modelData = (await GetAvailableShortModels(vehiclesFilter, fetchHeaders)).data;\n  const pageContent = (await ContentService.GetManufacturePageContent(CustomContentTypes.Manufacturer, LeasingDealTypes.Personal, make.id)).data;\n  const makeName = capitalize(GetProperManufacturerName(make.text).toUpperCase());\n  const title = `Explore the ${makeName} Lease Range`;\n  const description = (pageContent === null || pageContent === void 0 ? void 0 : pageContent.text) || null; //TODO: implement\n  //Description = !string.IsNullOrEmpty(customContent.Text) ? customContent.Text.Replace(\"#manufacturer#\", manufacturer.Text.ToUpper()).Replace(\"<br/>\", \"\").Replace(\"<br>\", \"\") : null\n  //TODO: implement - not critical\n  //if (!string.IsNullOrEmpty(customContent.ImageUrl)) {\n  //    contentItem.ImageUrl = customContent.ImageUrl;\n  //}\n  //else {\n  //    contentItem.ImageUrl = await this._vehicleImagesService.GetVehicleManufacturerTopImageUrlAsync(vehicleType, manufacturer.Text);\n  //}\n  //----MetaData----\n\n  const metaData = {\n    title: capitalize(pageContent === null || pageContent === void 0 ? void 0 : pageContent.metaPageTitle) || null,\n    description: (pageContent === null || pageContent === void 0 ? void 0 : pageContent.metaDescription) || null,\n    keywords: (pageContent === null || pageContent === void 0 ? void 0 : pageContent.metaKeywords) || null,\n    canonicalUrl: GetCanonicalUrl(getBaseUrl(context.req.url)),\n    noIndex: true\n  };\n\n  if (isNullOrWhiteSpace(metaData.title)) {\n    metaData.title = MakePageMetaTitle(leasingDealType, makeName);\n  }\n\n  if (isNullOrWhiteSpace(metaData.description)) {\n    metaData.description = MakePageMetaDescription(leasingDealType, makeName);\n  }\n\n  if (!isNullOrWhiteSpace(metaData.description)) {\n    metaData.description = metaData.description.replace(/[\\r\\n]+/g, \" \").trim();\n  } //----//MetaData----\n\n\n  return {\n    props: {\n      pricingType: vehiclesFilter.pricingType,\n      userPostcode: userPostcode,\n      title: title,\n      description: description,\n      metaData: metaData,\n      makeName: makeName,\n      makeUrl: makeUrl,\n      modelPreviews: modelPreviews,\n      topPicks: topPicks,\n      modelData: modelData,\n      //if we pass whole filter why do we need separate properties\n      vehicleType: vehiclesFilter.vehicleType,\n      vehicleFilter: vehiclesFilter\n    }\n  };\n});\n\nfunction mapStateToProps(state) {\n  return {\n    leasingDealType: state.dealSelector\n  };\n}\n\nconst AtcMakePage = ({\n  pricingType,\n  userPostcode,\n  leasingDealType,\n  vehicleType,\n  title,\n  description,\n  vehicleFilter,\n  modelData,\n  makeUrl,\n  makeName,\n  modelPreviews,\n  topPicks\n}) => {\n  return /*#__PURE__*/_jsx(MakePageTemplate, {\n    pricingType: pricingType,\n    userPostcode: userPostcode,\n    leasingDealType: leasingDealType,\n    vehicleType: vehicleType,\n    title: title,\n    description: description,\n    vehicleFilter: vehicleFilter,\n    modelData: modelData,\n    makeName: makeName,\n    makeUrl: makeUrl,\n    modelPreviews: modelPreviews,\n    topPicks: topPicks\n  });\n};\n\nAtcMakePage.layout = MainLayout;\nexport default connect(mapStateToProps)(AtcMakePage);","map":null,"metadata":{},"sourceType":"module"}