{"ast":null,"code":"export const joinNotEmpty = (separator, values) => {\n  let filteredValues = [];\n\n  if (values) {\n    for (let i = 0; i < values.length; i++) {\n      if (!isNullOrWhiteSpace(values[i])) {\n        filteredValues.push(values[i]);\n      }\n    }\n  }\n\n  return filteredValues.join(separator || \"\");\n};\nexport const isNullOrWhiteSpace = value => {\n  return !value || value === '' || !value.trim();\n};\nexport const escapeRegExp = text => {\n  return text === null || text === void 0 ? void 0 : text.replace(/[.*+\\-?^${}()|[\\]\\\\]/g, '\\\\$&'); // $& means the whole matched string\n};\nexport const replaceAll = (str, find, replace) => {\n  return str === null || str === void 0 ? void 0 : str.replace(new RegExp(escapeRegExp(find), 'g'), replace);\n};\nexport const isNumeric = value => {\n  let reg = new RegExp('^\\\\d+$');\n  return reg.test(value);\n};\nexport const capitalize = value => {\n  if (!isNullOrWhiteSpace(value)) {\n    var result = \"\";\n    let wordBuilder = \"\";\n    const stopChars = [\" \", \"-\", \",\", \".\", \"&\", \"|\"];\n    let idx = 0;\n\n    while (idx <= value.length) {\n      let currentValue = idx < value.length ? value[idx] : \"\";\n\n      if (currentValue !== \"\" && !stopChars.includes(currentValue)) {\n        wordBuilder += currentValue;\n      } else {\n        let word = wordBuilder.toString();\n\n        if (word.length > 3 && !isNumeric(word[0]) && !isNumeric(word[word.length - 1])) {\n          result += `${word.substring(0, 1).toUpperCase()}${word.substring(1).toLowerCase()}${currentValue}`;\n        } else {\n          result += `${word}${currentValue}`;\n        }\n\n        wordBuilder = \"\";\n      }\n\n      idx++;\n    }\n\n    return result;\n  }\n\n  return value;\n};\nexport const hasWhiteSpace = s => {\n  return s.indexOf(' ') >= 0;\n};\nexport const shortCut = (value, take) => {\n  let result = value ? value.trim() : value;\n\n  if (result && take > 0 && result.length > take + 3) {\n    const checkList = [' ', '.', ',', ':', ';', '?', '!'];\n    let trailingChar = result.substring(take, take + 1);\n    result = result.substring(0, take);\n\n    if (!checkList.includes(trailingChar)) {\n      result = result.substring(0, result.lastIndexOf(' ')).trim();\n    }\n\n    while (checkList.includes(result[result.length - 1])) {\n      result = result.substring(0, result.length - 1).trim();\n    }\n\n    result = result.trim() + \"...\";\n  }\n\n  return result;\n};","map":{"version":3,"sources":["E:/current_project/PPH/tfs/Website/website/helpers/stringHelper.tsx"],"names":["joinNotEmpty","separator","values","filteredValues","i","length","isNullOrWhiteSpace","push","join","value","trim","escapeRegExp","text","replace","replaceAll","str","find","RegExp","isNumeric","reg","test","capitalize","result","wordBuilder","stopChars","idx","currentValue","includes","word","toString","substring","toUpperCase","toLowerCase","hasWhiteSpace","s","indexOf","shortCut","take","checkList","trailingChar","lastIndexOf"],"mappings":"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","sourcesContent":["export const joinNotEmpty = (separator: string, values: string[]): string => {\r\n    let filteredValues: string[] = [];\r\n\r\n    if (values) {\r\n        for (let i = 0; i < values.length; i++) {\r\n            if (!isNullOrWhiteSpace(values[i])) {\r\n                filteredValues.push(values[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n    return filteredValues.join(separator || \"\");\r\n}\r\n\r\nexport const isNullOrWhiteSpace = (value: string): boolean => {\r\n    return !value || value === '' || !value.trim();\r\n}\r\n\r\nexport const escapeRegExp = (text: string): string => {\r\n    return text?.replace(/[.*+\\-?^${}()|[\\]\\\\]/g, '\\\\$&'); // $& means the whole matched string\r\n}\r\n\r\nexport const replaceAll = (str: string, find: string, replace: string): string => {\r\n    return str?.replace(new RegExp(escapeRegExp(find), 'g'), replace);\r\n}\r\n\r\nexport const isNumeric = (value: string): boolean => {\r\n    let reg = new RegExp('^\\\\d+$');\r\n    return reg.test(value);\r\n}\r\n\r\n\r\nexport const capitalize = (value: string): string => {\r\n    if (!isNullOrWhiteSpace(value)) {\r\n        var result = \"\";\r\n        let wordBuilder = \"\";\r\n\r\n        const stopChars: string[] = [\" \", \"-\", \",\", \".\", \"&\", \"|\"];\r\n        let idx = 0;\r\n\r\n        while (idx <= value.length) {\r\n            let currentValue = (idx < value.length) ? value[idx] : \"\";\r\n\r\n            if (currentValue !== \"\" && !stopChars.includes(currentValue)) {\r\n                wordBuilder += currentValue;\r\n            }\r\n            else {\r\n                let word = wordBuilder.toString();\r\n\r\n                if (word.length > 3 && !isNumeric(word[0]) && !isNumeric(word[word.length - 1])) {\r\n                    result += `${word.substring(0, 1).toUpperCase()}${word.substring(1).toLowerCase()}${currentValue}`;\r\n                }\r\n                else {\r\n                    result += `${word}${currentValue}`;\r\n                }\r\n\r\n                wordBuilder = \"\";\r\n            }\r\n\r\n            idx++;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    return value;\r\n}\r\n\r\nexport const hasWhiteSpace = (s) => {\r\n    return s.indexOf(' ') >= 0;\r\n}\r\n\r\nexport const shortCut = (value: string, take: number): string => {\r\n    let result = value ? value.trim() : value;\r\n\r\n    if (result && take > 0 && result.length > take + 3) {\r\n        const checkList = [' ', '.', ',', ':', ';', '?', '!'];\r\n        let trailingChar = result.substring(take, take + 1);\r\n\r\n        result = result.substring(0, take);\r\n\r\n        if (!checkList.includes(trailingChar)) {\r\n            result = result.substring(0, result.lastIndexOf(' ')).trim();\r\n        }\r\n\r\n        while (checkList.includes(result[result.length - 1])) {\r\n            result = result.substring(0, result.length - 1).trim();\r\n        }\r\n\r\n        result = result.trim() + \"...\";\r\n    }\r\n\r\n    return result;\r\n}"]},"metadata":{},"sourceType":"module"}