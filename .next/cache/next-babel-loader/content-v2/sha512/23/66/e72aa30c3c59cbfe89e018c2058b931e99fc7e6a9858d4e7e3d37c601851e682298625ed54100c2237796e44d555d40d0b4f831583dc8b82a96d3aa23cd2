{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createStore } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension/developmentOnly';\nimport siteReducers from 'reducers/reducers';\nimport { createWrapper, HYDRATE } from 'next-redux-wrapper';\n\nconst reducer = (state, action) => {\n  if (action.type === HYDRATE) {\n    const nextState = _objectSpread(_objectSpread({}, state), action.payload); // preserve count value on client side navigation\n\n\n    if (state.stickerList) nextState.stickerList = state.stickerList;\n    if (state.headerToggle) nextState.headerToggle = state.headerToggle;\n    if (state.stepIndicator) nextState.stepIndicator = state.stepIndicator;\n    if (state.formData) nextState.formData = state.formData;\n    if (state.navigationStates) nextState.navigationStates = state.navigationStates;\n    if (state.garageData) nextState.garageData = state.garageData;\n    return nextState;\n  } else {\n    return siteReducers(state, action);\n  }\n}; // create a makeStore function\n\n\nconst makeStore = context => createStore(reducer, composeWithDevTools());\n\n; // export an assembled wrapper\n\nexport const wrapper = createWrapper(makeStore, {\n  debug: false\n});\nexport default wrapper;","map":{"version":3,"sources":["E:/current_project/PPH/tfs/Website/Website/redux/store.tsx/store.tsx"],"names":["createStore","composeWithDevTools","siteReducers","createWrapper","HYDRATE","reducer","state","action","type","nextState","payload","stickerList","headerToggle","stepIndicator","formData","navigationStates","garageData","makeStore","context","wrapper","debug"],"mappings":";;;;;;AACA,SAASA,WAAT,QAA4B,OAA5B;AACA,SAASC,mBAAT,QAAoC,0CAApC;AACA,OAAOC,YAAP,MAAyB,mBAAzB;AACA,SAAoBC,aAApB,EAA4CC,OAA5C,QAA2D,oBAA3D;;AAEA,MAAMC,OAAO,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC/B,MAAIA,MAAM,CAACC,IAAP,KAAgBJ,OAApB,EAA6B;AAEzB,UAAMK,SAAS,mCACRH,KADQ,GAERC,MAAM,CAACG,OAFC,CAAf,CAFyB,CAMzB;;;AACA,QAAIJ,KAAK,CAACK,WAAV,EAAuBF,SAAS,CAACE,WAAV,GAAwBL,KAAK,CAACK,WAA9B;AACvB,QAAIL,KAAK,CAACM,YAAV,EAAwBH,SAAS,CAACG,YAAV,GAAyBN,KAAK,CAACM,YAA/B;AACxB,QAAIN,KAAK,CAACO,aAAV,EAAyBJ,SAAS,CAACI,aAAV,GAA0BP,KAAK,CAACO,aAAhC;AACzB,QAAIP,KAAK,CAACQ,QAAV,EAAoBL,SAAS,CAACK,QAAV,GAAqBR,KAAK,CAACQ,QAA3B;AACpB,QAAIR,KAAK,CAACS,gBAAV,EAA4BN,SAAS,CAACM,gBAAV,GAA6BT,KAAK,CAACS,gBAAnC;AAC5B,QAAIT,KAAK,CAACU,UAAV,EAAsBP,SAAS,CAACO,UAAV,GAAuBV,KAAK,CAACU,UAA7B;AACtB,WAAOP,SAAP;AACH,GAdD,MAcO;AACH,WAAOP,YAAY,CAACI,KAAD,EAAQC,MAAR,CAAnB;AACH;AACJ,CAlBD,C,CAoBA;;;AACA,MAAMU,SAAyB,GAAIC,OAAD,IAAsBlB,WAAW,CAACK,OAAD,EAAUJ,mBAAmB,EAA7B,CAAnE;;AAAoG,C,CAEpG;;AACA,OAAO,MAAMkB,OAAO,GAAGhB,aAAa,CAAMc,SAAN,EAAiB;AAAEG,EAAAA,KAAK,EAAE;AAAT,CAAjB,CAA7B;AAEP,eAAeD,OAAf","sourcesContent":["\r\nimport { createStore } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension/developmentOnly';\r\nimport siteReducers from 'reducers/reducers';\r\nimport { MakeStore, createWrapper, Context, HYDRATE } from 'next-redux-wrapper';\r\n\r\nconst reducer = (state, action) => {\r\n    if (action.type === HYDRATE) {\r\n\r\n        const nextState = {\r\n            ...state, // use previous state\r\n            ...action.payload, // apply delta from hydration\r\n        }\r\n        // preserve count value on client side navigation\r\n        if (state.stickerList) nextState.stickerList = state.stickerList\r\n        if (state.headerToggle) nextState.headerToggle = state.headerToggle\r\n        if (state.stepIndicator) nextState.stepIndicator = state.stepIndicator\r\n        if (state.formData) nextState.formData = state.formData\r\n        if (state.navigationStates) nextState.navigationStates = state.navigationStates\r\n        if (state.garageData) nextState.garageData = state.garageData\r\n        return nextState\r\n    } else {\r\n        return siteReducers(state, action)\r\n    }\r\n}\r\n\r\n// create a makeStore function\r\nconst makeStore: MakeStore<any> = (context: Context) => createStore(reducer, composeWithDevTools());;\r\n\r\n// export an assembled wrapper\r\nexport const wrapper = createWrapper<any>(makeStore, { debug: false });\r\n\r\nexport default wrapper;"]},"metadata":{},"sourceType":"module"}