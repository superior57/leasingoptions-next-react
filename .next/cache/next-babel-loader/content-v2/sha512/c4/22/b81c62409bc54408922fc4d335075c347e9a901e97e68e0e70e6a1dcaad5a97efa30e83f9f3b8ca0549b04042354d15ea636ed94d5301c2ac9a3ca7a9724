{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport _ from 'underscore';\nexport class VehicleExtraOptionsHelper {\n  static getRelationshipDescription(relationshipType) {\n    let result = null;\n\n    if (relationshipType) {\n      switch (relationshipType.toUpperCase()) {\n        case \"OO\":\n          result = \"From the options below, a maximum of one may be selected. For example, you can only have one type of paintwork.\";\n          break;\n\n        case \"RO\":\n          result = \"The option you have chosen must be accompanied by at least one of the additional options in the group below.\";\n          break;\n\n        case \"RA\":\n          result = \"The option you have chosen must be accompanied by all of the additional options in the group below.\";\n          break;\n\n        case \"NW\":\n          result = \"The option you have chosen cannot be accompanied by any of the options in the group below. For example if wood inlay is chosen it cannot be accompanied by any cloth trim.\";\n          break;\n\n        case \"IN\":\n          result = \"Please note the options below are included (at no extra cost) with the option you have chosen which comes as a pack.\";\n          break;\n\n        case \"IO\":\n          result = \"The option you have chosen must be accompanied by one option from the group below. The additional option will be no extra cost.\";\n          break;\n      }\n    }\n\n    return result ? result : relationshipType;\n  }\n\n  static getSelectedOptions(options, selectedOptionIds) {\n    let selectedOptions = [];\n    if (options && options.length > 0 && selectedOptionIds && selectedOptionIds.length > 0) selectedOptions = _.filter(options, function (option) {\n      return _.contains(selectedOptionIds, option.id);\n    });\n    return selectedOptions;\n  }\n\n  static getOptionsPrice(options, optionsStates) {\n    let result = 0;\n\n    if (options) {\n      let self = this;\n      options.forEach(function (option) {\n        result += self.getOptionPrice(option, optionsStates);\n      });\n    }\n\n    return result;\n  }\n\n  static getOptionPrice(option, optionsStates) {\n    let result = 0;\n\n    if (option) {\n      let optionState = this._getOptionState(optionsStates, option.id);\n\n      result = this._getOptionPrice(option, optionState);\n    }\n\n    return result;\n  }\n\n  static getOptionsStates(optionIds, relationships) {\n    let optionsStates = [];\n\n    if (optionIds && relationships) {\n      let filteredRelationships = this.getRelationships(relationships, optionIds);\n      filteredRelationships.forEach(function (relationship) {\n        let primaryOptionIds = relationship.primaryOptionIds;\n        let regularOptionIds = relationship.regularOptionIds;\n        let isActive = relationship.type === \"OO\" || _.intersection(primaryOptionIds, optionIds).length === primaryOptionIds.length;\n\n        if (isActive) {\n          if (relationship.type == \"OO\") {\n            _.difference(regularOptionIds, optionIds).forEach(function (optionId) {\n              let optionState = _.find(optionsStates, function (option) {\n                return option.id === optionId;\n              });\n\n              if (!optionState) {\n                optionState = {\n                  id: optionId,\n                  selectionRequiredBy: [],\n                  deselectionRequiredBy: []\n                };\n                optionsStates.push(optionState);\n              }\n\n              optionState.deselectionRequiredBy = _.union(optionState.deselectionRequiredBy, [-1]);\n            });\n          } else if (relationship.type == \"RA\" || relationship.type == \"IN\") {\n            let isMirror = relationship.mirrorRelationshipIds && relationship.mirrorRelationshipIds.length > 0;\n            regularOptionIds.forEach(function (optionId) {\n              let optionState = _.find(optionsStates, function (option) {\n                return option.id === optionId;\n              });\n\n              if (!optionState) {\n                optionState = {\n                  id: optionId,\n                  selectionRequiredBy: [],\n                  deselectionRequiredBy: [],\n                  mirrorIn: []\n                };\n                optionsStates.push(optionState);\n              }\n\n              optionState.selectionRequiredBy = _.union(optionState.selectionRequiredBy, [relationship.id]);\n              optionState.useZeroPrice = optionState.useZeroPrice || relationship.type === \"IN\";\n\n              if (isMirror) {\n                optionState.mirrorIn = _.union(optionState.mirrorIn, [relationship.id], relationship.mirrorRelationshipIds);\n              }\n            });\n          }\n        }\n      });\n    }\n\n    return optionsStates;\n  }\n\n  static cloneOptionsStates(optionsStates) {\n    return _.map(optionsStates, function (optionState) {\n      let result = {\n        id: optionState.id,\n        selectionRequiredBy: _.clone(optionState.selectionRequiredBy),\n        deselectionRequiredBy: _.clone(optionState.deselectionRequiredBy),\n        mirrorIn: _.clone(optionState.mirrorIn),\n        useZeroPrice: optionState.useZeroPrice\n      };\n      return result;\n    });\n  }\n\n  static getOptionsWithoutRelationships(options, optionIds) {\n    let filteredOptions = [];\n\n    if (optionIds && optionIds.length > 0) {\n      filteredOptions = _.filter(options || [], function (item) {\n        return item && _.contains(optionIds, item.id) && (!item.linkedRelationshipIds || item.linkedRelationshipIds.length === 0);\n      });\n    }\n\n    return filteredOptions;\n  }\n\n  static getRelationships(relationships, optionIds) {\n    let filteredRelationships = [];\n    let allowedRelationshipTypes = this.allowedRelationshipTypes;\n\n    if (optionIds && optionIds.length > 0) {\n      filteredRelationships = _.filter(relationships || [], function (item) {\n        return item && _.contains(allowedRelationshipTypes, item.type) && (_.intersection(optionIds, item.primaryOptionIds).length > 0 || _.intersection(optionIds, item.regularOptionIds).length > 0);\n      });\n    }\n\n    return filteredRelationships;\n  }\n\n  static getConfirmRelationship(relationships, vehicleOptions, relationshipId, selectedOptionIds, optionsStates) {\n    let confirmRelationship = null;\n\n    if (relationships && relationships.length > 0) {\n      let relationship = this._getRelationship(relationships, relationshipId);\n\n      if (relationship) {\n        confirmRelationship = {\n          id: relationship.id,\n          type: relationship.type,\n          options: []\n        };\n\n        let relationshipPrimaryOptions = this._getRelationshipOptions(relationship, vehicleOptions, true, selectedOptionIds, optionsStates);\n\n        let relationshipRegularOptions = this._getRelationshipOptions(relationship, vehicleOptions, false, selectedOptionIds, optionsStates);\n\n        confirmRelationship.options = _.union(confirmRelationship.options, relationshipPrimaryOptions);\n        confirmRelationship.options = _.union(confirmRelationship.options, relationshipRegularOptions);\n      }\n    }\n\n    return confirmRelationship;\n  } //is not used at the moment\n  //public static disableConfirmRelationshipOptions(confirmRelationship: ExtraOptionConfirmRelationship, selectedOptionIds: number[]) {\n  //    if (confirmRelationship.type !== \"OO\") {\n  //        let relationshipPrimaryOptions: ExtraOptionRelationshipOption[] = _.filter(confirmRelationship.options,\n  //            function (relationshipOption: ExtraOptionRelationshipOption) {\n  //                return relationshipOption.isPrimary;\n  //            });\n  //        let relationshipRegularOptions: ExtraOptionRelationshipOption[] = _.filter(confirmRelationship.options,\n  //            function (relationshipOption: ExtraOptionRelationshipOption) {\n  //                return !relationshipOption.isPrimary;\n  //            });\n  //        let relationshipPrimaryOptionIds: number[] = _.pluck(relationshipPrimaryOptions, 'id');\n  //        let relationshipRegularOptionIds: number[] = _.pluck(relationshipRegularOptions, 'id');\n  //        let activeRule = _.intersection(relationshipPrimaryOptionIds, selectedOptionIds).length === relationshipPrimaryOptionIds.length;\n  //        if (confirmRelationship.type == \"RA\" || confirmRelationship.type == \"IN\" || confirmRelationship.type == \"NW\") {\n  //            relationshipRegularOptions.forEach(function (relationshipOption) {\n  //                relationshipOption.isDisabled = activeRule;\n  //            });\n  //        }\n  //        else if (confirmRelationship.type == \"RO\" || confirmRelationship.type == \"IO\") {\n  //            //IO is a separate case\n  //            if (activeRule) {\n  //                let selectedIds: number[] = _.intersection(selectedOptionIds, relationshipRegularOptionIds);\n  //                if (selectedIds.length == 1) {\n  //                    relationshipRegularOptions.forEach(function (relationshipOption) {\n  //                        relationshipOption.isDisabled = relationshipOption.id === selectedIds[0];\n  //                    });\n  //                }\n  //            }\n  //        }\n  //    }\n  //}\n\n\n  static splitOptionIdsByAction(optionsToProcess) {\n    let result = {\n      selectIds: [],\n      deselectIds: []\n    };\n\n    if (optionsToProcess && optionsToProcess.length > 0) {\n      result.selectIds = _.pluck(_.filter(optionsToProcess, function (option) {\n        return option.selectionRequiredBy.length > 0;\n      }), \"id\");\n      result.deselectIds = _.pluck(_.filter(optionsToProcess, function (option) {\n        return option.deselectionRequiredBy.length > 0;\n      }), \"id\");\n    }\n\n    return result;\n  }\n\n  static getOptionAction(option, selectedOptionIds) {\n    let result = null;\n\n    if (option && !option.isDisabled) {\n      let optionId = option.id;\n      let isSelectAction = !_.contains(selectedOptionIds || [], optionId);\n      result = {\n        id: optionId,\n        selectionRequiredBy: isSelectAction ? [0] : [],\n        deselectionRequiredBy: !isSelectAction ? [0] : []\n      };\n    }\n\n    return result;\n  }\n\n  static optionExists(optionId, vehicleOptions) {\n    let option = this._getOption(vehicleOptions, optionId);\n\n    if (option) {\n      return true;\n    }\n\n    return false;\n  }\n\n  static _getRelationshipOptions(relationship, vehicleOptions, primary, selectedOptionIds, optionsStates) {\n    let relationshipOptions = [];\n\n    if (relationship !== null && vehicleOptions != null && vehicleOptions.length > 0) {\n      let self = this;\n      let ids = primary ? relationship.primaryOptionIds : relationship.regularOptionIds;\n      (ids || []).forEach(function (id) {\n        let option = self._getOption(vehicleOptions, id);\n\n        if (option) {\n          let optionState = self._getOptionState(optionsStates, option.id);\n\n          let relationshipOption = {\n            id: option.id,\n            name: option.name,\n            isPrimary: primary,\n            price: self._getOptionPrice(option, optionState),\n            isSelected: _.contains(selectedOptionIds || [], option.id),\n            isDisabled: false\n          };\n          relationshipOptions.push(relationshipOption);\n        }\n      });\n      relationshipOptions = _.sortBy(relationshipOptions, 'name');\n    }\n\n    return relationshipOptions;\n  }\n\n  static _getOptionPrice(option, optionState) {\n    let result = 0;\n\n    if (option) {\n      result = optionState && optionState.useZeroPrice ? 0 : option.price;\n    }\n\n    return result;\n  }\n\n  static _getOptionState(optionsStates, id) {\n    return _.find(optionsStates, function (item) {\n      return item && item.id === id;\n    });\n  }\n\n  static _getOption(vehicleOptions, id) {\n    return _.find(vehicleOptions, function (item) {\n      return item && item.id === id;\n    });\n  }\n\n  static _getRelationship(relationships, id) {\n    return _.find(relationships, function (item) {\n      return item && item.id === id;\n    });\n  }\n\n}\n\n_defineProperty(VehicleExtraOptionsHelper, \"allowedRelationshipTypes\", [\"OO\", \"RO\", \"RA\", \"NW\", \"IN\", \"IO\"]);","map":null,"metadata":{},"sourceType":"module"}