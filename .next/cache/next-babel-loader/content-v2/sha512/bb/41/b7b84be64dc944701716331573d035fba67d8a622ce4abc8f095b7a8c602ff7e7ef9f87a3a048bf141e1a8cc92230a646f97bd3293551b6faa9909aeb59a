{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _ from 'underscore';\nexport var VehicleExtraOptionsHelper = /*#__PURE__*/function () {\n  function VehicleExtraOptionsHelper() {\n    _classCallCheck(this, VehicleExtraOptionsHelper);\n  }\n\n  _createClass(VehicleExtraOptionsHelper, null, [{\n    key: \"getRelationshipDescription\",\n    value: function getRelationshipDescription(relationshipType) {\n      var result = null;\n\n      if (relationshipType) {\n        switch (relationshipType.toUpperCase()) {\n          case \"OO\":\n            result = \"From the options below, a maximum of one may be selected. For example, you can only have one type of paintwork.\";\n            break;\n\n          case \"RO\":\n            result = \"The option you have chosen must be accompanied by at least one of the additional options in the group below.\";\n            break;\n\n          case \"RA\":\n            result = \"The option you have chosen must be accompanied by all of the additional options in the group below.\";\n            break;\n\n          case \"NW\":\n            result = \"The option you have chosen cannot be accompanied by any of the options in the group below. For example if wood inlay is chosen it cannot be accompanied by any cloth trim.\";\n            break;\n\n          case \"IN\":\n            result = \"Please note the options below are included (at no extra cost) with the option you have chosen which comes as a pack.\";\n            break;\n\n          case \"IO\":\n            result = \"The option you have chosen must be accompanied by one option from the group below. The additional option will be no extra cost.\";\n            break;\n        }\n      }\n\n      return result ? result : relationshipType;\n    }\n  }, {\n    key: \"getSelectedOptions\",\n    value: function getSelectedOptions(options, selectedOptionIds) {\n      var selectedOptions = [];\n      if (options && options.length > 0 && selectedOptionIds && selectedOptionIds.length > 0) selectedOptions = _.filter(options, function (option) {\n        return _.contains(selectedOptionIds, option.id);\n      });\n      return selectedOptions;\n    }\n  }, {\n    key: \"getOptionsPrice\",\n    value: function getOptionsPrice(options, optionsStates) {\n      var result = 0;\n\n      if (options) {\n        var self = this;\n        options.forEach(function (option) {\n          result += self.getOptionPrice(option, optionsStates);\n        });\n      }\n\n      return result;\n    }\n  }, {\n    key: \"getOptionPrice\",\n    value: function getOptionPrice(option, optionsStates) {\n      var result = 0;\n\n      if (option) {\n        var optionState = this._getOptionState(optionsStates, option.id);\n\n        result = this._getOptionPrice(option, optionState);\n      }\n\n      return result;\n    }\n  }, {\n    key: \"getOptionsStates\",\n    value: function getOptionsStates(optionIds, relationships) {\n      var optionsStates = [];\n\n      if (optionIds && relationships) {\n        var filteredRelationships = this.getRelationships(relationships, optionIds);\n        filteredRelationships.forEach(function (relationship) {\n          var primaryOptionIds = relationship.primaryOptionIds;\n          var regularOptionIds = relationship.regularOptionIds;\n          var isActive = relationship.type === \"OO\" || _.intersection(primaryOptionIds, optionIds).length === primaryOptionIds.length;\n\n          if (isActive) {\n            if (relationship.type == \"OO\") {\n              _.difference(regularOptionIds, optionIds).forEach(function (optionId) {\n                var optionState = _.find(optionsStates, function (option) {\n                  return option.id === optionId;\n                });\n\n                if (!optionState) {\n                  optionState = {\n                    id: optionId,\n                    selectionRequiredBy: [],\n                    deselectionRequiredBy: []\n                  };\n                  optionsStates.push(optionState);\n                }\n\n                optionState.deselectionRequiredBy = _.union(optionState.deselectionRequiredBy, [-1]);\n              });\n            } else if (relationship.type == \"RA\" || relationship.type == \"IN\") {\n              var isMirror = relationship.mirrorRelationshipIds && relationship.mirrorRelationshipIds.length > 0;\n              regularOptionIds.forEach(function (optionId) {\n                var optionState = _.find(optionsStates, function (option) {\n                  return option.id === optionId;\n                });\n\n                if (!optionState) {\n                  optionState = {\n                    id: optionId,\n                    selectionRequiredBy: [],\n                    deselectionRequiredBy: [],\n                    mirrorIn: []\n                  };\n                  optionsStates.push(optionState);\n                }\n\n                optionState.selectionRequiredBy = _.union(optionState.selectionRequiredBy, [relationship.id]);\n                optionState.useZeroPrice = optionState.useZeroPrice || relationship.type === \"IN\";\n\n                if (isMirror) {\n                  optionState.mirrorIn = _.union(optionState.mirrorIn, [relationship.id], relationship.mirrorRelationshipIds);\n                }\n              });\n            }\n          }\n        });\n      }\n\n      return optionsStates;\n    }\n  }, {\n    key: \"cloneOptionsStates\",\n    value: function cloneOptionsStates(optionsStates) {\n      return _.map(optionsStates, function (optionState) {\n        var result = {\n          id: optionState.id,\n          selectionRequiredBy: _.clone(optionState.selectionRequiredBy),\n          deselectionRequiredBy: _.clone(optionState.deselectionRequiredBy),\n          mirrorIn: _.clone(optionState.mirrorIn),\n          useZeroPrice: optionState.useZeroPrice\n        };\n        return result;\n      });\n    }\n  }, {\n    key: \"getOptionsWithoutRelationships\",\n    value: function getOptionsWithoutRelationships(options, optionIds) {\n      var filteredOptions = [];\n\n      if (optionIds && optionIds.length > 0) {\n        filteredOptions = _.filter(options || [], function (item) {\n          return item && _.contains(optionIds, item.id) && (!item.linkedRelationshipIds || item.linkedRelationshipIds.length === 0);\n        });\n      }\n\n      return filteredOptions;\n    }\n  }, {\n    key: \"getRelationships\",\n    value: function getRelationships(relationships, optionIds) {\n      var filteredRelationships = [];\n      var allowedRelationshipTypes = this.allowedRelationshipTypes;\n\n      if (optionIds && optionIds.length > 0) {\n        filteredRelationships = _.filter(relationships || [], function (item) {\n          return item && _.contains(allowedRelationshipTypes, item.type) && (_.intersection(optionIds, item.primaryOptionIds).length > 0 || _.intersection(optionIds, item.regularOptionIds).length > 0);\n        });\n      }\n\n      return filteredRelationships;\n    }\n  }, {\n    key: \"getConfirmRelationship\",\n    value: function getConfirmRelationship(relationships, vehicleOptions, relationshipId, selectedOptionIds, optionsStates) {\n      var confirmRelationship = null;\n\n      if (relationships && relationships.length > 0) {\n        var relationship = this._getRelationship(relationships, relationshipId);\n\n        if (relationship) {\n          confirmRelationship = {\n            id: relationship.id,\n            type: relationship.type,\n            options: []\n          };\n\n          var relationshipPrimaryOptions = this._getRelationshipOptions(relationship, vehicleOptions, true, selectedOptionIds, optionsStates);\n\n          var relationshipRegularOptions = this._getRelationshipOptions(relationship, vehicleOptions, false, selectedOptionIds, optionsStates);\n\n          confirmRelationship.options = _.union(confirmRelationship.options, relationshipPrimaryOptions);\n          confirmRelationship.options = _.union(confirmRelationship.options, relationshipRegularOptions);\n        }\n      }\n\n      return confirmRelationship;\n    } //is not used at the moment\n    //public static disableConfirmRelationshipOptions(confirmRelationship: ExtraOptionConfirmRelationship, selectedOptionIds: number[]) {\n    //    if (confirmRelationship.type !== \"OO\") {\n    //        let relationshipPrimaryOptions: ExtraOptionRelationshipOption[] = _.filter(confirmRelationship.options,\n    //            function (relationshipOption: ExtraOptionRelationshipOption) {\n    //                return relationshipOption.isPrimary;\n    //            });\n    //        let relationshipRegularOptions: ExtraOptionRelationshipOption[] = _.filter(confirmRelationship.options,\n    //            function (relationshipOption: ExtraOptionRelationshipOption) {\n    //                return !relationshipOption.isPrimary;\n    //            });\n    //        let relationshipPrimaryOptionIds: number[] = _.pluck(relationshipPrimaryOptions, 'id');\n    //        let relationshipRegularOptionIds: number[] = _.pluck(relationshipRegularOptions, 'id');\n    //        let activeRule = _.intersection(relationshipPrimaryOptionIds, selectedOptionIds).length === relationshipPrimaryOptionIds.length;\n    //        if (confirmRelationship.type == \"RA\" || confirmRelationship.type == \"IN\" || confirmRelationship.type == \"NW\") {\n    //            relationshipRegularOptions.forEach(function (relationshipOption) {\n    //                relationshipOption.isDisabled = activeRule;\n    //            });\n    //        }\n    //        else if (confirmRelationship.type == \"RO\" || confirmRelationship.type == \"IO\") {\n    //            //IO is a separate case\n    //            if (activeRule) {\n    //                let selectedIds: number[] = _.intersection(selectedOptionIds, relationshipRegularOptionIds);\n    //                if (selectedIds.length == 1) {\n    //                    relationshipRegularOptions.forEach(function (relationshipOption) {\n    //                        relationshipOption.isDisabled = relationshipOption.id === selectedIds[0];\n    //                    });\n    //                }\n    //            }\n    //        }\n    //    }\n    //}\n\n  }, {\n    key: \"splitOptionIdsByAction\",\n    value: function splitOptionIdsByAction(optionsToProcess) {\n      var result = {\n        selectIds: [],\n        deselectIds: []\n      };\n\n      if (optionsToProcess && optionsToProcess.length > 0) {\n        result.selectIds = _.pluck(_.filter(optionsToProcess, function (option) {\n          return option.selectionRequiredBy.length > 0;\n        }), \"id\");\n        result.deselectIds = _.pluck(_.filter(optionsToProcess, function (option) {\n          return option.deselectionRequiredBy.length > 0;\n        }), \"id\");\n      }\n\n      return result;\n    }\n  }, {\n    key: \"getOptionAction\",\n    value: function getOptionAction(option, selectedOptionIds) {\n      var result = null;\n\n      if (option && !option.isDisabled) {\n        var optionId = option.id;\n        var isSelectAction = !_.contains(selectedOptionIds || [], optionId);\n        result = {\n          id: optionId,\n          selectionRequiredBy: isSelectAction ? [0] : [],\n          deselectionRequiredBy: !isSelectAction ? [0] : []\n        };\n      }\n\n      return result;\n    }\n  }, {\n    key: \"optionExists\",\n    value: function optionExists(optionId, vehicleOptions) {\n      var option = this._getOption(vehicleOptions, optionId);\n\n      if (option) {\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"_getRelationshipOptions\",\n    value: function _getRelationshipOptions(relationship, vehicleOptions, primary, selectedOptionIds, optionsStates) {\n      var relationshipOptions = [];\n\n      if (relationship !== null && vehicleOptions != null && vehicleOptions.length > 0) {\n        var self = this;\n        var ids = primary ? relationship.primaryOptionIds : relationship.regularOptionIds;\n        (ids || []).forEach(function (id) {\n          var option = self._getOption(vehicleOptions, id);\n\n          if (option) {\n            var optionState = self._getOptionState(optionsStates, option.id);\n\n            var relationshipOption = {\n              id: option.id,\n              name: option.name,\n              isPrimary: primary,\n              price: self._getOptionPrice(option, optionState),\n              isSelected: _.contains(selectedOptionIds || [], option.id),\n              isDisabled: false\n            };\n            relationshipOptions.push(relationshipOption);\n          }\n        });\n        relationshipOptions = _.sortBy(relationshipOptions, 'name');\n      }\n\n      return relationshipOptions;\n    }\n  }, {\n    key: \"_getOptionPrice\",\n    value: function _getOptionPrice(option, optionState) {\n      var result = 0;\n\n      if (option) {\n        result = optionState && optionState.useZeroPrice ? 0 : option.price;\n      }\n\n      return result;\n    }\n  }, {\n    key: \"_getOptionState\",\n    value: function _getOptionState(optionsStates, id) {\n      return _.find(optionsStates, function (item) {\n        return item && item.id === id;\n      });\n    }\n  }, {\n    key: \"_getOption\",\n    value: function _getOption(vehicleOptions, id) {\n      return _.find(vehicleOptions, function (item) {\n        return item && item.id === id;\n      });\n    }\n  }, {\n    key: \"_getRelationship\",\n    value: function _getRelationship(relationships, id) {\n      return _.find(relationships, function (item) {\n        return item && item.id === id;\n      });\n    }\n  }]);\n\n  return VehicleExtraOptionsHelper;\n}();\n\n_defineProperty(VehicleExtraOptionsHelper, \"allowedRelationshipTypes\", [\"OO\", \"RO\", \"RA\", \"NW\", \"IN\", \"IO\"]);","map":null,"metadata":{},"sourceType":"module"}