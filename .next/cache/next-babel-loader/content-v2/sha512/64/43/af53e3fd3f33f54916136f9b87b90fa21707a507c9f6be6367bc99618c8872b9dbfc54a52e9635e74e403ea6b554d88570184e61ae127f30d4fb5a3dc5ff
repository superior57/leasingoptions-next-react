{"ast":null,"code":"export var joinNotEmpty = function joinNotEmpty(separator, values) {\n  var filteredValues = [];\n\n  if (values) {\n    for (var i = 0; i < values.length; i++) {\n      if (!isNullOrWhiteSpace(values[i])) {\n        filteredValues.push(values[i]);\n      }\n    }\n  }\n\n  return filteredValues.join(separator || \"\");\n};\nexport var isNullOrWhiteSpace = function isNullOrWhiteSpace(value) {\n  return !value || value === '' || !value.trim();\n};\nexport var escapeRegExp = function escapeRegExp(text) {\n  return text === null || text === void 0 ? void 0 : text.replace(/[.*+\\-?^${}()|[\\]\\\\]/g, '\\\\$&'); // $& means the whole matched string\n};\nexport var replaceAll = function replaceAll(str, find, replace) {\n  return str === null || str === void 0 ? void 0 : str.replace(new RegExp(escapeRegExp(find), 'g'), replace);\n};\nexport var isNumeric = function isNumeric(value) {\n  var reg = new RegExp('^\\\\d+$');\n  return reg.test(value);\n};\nexport var capitalize = function capitalize(value) {\n  if (!isNullOrWhiteSpace(value)) {\n    var result = \"\";\n    var wordBuilder = \"\";\n    var stopChars = [\" \", \"-\", \",\", \".\", \"&\", \"|\"];\n    var idx = 0;\n\n    while (idx <= value.length) {\n      var currentValue = idx < value.length ? value[idx] : \"\";\n\n      if (currentValue !== \"\" && !stopChars.includes(currentValue)) {\n        wordBuilder += currentValue;\n      } else {\n        var word = wordBuilder.toString();\n\n        if (word.length > 3 && !isNumeric(word[0]) && !isNumeric(word[word.length - 1])) {\n          result += \"\".concat(word.substring(0, 1).toUpperCase()).concat(word.substring(1).toLowerCase()).concat(currentValue);\n        } else {\n          result += \"\".concat(word).concat(currentValue);\n        }\n\n        wordBuilder = \"\";\n      }\n\n      idx++;\n    }\n\n    return result;\n  }\n\n  return value;\n};\nexport var hasWhiteSpace = function hasWhiteSpace(s) {\n  return s.indexOf(' ') >= 0;\n};\nexport var shortCut = function shortCut(value, take) {\n  var result = value ? value.trim() : value;\n\n  if (result && take > 0 && result.length > take + 3) {\n    var checkList = [' ', '.', ',', ':', ';', '?', '!'];\n    var trailingChar = result.substring(take, take + 1);\n    result = result.substring(0, take);\n\n    if (!checkList.includes(trailingChar)) {\n      result = result.substring(0, result.lastIndexOf(' ')).trim();\n    }\n\n    while (checkList.includes(result[result.length - 1])) {\n      result = result.substring(0, result.length - 1).trim();\n    }\n\n    result = result.trim() + \"...\";\n  }\n\n  return result;\n};","map":null,"metadata":{},"sourceType":"module"}