{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport _toConsumableArray from \"E:/current_project/PPH/tfs/Website/website/node_modules/next/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport React, { useState, useEffect } from 'react';\nimport AddressHistoryItem from './address-history-item';\n\nvar AddressHistory = function AddressHistory(_ref) {\n  var formData = _ref.formData,\n      minHistoryMonths = _ref.minHistoryMonths,\n      parentContainer = _ref.parentContainer;\n  var collectionName = parentContainer ? \"\".concat(parentContainer, \".addresses\") : \"addresses\";\n\n  var _useState = useState([]),\n      addresses = _useState[0],\n      setAddresses = _useState[1];\n\n  var _useState2 = useState(null),\n      historyUpdated = _useState2[0],\n      setHistoryUpdated = _useState2[1];\n\n  useEffect(function () {\n    if (!formData.addresses) {\n      appendAddress({});\n    } else {\n      var addressHistory = formData.addresses.map(function (value, index) {\n        return {\n          address1: value.address1,\n          address2: value.address2,\n          address3: value.address3,\n          town: value.town,\n          county: value.county,\n          postcode: value.postcode,\n          fromDate: value.fromDate,\n          timeAtAddressMonths: value.timeAtAddressMonths ? parseInt(value.timeAtAddressMonths) : 0,\n          timeAtAddressYears: value.timeAtAddressYears ? parseInt(value.timeAtAddressYears) : 0,\n          totalMonthsAtAddress: value.totalMonthsAtAddress ? parseInt(value.totalMonthsAtAddress) : 0\n        };\n      });\n      setAddresses(addressHistory);\n    }\n  }, []);\n  useEffect(function () {\n    if (historyUpdated) {\n      refreshHistoryItemsList();\n    }\n  }, [historyUpdated]);\n\n  var appendAddress = function appendAddress(props) {\n    setAddresses([].concat(_toConsumableArray(addresses), [props]));\n  };\n\n  var removeAddress = function removeAddress(index) {\n    setAddresses([].concat(_toConsumableArray(addresses.slice(0, index)), _toConsumableArray(addresses.slice(index + 1))));\n  };\n\n  var updateAddress = function updateAddress(data, index) {\n    setAddresses([].concat(_toConsumableArray(addresses.slice(0, index)), [data], _toConsumableArray(addresses.slice(index + 1))));\n  };\n\n  var _onTimePeriodUpdate = function onTimePeriodUpdate(totalMonths, index) {\n    updateAddress({\n      totalMonthsAtAddress: totalMonths !== null && totalMonths !== void 0 ? totalMonths : 0\n    }, index);\n    setHistoryUpdated(Date.now());\n  };\n\n  var refreshHistoryItemsList = function refreshHistoryItemsList() {\n    if (addresses.length > 0) {\n      var _items$totalMonthsAtA;\n\n      var totalHistory = 0; //create new array instance here\n\n      var items = addresses.slice(0);\n      items.forEach(function (address, index) {\n        var _parseInt, _address$totalMonthsA;\n\n        totalHistory += (_parseInt = parseInt((_address$totalMonthsA = address.totalMonthsAtAddress) !== null && _address$totalMonthsA !== void 0 ? _address$totalMonthsA : \"0\")) !== null && _parseInt !== void 0 ? _parseInt : 0;\n      });\n\n      if (totalHistory < minHistoryMonths && (items.length == 1 || ((_items$totalMonthsAtA = items[items.length - 1].totalMonthsAtAddress) !== null && _items$totalMonthsAtA !== void 0 ? _items$totalMonthsAtA : 0) > 0)) {\n        appendAddress({\n          totalMonthsAtAddress: 0\n        });\n      } else {\n        var itemsCountToRemove = 0;\n\n        while (items.length > 1 && totalHistory >= minHistoryMonths && totalHistory - ((_items$totalMonthsAtA2 = items[items.length - 1].totalMonthsAtAddress) !== null && _items$totalMonthsAtA2 !== void 0 ? _items$totalMonthsAtA2 : 0) >= minHistoryMonths) {\n          var _items$totalMonthsAtA2;\n\n          items = items.slice(0, -1);\n          itemsCountToRemove += 1;\n          totalHistory = 0;\n          items.forEach(function (address, index) {\n            var _address$totalMonthsA2;\n\n            totalHistory += (_address$totalMonthsA2 = address.totalMonthsAtAddress) !== null && _address$totalMonthsA2 !== void 0 ? _address$totalMonthsA2 : 0;\n          });\n        }\n\n        if (itemsCountToRemove > 0) {\n          setAddresses(addresses.slice(0, -itemsCountToRemove));\n        }\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsx(React.Fragment, {\n    children: addresses.map(function (item, index) {\n      return /*#__PURE__*/_jsx(React.Fragment, {\n        children: /*#__PURE__*/_jsx(AddressHistoryItem, {\n          addressData: item,\n          title: index === 0 ? \"Current Address\" : \"Previous Address \".concat(index),\n          fromDateRequired: index === 0,\n          timeAtAddressRequired: index !== 0,\n          collectionName: collectionName,\n          index: index,\n          onTimePeriodUpdate: function onTimePeriodUpdate(totalMonths) {\n            _onTimePeriodUpdate(totalMonths, index);\n          }\n        })\n      }, index);\n    })\n  });\n};\n\nexport default AddressHistory;","map":null,"metadata":{},"sourceType":"module"}