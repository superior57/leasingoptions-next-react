{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport { VehicleStorageTypes } from \"enums/VehicleStorageTypes\";\nimport { isNullOrWhiteSpace } from \"helpers/stringHelper\";\nimport { isNullOrEmpty } from \"helpers/helpers\";\nexport var VehiclesStorageProvider = /*#__PURE__*/function () {\n  function VehiclesStorageProvider() {\n    _classCallCheck(this, VehiclesStorageProvider);\n  }\n\n  _createClass(VehiclesStorageProvider, null, [{\n    key: \"getTriggerMaxSize\",\n    value: function getTriggerMaxSize(storageType) {\n      switch (storageType) {\n        case VehicleStorageTypes.History:\n          return 4;\n\n        default:\n          return null;\n      }\n    }\n  }, {\n    key: \"getStorageMaxSize\",\n    value: function getStorageMaxSize(storageType) {\n      switch (storageType) {\n        case VehicleStorageTypes.Garage:\n          return 4;\n\n        case VehicleStorageTypes.History:\n          return 20;\n\n        default:\n          return null;\n      }\n    }\n  }, {\n    key: \"getStorageName\",\n    value: function getStorageName(storageType) {\n      switch (storageType) {\n        case VehicleStorageTypes.Garage:\n          return \"garage\";\n\n        case VehicleStorageTypes.History:\n          return \"history\";\n\n        default:\n          return null;\n      }\n    }\n  }, {\n    key: \"getItems\",\n    value: function getItems(storageType) {\n      var items = null;\n      var storageName = this.getStorageName(storageType);\n\n      if (!isNullOrWhiteSpace(storageName)) {\n        items = JSON.parse(localStorage.getItem(storageName));\n      }\n\n      if (!items) {\n        items = [];\n      }\n\n      var requiredSize = this.getStorageMaxSize(storageType);\n\n      if (items.length < requiredSize) {\n        var itemsToAdd = requiredSize - items.length;\n\n        for (var i = 0; i < itemsToAdd; i++) {\n          items.push(null);\n        }\n      }\n\n      return items;\n    }\n  }, {\n    key: \"getItem\",\n    value: function getItem(storageType, itemId) {\n      var items = this.getItems(storageType);\n      var item = items.find(function (item) {\n        return item && item.id === itemId;\n      });\n      return item;\n    }\n  }, {\n    key: \"addItem\",\n    value: function addItem(storageType, item, index) {\n      var result = false;\n      var items = this.getItems(storageType);\n      var storageMaxSize = this.getStorageMaxSize(storageType);\n      var indexHasValue = !isNullOrEmpty(index);\n\n      if (!indexHasValue && items.length < storageMaxSize || indexHasValue && index >= 0 && index < storageMaxSize) {\n        if (indexHasValue) {\n          items[index] = item;\n        } else {\n          items.push(item);\n        }\n\n        result = this.persistItems(storageType, items);\n      }\n\n      return result;\n    }\n  }, {\n    key: \"updateItem\",\n    value: function updateItem(storageType, item) {\n      var result = false;\n      var items = this.getItems(storageType);\n      var existingItem = items.find(function (existingItem) {\n        return existingItem && existingItem.id === item.id && existingItem.index === item.index;\n      });\n\n      if (existingItem) {\n        items[items.indexOf(existingItem)] = item;\n        result = this.persistItems(storageType, items);\n      }\n\n      return result;\n    }\n  }, {\n    key: \"removeItem\",\n    value: function removeItem(storageType, itemId) {\n      var result = false;\n      var items = this.getItems(storageType);\n      var item = items.find(function (item) {\n        return item && item.id === itemId;\n      });\n\n      if (item) {\n        items[items.indexOf(item)] = null;\n        result = this.persistItems(storageType, items);\n      }\n\n      return result;\n    }\n  }, {\n    key: \"clear\",\n    value: function clear(storageType) {\n      var storageName = this.getStorageName(storageType);\n\n      if (!isNullOrWhiteSpace(storageName)) {\n        localStorage.removeItem(storageName);\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"persistItems\",\n    value: function persistItems(storageType, vehicleItems) {\n      var storageName = this.getStorageName(storageType);\n\n      if (!isNullOrWhiteSpace(storageName)) {\n        localStorage.setItem(storageName, JSON.stringify(vehicleItems));\n        return true;\n      }\n\n      return false;\n    }\n  }]);\n\n  return VehiclesStorageProvider;\n}();","map":null,"metadata":{},"sourceType":"module"}