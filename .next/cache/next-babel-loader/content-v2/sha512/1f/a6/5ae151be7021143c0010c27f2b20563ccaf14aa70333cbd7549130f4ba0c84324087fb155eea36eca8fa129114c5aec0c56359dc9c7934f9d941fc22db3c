{"ast":null,"code":"import { VehicleTypes } from 'enums/VehicleTypes';\nimport { CustomContentTypes } from 'enums/CustomContentTypes';\nimport { LeasingDealTypes } from 'enums/LeasingDealTypes';\nimport { getBaseUrl } from 'helpers/urlsHelper';\nimport { ModelPageMetaTitle, ModelPageMetaDescription } from 'helpers/seoHelper';\nimport { GetAggregateOffer } from 'helpers/schemaHelper';\nimport { isNullOrWhiteSpace, capitalize } from 'helpers/stringHelper';\nimport { getLOSSRFetchHeaders } from 'helpers/apiHelper';\nimport { GetCanonicalUrl, GetShortModelUrl } from \"helpers/urlHelper\";\nimport { GetProperManufacturerName, GetFriendlyName } from 'helpers/helpers';\nimport { getVehiclesFilter } from 'helpers/vehiclesFilterHelper';\nimport { ContentService } from 'business-logic/contentService';\nimport { dispatchUpdateDealToggle, dispatchUpdateVehicleFilterSearch } from 'redux/dispatches/dispatchs';\nimport { GetModels, GetManufacturersModelsGarage, GetCapId, GetVehicleImage, GetModelGalleryImages, GetModelReview, GetVehicleModelDealsSummary, GetVehicleAlternativeModels, GetRecommendedForModel } from 'business-logic/vehicleService';\nexport const getProps = async context => {\n  var _GetCanonicalUrl;\n\n  const vehiclesFilter = getVehiclesFilter(context);\n  const vehicleType = vehiclesFilter.vehicleType;\n  const leasingDealType = vehiclesFilter.leasingDealType;\n\n  if (vehicleType === VehicleTypes.None || leasingDealType === LeasingDealTypes.None) {\n    //Do we have custom page to show?\n    context.res.writeHead(404);\n    context.res.end();\n    return;\n  }\n\n  const makeUrl = context.query.make;\n  const shortModelUrl = context.query.shortModel;\n  const modelUrl = context.query.model; //TODO: should allow just existing makes - critical\n\n  if (isNullOrWhiteSpace(makeUrl)) {\n    context.res.writeHead(302, {\n      Location: vehicleType === VehicleTypes.Commercial ? '/van-leasing' : '/car-leasing'\n    });\n    context.res.end();\n    return;\n  }\n\n  const fetchHeaders = getLOSSRFetchHeaders(context);\n  const shortModels = (await GetModels(vehicleType, makeUrl, fetchHeaders)).data;\n\n  if (!shortModels) {\n    context.res.writeHead(302, {\n      Location: vehicleType === VehicleTypes.Commercial ? '/van-leasing' : '/car-leasing'\n    });\n    context.res.end();\n    return;\n  }\n\n  const shortModel = shortModels.find(x => x.id == shortModelUrl);\n\n  if (!shortModel) {\n    context.res.writeHead(302, {\n      Location: (vehicleType === VehicleTypes.Commercial ? '/van-leasing/' : '/car-leasing/') + makeUrl\n    });\n    context.res.end();\n    return;\n  }\n\n  let model = null;\n\n  if (!isNullOrWhiteSpace(modelUrl)) {\n    const models = (await GetManufacturersModelsGarage(vehicleType, makeUrl, fetchHeaders)).data || [];\n    model = models.find(x => x.id == modelUrl);\n\n    if (!model) {\n      context.res.writeHead(302, {\n        Location: (vehicleType === VehicleTypes.Commercial ? '/van-leasing/' : '/car-leasing/') + makeUrl + '/' + shortModelUrl\n      });\n      context.res.end();\n      return;\n    }\n  }\n\n  await dispatchUpdateVehicleFilterSearch(context, vehiclesFilter);\n\n  if (vehicleType === VehicleTypes.Car) {\n    //TODO: set from filter?\n    dispatchUpdateDealToggle(context);\n  }\n\n  const alternativeModels = (await GetVehicleAlternativeModels(vehicleType, makeUrl, shortModel.id, fetchHeaders)).data; //Why do we need them on server-side?\n\n  const topRecommended = (await GetRecommendedForModel(null, null, vehicleType, leasingDealType, makeUrl, shortModel.id, fetchHeaders)).data;\n  let modelImage = null;\n  let modelGallery = null;\n  let modelReview = null;\n  let vehicleModelSchema = null;\n  const capId = (await GetCapId(makeUrl, shortModel.id, fetchHeaders)).data;\n\n  if (capId) {\n    modelImage = (await GetVehicleImage(vehicleType, capId, fetchHeaders)).data;\n    modelGallery = (await GetModelGalleryImages(vehicleType, capId, 750, 500, fetchHeaders)).data;\n\n    if (isNullOrWhiteSpace(modelImage) && modelGallery && modelGallery.length > 0) {\n      modelImage = modelGallery[0];\n    }\n  }\n\n  try {\n    //TODO: BoVehicleReview casting is missing. Needs to be checked and implemented.\n    modelReview = (await GetModelReview(vehicleType, makeUrl, shortModel.id, model ? model.id : null, fetchHeaders)).data;\n  } catch (e) {} //Is vehicle type param required?\n\n\n  let pageContent = (await ContentService.GetModelPageContent(CustomContentTypes.ModelAttachments, vehicleType === VehicleTypes.Commercial ? LeasingDealTypes.Van : LeasingDealTypes.Personal, makeUrl, shortModel.text)).data;\n  const makeName = capitalize(GetProperManufacturerName(GetFriendlyName(makeUrl)).toUpperCase()); //TODO: get original make name instead of GetFriendlyName\n\n  const modelName = capitalize((model ? model.text : shortModel.text).toUpperCase());\n  let title = `${makeName} ${modelName} ${vehicleType === VehicleTypes.Commercial ? 'Van' : 'Car'} Lease`;\n  const description = (pageContent === null || pageContent === void 0 ? void 0 : pageContent.text) || null; //Description = customContent != null && !string.IsNullOrEmpty(customContent.Text) ? customContent.Text.Replace(\"#manufacturer#\", makeName).Replace(\"<br/>\", \"\").Replace(\"<br>\", \"\") : null - implement?\n  /// hack the business wanted \n\n  if ((makeName === null || makeName === void 0 ? void 0 : makeName.toLocaleLowerCase()) == \"bmw\" && (modelName === null || modelName === void 0 ? void 0 : modelName.toLocaleLowerCase()) == \"m8\") {\n    title = \"BMW M8 Competition Car Lease\";\n  }\n\n  ; //----MetaData----\n\n  const url = context.req.url.replace(\"/internal\", \"\");\n  const metaData = model ? {\n    title: null,\n    description: null,\n    keywords: null,\n    canonicalUrl: (_GetCanonicalUrl = GetCanonicalUrl(getBaseUrl(url))) === null || _GetCanonicalUrl === void 0 ? void 0 : _GetCanonicalUrl.toLowerCase(),\n    noIndex: true,\n    imageUrl: modelImage\n  } : {\n    title: capitalize(pageContent === null || pageContent === void 0 ? void 0 : pageContent.metaPageTitle) || null,\n    description: (pageContent === null || pageContent === void 0 ? void 0 : pageContent.metaDescription) || null,\n    keywords: (pageContent === null || pageContent === void 0 ? void 0 : pageContent.metaKeywords) || null,\n    canonicalUrl: GetCanonicalUrl(getBaseUrl(url)),\n    imageUrl: modelImage\n  };\n\n  if (isNullOrWhiteSpace(metaData.title)) {\n    metaData.title = ModelPageMetaTitle(leasingDealType, makeName, modelName);\n  }\n\n  if (isNullOrWhiteSpace(metaData.description)) {\n    metaData.description = ModelPageMetaDescription(leasingDealType, makeName, modelName);\n  }\n\n  if (!isNullOrWhiteSpace(metaData.description)) {\n    metaData.description = metaData.description.replace(/[\\r\\n]+/g, \" \").trim();\n  } //----//MetaData----\n\n\n  try {\n    //For ShortModel page only\n    if (!model) {\n      var modelSummary = (await GetVehicleModelDealsSummary(makeUrl, shortModel.id, fetchHeaders)).data;\n\n      if (modelSummary) {\n        //Can we buid it from other data in MetaHead?\n        vehicleModelSchema = Object.assign({\n          '@type': 'Car'\n        }, {\n          brand: makeName,\n          model: modelName,\n          name: `${makeName} ${modelName}`,\n          description: metaData.description,\n          url: GetCanonicalUrl(GetShortModelUrl(false, null, leasingDealType, makeUrl, shortModel.id, null)),\n          image: modelImage,\n          vehicleSpecialUsage: \"Leasing\",\n          offers: GetAggregateOffer(modelSummary.lowPrice, modelSummary.highPrice, modelSummary.count)\n        });\n      }\n    }\n  } catch (e) {}\n\n  return {\n    props: {\n      title: title,\n      description: description,\n      metaData: metaData,\n      vehicleModelSchema: vehicleModelSchema,\n      modelReview: modelReview,\n      modelImage: modelImage,\n      modelGallery: modelGallery,\n      topRecommended: topRecommended,\n      alternativeModels: alternativeModels,\n      //if we pass whole filter why do we need separate properties\n      vehicleType: vehiclesFilter.vehicleType,\n      make: vehiclesFilter.manufacturerUrl,\n      model: vehiclesFilter.shortModTextUrl,\n      vehicleFilter: vehiclesFilter\n    }\n  };\n};","map":null,"metadata":{},"sourceType":"module"}