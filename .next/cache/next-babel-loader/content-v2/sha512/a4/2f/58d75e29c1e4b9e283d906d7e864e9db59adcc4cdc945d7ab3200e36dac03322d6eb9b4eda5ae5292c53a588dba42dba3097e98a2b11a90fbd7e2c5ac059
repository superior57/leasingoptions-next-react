{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { useState, useEffect, useContext } from 'react';\nimport { connect } from 'react-redux';\nimport accounting from 'accounting';\nimport Modal from 'react-bootstrap/Modal';\nimport { useForm, FormContext } from \"react-hook-form\";\nimport style from './px.module.scss';\nimport { setPrivacyAccepted } from 'helpers/cookiesHelper';\nimport { EnquiryService } from \"business-logic/enquiryService\";\nimport { ValueYourCarService } from \"business-logic/valueYourCarService\";\nimport { MarketingCommunicationsService } from 'business-logic/marketingCommunicationsService';\nimport { VehicleTypes } from 'enums/VehicleTypes';\nimport { ValuationEnquiry } from \"types/enquiry/ValuationEnquiry\";\nimport { PhoneNumberIsValid, EmailAddressIsValid } from 'helpers/validation';\nimport { getGAClientId } from 'helpers/analytics';\nimport ModalContext from 'components/HOCs/modal/modalContext';\nimport MarketingConsent from 'components/marketing-consent';\nimport PrivacyPolicyConsent from 'components/privacy-policy-consent';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faSpinner } from \"@fortawesome/pro-regular-svg-icons\";\nimport Search from 'components/search';\nimport { GetThankYouPageUrl } from 'helpers/urlHelper';\nimport { useRouter } from 'next/router';\nimport { GetSalesPeople } from 'business-logic/systemService';\nimport { GetModels } from 'business-logic/vehicleService';\n\nfunction mapStateToProps(state) {\n  return {\n    carManufacturerList: state.carManufacturerList\n  };\n}\n\nconst ModalPartExchange = (_ref) => {\n  var _errors$mileage, _errors$email, _errors$telephone;\n\n  let {\n    isInternal,\n    onRequestClose,\n    registration = '',\n    carManufacturerList\n  } = _ref,\n      otherProps = _objectWithoutProperties(_ref, [\"isInternal\", \"onRequestClose\", \"registration\", \"carManufacturerList\"]);\n\n  const {\n    0: isLoading,\n    1: setIsLoading\n  } = useState(false);\n  const {\n    0: marketingConsentIsVerifying,\n    1: setMarketingConsentIsVerifying\n  } = useState(false);\n  const {\n    0: emailAddressConsent,\n    1: setEmailAddressConsent\n  } = useState(null);\n  const router = useRouter();\n  const {\n    0: modelsList,\n    1: setModelsList\n  } = useState([]);\n  const {\n    0: selectedMake,\n    1: setSelectedMake\n  } = useState(null);\n  const {\n    0: salesPeopleList,\n    1: setSalesPeopleList\n  } = useState([]);\n  const {\n    0: valuationData,\n    1: setValuationData\n  } = useState(null); //used later to close current dialog and open searh\n\n  const modalContext = useContext(ModalContext);\n  const methods = useForm();\n  const {\n    register,\n    handleSubmit,\n    errors\n  } = methods;\n  useEffect(() => {\n    GetSalesPeople().then(result => {\n      setSalesPeopleList(result.data);\n    }).catch(error => {\n      console.log(error);\n    });\n  }, []);\n  useEffect(() => {\n    if (selectedMake) {\n      GetModels(VehicleTypes.Car, selectedMake).then(data => {\n        setModelsList(data.data);\n      });\n    } else {\n      setModelsList([]);\n    }\n  }, [selectedMake]);\n\n  const onMakeSelected = evt => {\n    setSelectedMake(evt.target.value);\n  }; //Fires only when input loses focus and triggers marketing-consent to reinitialize\n\n\n  const onEmailFocusOut = event => {\n    if (!isInternal) {\n      if (event.target.value && EmailAddressIsValid(event.target.value)) {\n        setEmailAddressConsent(event.target.value);\n      } else {\n        setEmailAddressConsent(null);\n      }\n    }\n  };\n\n  const handleSearchClick = evt => {\n    modalContext.hideModal();\n    modalContext.showModal(Search, {\n      show: true,\n      title: \"Start Your Search\"\n    });\n  };\n\n  const onSubmit = data => {\n    setIsLoading(false);\n\n    if (!isLoading && !marketingConsentIsVerifying) {\n      setIsLoading(true); //Send valuation request\n\n      var request = {\n        vrm: data.vrm,\n        mileage: data.mileage,\n        fullName: data.fullName,\n        telephone: data.telephone,\n        email: data.email,\n        postCode: data.postCode\n      };\n      var promise = new Promise(resolve => {\n        ValueYourCarService.GetValuation(request).then(valuationResult => {\n          var _valuationResult$data;\n\n          if (valuationResult !== null && valuationResult !== void 0 && (_valuationResult$data = valuationResult.data) !== null && _valuationResult$data !== void 0 && _valuationResult$data.id) {\n            setValuationData(valuationResult.data);\n            let communicationTypes = null; //Should check if form was visible or user did any updates to those fields\n            //If no form is displayed data.contactEmail and other checkbox properties are \"undefined\"\n\n            if (!isInternal && data.contactEmail != undefined && data.allowedCommunicationTypes) {\n              communicationTypes = data.allowedCommunicationTypes;\n            }\n\n            const enquiry = new ValuationEnquiry();\n            enquiry.vrm = data.vrm;\n            enquiry.mileage = data.mileage;\n            enquiry.fullName = data.fullName;\n            enquiry.telephone = data.telephone;\n            enquiry.email = data.email;\n            enquiry.postCode = data.postCode;\n            enquiry.allowedCommunicationTypes = communicationTypes;\n            enquiry.valuationCap = valuationResult.data.cap;\n            enquiry.valuationId = valuationResult.data.id;\n            enquiry.valuationValue = valuationResult.data.value;\n            enquiry.make = data.make.replace(\"-\", \" \");\n            enquiry.model = data.model.replace(\"-\", \" \");\n            enquiry.salesPersonId = isInternal ? data.salesPersonId : null;\n            enquiry.gaClientId = getGAClientId();\n            EnquiryService.SubmitValuationEnquiry(enquiry).then(result => {\n              //TODO; check is required\n              if (result.data) {\n                if (!isInternal) {\n                  let expiryDate = new Date();\n                  expiryDate.setFullYear(expiryDate.getFullYear() + 1);\n\n                  if (data.privacyConfirmed) {\n                    setPrivacyAccepted(expiryDate);\n                  }\n\n                  if (communicationTypes) {\n                    MarketingCommunicationsService.SetToSeenMarketingForm(data.email, expiryDate);\n                  }\n                }\n\n                resolve(true);\n              } else {\n                resolve(false);\n              }\n            });\n          } else {\n            setValuationData(null);\n            resolve(false);\n          }\n        });\n      });\n      promise.then(result => {\n        //do nothing\n        router.push(GetThankYouPageUrl(false, \"valuation\"));\n      }).catch(function (error) {\n        console.log(error);\n      }).finally(() => {\n        setIsLoading(false);\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsx(React.Fragment, {\n    children: /*#__PURE__*/_jsxs(Modal, _objectSpread(_objectSpread({\n      onHide: onRequestClose,\n      centered: true\n    }, otherProps), {}, {\n      children: [/*#__PURE__*/_jsx(Modal.Header, {\n        className: \"d-flex flex-nowrap justify-content-center align-items-center\",\n        closeButton: true,\n        children: /*#__PURE__*/_jsx(Modal.Title, {\n          className: \"text-left mb-0\",\n          children: valuationData == null ? \"Value Your Part Exchange\" : \"Your Valuation Is:\"\n        })\n      }), /*#__PURE__*/_jsx(Modal.Body, {\n        className: `${style['px']}`,\n        children: /*#__PURE__*/_jsx(FormContext, _objectSpread(_objectSpread({}, methods), {}, {\n          children: /*#__PURE__*/_jsxs(\"form\", {\n            className: \"px-md-3\",\n            onSubmit: handleSubmit(onSubmit),\n            children: [valuationData == null && /*#__PURE__*/_jsxs(_Fragment, {\n              children: [/*#__PURE__*/_jsxs(\"p\", {\n                className: \"mb-4\",\n                children: [\"We and our partners will give you a fair value for your part-exchange.\", /*#__PURE__*/_jsx(\"br\", {}), \"You can even have it collected for FREE!\"]\n              }), /*#__PURE__*/_jsx(\"p\", {\n                children: \"Simply enter the number plate of the car you'd like a valuation for below.\"\n              }), /*#__PURE__*/_jsxs(\"div\", {\n                className: \"row\",\n                children: [/*#__PURE__*/_jsxs(\"div\", {\n                  className: \"col-24 col-lg-12 form-group\",\n                  children: [/*#__PURE__*/_jsx(\"div\", {\n                    id: \"yourReg\",\n                    children: /*#__PURE__*/_jsx(\"input\", {\n                      className: `${style[\"your-registration\"]} ${errors.vrm ? style['is-invalid'] : \"\"}`,\n                      type: \"text\",\n                      placeholder: \"ENTER YOUR REG\",\n                      defaultValue: registration,\n                      maxLength: 10,\n                      name: \"vrm\",\n                      ref: register({\n                        required: true\n                      })\n                    })\n                  }), errors.vrm && /*#__PURE__*/_jsx(\"span\", {\n                    className: \"invalid-feedback d-block\",\n                    children: \"This field is required\"\n                  })]\n                }), /*#__PURE__*/_jsxs(\"div\", {\n                  className: \"col-24 col-lg-12 form-group\",\n                  children: [/*#__PURE__*/_jsx(\"input\", {\n                    type: \"text\",\n                    className: `form-control ${errors.mileage ? \"is-invalid\" : \"\"}`,\n                    placeholder: \"Enter Your Current Mileage (required)\",\n                    maxLength: 10,\n                    name: \"mileage\",\n                    ref: register({\n                      required: {\n                        value: true,\n                        message: \"This field is required\"\n                      },\n                      pattern: {\n                        value: /^\\d+$/,\n                        message: \"A valid numeric value is expected\"\n                      }\n                    })\n                  }), errors.mileage && /*#__PURE__*/_jsx(\"span\", {\n                    className: \"invalid-feedback d-block\",\n                    children: (_errors$mileage = errors.mileage) === null || _errors$mileage === void 0 ? void 0 : _errors$mileage.message\n                  })]\n                })]\n              }), /*#__PURE__*/_jsx(\"h3\", {\n                children: \"I'm interested in leasing:\"\n              }), /*#__PURE__*/_jsxs(\"div\", {\n                className: \"row\",\n                children: [/*#__PURE__*/_jsxs(\"div\", {\n                  className: \"col-24 col-lg-12 form-group\",\n                  children: [/*#__PURE__*/_jsxs(\"label\", {\n                    children: [\"Make \", /*#__PURE__*/_jsx(\"span\", {\n                      className: style[\"required\"],\n                      children: \"(Required)\"\n                    })]\n                  }), /*#__PURE__*/_jsxs(\"select\", {\n                    className: `form-control ${errors.make ? \"is-invalid\" : \"\"}`,\n                    onChange: evt => onMakeSelected(evt),\n                    name: \"make\",\n                    ref: register({\n                      required: true\n                    }),\n                    children: [/*#__PURE__*/_jsx(\"option\", {\n                      value: \"\",\n                      children: \"- Select Make -\"\n                    }), carManufacturerList === null || carManufacturerList === void 0 ? void 0 : carManufacturerList.map(make => /*#__PURE__*/_jsx(\"option\", {\n                      value: make.id,\n                      children: make.text\n                    }, make.id))]\n                  }), errors.make && /*#__PURE__*/_jsx(\"span\", {\n                    className: \"invalid-feedback d-block\",\n                    children: \"This field is required\"\n                  })]\n                }), /*#__PURE__*/_jsxs(\"div\", {\n                  className: \"col-24 col-lg-12 form-group\",\n                  children: [/*#__PURE__*/_jsxs(\"label\", {\n                    children: [\"Model \", /*#__PURE__*/_jsx(\"span\", {\n                      className: style[\"required\"],\n                      children: \"(Required)\"\n                    })]\n                  }), /*#__PURE__*/_jsxs(\"select\", {\n                    className: `form-control ${errors.model ? \"is-invalid\" : \"\"}`,\n                    name: \"model\",\n                    ref: register({\n                      required: true\n                    }),\n                    children: [/*#__PURE__*/_jsx(\"option\", {\n                      value: \"\",\n                      children: \"- Select Model -\"\n                    }), modelsList === null || modelsList === void 0 ? void 0 : modelsList.map(model => /*#__PURE__*/_jsx(\"option\", {\n                      value: model.id,\n                      children: model.text\n                    }, model.id))]\n                  }), errors.model && /*#__PURE__*/_jsx(\"span\", {\n                    className: \"invalid-feedback d-block\",\n                    children: \"This field is required\"\n                  })]\n                })]\n              }), /*#__PURE__*/_jsxs(\"div\", {\n                className: \"row\",\n                children: [/*#__PURE__*/_jsxs(\"div\", {\n                  className: \"col-24 col-lg-12 form-group\",\n                  children: [/*#__PURE__*/_jsxs(\"label\", {\n                    children: [\"Full Name \", /*#__PURE__*/_jsx(\"span\", {\n                      className: style[\"required\"],\n                      children: \"(Required)\"\n                    })]\n                  }), /*#__PURE__*/_jsx(\"input\", {\n                    type: \"text\",\n                    className: \"form-control\",\n                    placeholder: \"Full Name\",\n                    maxLength: 100,\n                    name: \"fullName\",\n                    ref: register({\n                      required: true\n                    })\n                  }), errors.fullName && /*#__PURE__*/_jsx(\"span\", {\n                    className: \"invalid-feedback d-block\",\n                    children: \"This field is required\"\n                  })]\n                }), /*#__PURE__*/_jsxs(\"div\", {\n                  className: \"col-24 col-lg-12 form-group\",\n                  children: [/*#__PURE__*/_jsxs(\"label\", {\n                    children: [\"Email \", /*#__PURE__*/_jsx(\"span\", {\n                      className: style[\"required\"],\n                      children: \"(Required)\"\n                    })]\n                  }), /*#__PURE__*/_jsx(\"input\", {\n                    type: \"text\",\n                    className: `form-control ${errors.email ? \"is-invalid\" : \"\"}`,\n                    placeholder: \"Email\",\n                    maxLength: 70,\n                    name: \"email\",\n                    onBlur: onEmailFocusOut,\n                    ref: register({\n                      required: 'This field is required',\n                      validate: value => EmailAddressIsValid(value) === true || 'Invalid email address'\n                    })\n                  }), errors.email && /*#__PURE__*/_jsx(\"span\", {\n                    className: \"invalid-feedback d-block\",\n                    children: (_errors$email = errors.email) === null || _errors$email === void 0 ? void 0 : _errors$email.message\n                  })]\n                })]\n              }), /*#__PURE__*/_jsxs(\"div\", {\n                className: \"row\",\n                children: [/*#__PURE__*/_jsxs(\"div\", {\n                  className: \"col-24 col-lg-12 form-group\",\n                  children: [/*#__PURE__*/_jsxs(\"label\", {\n                    children: [\"Telephone \", /*#__PURE__*/_jsx(\"span\", {\n                      className: style[\"required\"],\n                      children: \"(Required)\"\n                    })]\n                  }), /*#__PURE__*/_jsx(\"input\", {\n                    type: \"tel\",\n                    className: `form-control ${errors.telephone ? \"is-invalid\" : \"\"}`,\n                    placeholder: \"Telephone\",\n                    maxLength: 50,\n                    name: \"telephone\",\n                    ref: register({\n                      required: 'This field is required',\n                      validate: value => PhoneNumberIsValid(value) === true || 'Invalid phone number'\n                    })\n                  }), errors.telephone && /*#__PURE__*/_jsx(\"span\", {\n                    className: \"invalid-feedback d-block\",\n                    children: (_errors$telephone = errors.telephone) === null || _errors$telephone === void 0 ? void 0 : _errors$telephone.message\n                  })]\n                }), /*#__PURE__*/_jsxs(\"div\", {\n                  className: \"col-24 col-lg-12 form-group\",\n                  children: [/*#__PURE__*/_jsxs(\"label\", {\n                    children: [\"Post Code \", /*#__PURE__*/_jsx(\"span\", {\n                      className: style[\"required\"],\n                      children: \"(Required)\"\n                    })]\n                  }), /*#__PURE__*/_jsx(\"input\", {\n                    type: \"text\",\n                    className: `form-control ${errors.postCode ? \"is-invalid\" : \"\"}`,\n                    placeholder: \"Post Code\",\n                    maxLength: 10,\n                    name: \"postCode\",\n                    ref: register({\n                      required: true\n                    })\n                  }), errors.postCode && /*#__PURE__*/_jsx(\"span\", {\n                    className: \"invalid-feedback d-block\",\n                    children: \"This field is required\"\n                  })]\n                })]\n              }), isInternal && /*#__PURE__*/_jsx(\"div\", {\n                className: \"row\",\n                children: /*#__PURE__*/_jsxs(\"div\", {\n                  className: \"col-24 col-lg-12 form-group\",\n                  children: [/*#__PURE__*/_jsx(\"label\", {\n                    children: \"Salesperson \"\n                  }), /*#__PURE__*/_jsxs(\"select\", {\n                    className: \"form-control\",\n                    name: \"salesPersonId\",\n                    ref: register(),\n                    children: [/*#__PURE__*/_jsx(\"option\", {\n                      value: \"\",\n                      children: \"- Select Salesperson -\"\n                    }), salesPeopleList === null || salesPeopleList === void 0 ? void 0 : salesPeopleList.map(user => /*#__PURE__*/_jsx(\"option\", {\n                      value: user.id,\n                      children: user.fullName\n                    }, user.id))]\n                  })]\n                })\n              }), !isInternal ? /*#__PURE__*/_jsx(\"div\", {\n                className: \"row\",\n                children: /*#__PURE__*/_jsxs(\"div\", {\n                  className: \"col-24\",\n                  children: [/*#__PURE__*/_jsx(MarketingConsent, {\n                    emailAddress: emailAddressConsent,\n                    settings: {\n                      onVerificationStart: () => {\n                        setMarketingConsentIsVerifying(true);\n                      },\n                      onVerificationComplete: () => {\n                        setMarketingConsentIsVerifying(false);\n                      }\n                    }\n                  }), /*#__PURE__*/_jsx(PrivacyPolicyConsent, {})]\n                })\n              }) : null]\n            }), valuationData != null && /*#__PURE__*/_jsx(\"div\", {\n              className: \"row\",\n              children: /*#__PURE__*/_jsxs(\"div\", {\n                className: \"col-24\",\n                children: [/*#__PURE__*/_jsxs(\"div\", {\n                  className: style[\"valuation-result\"],\n                  children: [/*#__PURE__*/_jsx(\"i\", {\n                    className: \"fal fa-gbp\"\n                  }), /*#__PURE__*/_jsx(\"span\", {\n                    dangerouslySetInnerHTML: {\n                      __html: accounting.formatMoney(valuationData.value)\n                    }\n                  })]\n                }), /*#__PURE__*/_jsx(\"p\", {\n                  children: \"This is an approximate value dependant on the condition, exact mileage, service history and other factors. To take this further or accept this please click on the link below.\"\n                }), /*#__PURE__*/_jsx(\"p\", {\n                  children: \"The amount you get may be more or less dependent on the factors mentioned above. Have you been offered more elsewhere? Tell our team!\"\n                })]\n              })\n            })]\n          })\n        }))\n      }), /*#__PURE__*/_jsx(Modal.Footer, {\n        children: /*#__PURE__*/_jsx(\"div\", {\n          className: \"w-100 row\",\n          children: /*#__PURE__*/_jsxs(\"div\", {\n            className: \"col-24 d-flex justify-content-center justify-content-md-end\",\n            children: [valuationData == null && /*#__PURE__*/_jsx(\"button\", {\n              type: \"button\",\n              className: \"btn btn-primary btn-lg\",\n              onClick: handleSubmit(onSubmit),\n              children: isLoading ? /*#__PURE__*/_jsx(FontAwesomeIcon, {\n                width: \"16\",\n                height: \"16\",\n                icon: faSpinner,\n                className: \"fa-spin\"\n              }) : \"Get Valuation\"\n            }), valuationData != null && /*#__PURE__*/_jsx(\"button\", {\n              type: \"button\",\n              className: \"btn btn-primary btn-lg\",\n              onClick: evt => handleSearchClick(evt),\n              children: \"Ready to find a new car?\"\n            })]\n          })\n        })\n      })]\n    }))\n  }); //}\n};\n\nexport default connect(mapStateToProps)(ModalPartExchange);","map":null,"metadata":{},"sourceType":"module"}