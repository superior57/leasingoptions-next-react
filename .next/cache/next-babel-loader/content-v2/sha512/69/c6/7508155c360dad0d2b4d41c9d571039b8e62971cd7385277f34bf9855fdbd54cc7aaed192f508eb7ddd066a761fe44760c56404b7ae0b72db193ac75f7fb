{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"E:\\\\current_project\\\\PPH\\\\tfs\\\\Website\\\\website\\\\components\\\\leasebot\\\\index.js\";\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport style from './leasebot.module.scss';\nimport PropTypes from 'prop-types';\nimport { LexRuntimeService } from \"@aws-sdk/client-lex-runtime-service-browser/LexRuntimeService\";\nimport { CognitoIdentityClient } from \"@aws-sdk/client-cognito-identity\";\nimport { fromCognitoIdentityPool } from \"@aws-sdk/credential-provider-cognito-identity\";\nimport { PostTextCommand } from \"@aws-sdk/client-lex-runtime-service-browser/commands/PostTextCommand\";\n\nclass LeaseBot extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"callback\", (err, data) => {\n      if (err) {\n        console.log(err, err.stack);\n        this.showError('Error:  ' + err.message + ' (see console for details)');\n      }\n\n      if (data) {\n        // capture the sessionAttributes for the next cycle\n        this.setState({\n          sessionAttributes: data.sessionAttributes\n        }); //sessionAttributes = data.sessionAttributes;\n        // show response and/or error/dialog status\n\n        this.showResponse(data);\n      }\n\n      var inputFieldText = document.getElementById('inputField'); // re-enable input\n\n      inputFieldText.value = '';\n      inputFieldText.locked = false;\n    });\n\n    this.state = {\n      data: '',\n      lexUserId: 'chatbot' + Date.now(),\n      sessionAttributes: {}\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentDidMount() {\n    document.getElementById(\"inputField\").focus();\n    this.lexRuntimeService = new LexRuntimeService({\n      region: \"eu-west-1\",\n      IdentityPoolId: this.props.IdentityPoolId,\n      credentials: fromCognitoIdentityPool({\n        client: new CognitoIdentityClient({\n          region: \"eu-west-1\"\n        }),\n        identityPoolId: this.props.IdentityPoolId // IDENTITY_POOL_ID\n\n      })\n    });\n    var params = {\n      botAlias: 'LeaseBot',\n      botName: this.props.botName,\n      inputText: 'Hi',\n      userId: this.state.lexUserId,\n      sessionAttributes: this.state.sessionAttributes\n    };\n    const postTextRequest = new PostTextCommand(params);\n    this.lexRuntimeService.send(postTextRequest, (err, data) => {\n      this.callback(err, data);\n    }); // this.lexruntime.postText(params, this.callback);\n  }\n\n  pushChat(event) {\n    event.preventDefault();\n    var inputFieldText = document.getElementById('inputField');\n\n    if (inputFieldText && inputFieldText.value && inputFieldText.value.trim().length > 0) {\n      // disable input to show we're sending it\n      var inputField = inputFieldText.value.trim();\n      inputFieldText.value = '...';\n      inputFieldText.locked = true; // send it to the Lex runtime\n\n      var params = {\n        botAlias: 'LeaseBot',\n        botName: this.props.botName,\n        inputText: inputField,\n        userId: this.state.lexUserId,\n        sessionAttributes: this.state.sessionAttributes\n      };\n      this.showRequest(inputField);\n      const postTextRequest = new PostTextCommand(params);\n      this.lexRuntimeService.send(postTextRequest, (err, data) => {\n        this.callback(err, data);\n      });\n    } // we always cancel form submission\n\n\n    return false;\n  }\n\n  showRequest(daText) {\n    var conversationDiv = document.getElementById('conversation');\n    var requestPara = document.createElement(\"P\");\n    requestPara.className = 'userRequest';\n    requestPara.appendChild(document.createTextNode(daText));\n    conversationDiv.appendChild(requestPara);\n    conversationDiv.scrollTop = conversationDiv.scrollHeight;\n  }\n\n  showError(daText) {\n    var conversationDiv = document.getElementById('conversation');\n    var errorPara = document.createElement(\"P\");\n    errorPara.className = 'lexError';\n    errorPara.appendChild(document.createTextNode(daText));\n    conversationDiv.appendChild(errorPara);\n    conversationDiv.scrollTop = conversationDiv.scrollHeight;\n  }\n\n  showResponse(lexResponse) {\n    var conversationDiv = document.getElementById('conversation');\n    var responsePara = document.createElement(\"P\");\n    responsePara.className = 'lexResponse';\n\n    if (lexResponse.message) {\n      responsePara.appendChild(document.createTextNode(lexResponse.message));\n      responsePara.appendChild(document.createElement('br'));\n    }\n\n    if (lexResponse.dialogState === 'ReadyForFulfillment') {\n      responsePara.appendChild(document.createTextNode('Ready for fulfillment')); // TODO:  show slot values\n    } else {\n      responsePara.appendChild(document.createTextNode(''));\n    }\n\n    conversationDiv.appendChild(responsePara);\n    conversationDiv.scrollTop = conversationDiv.scrollHeight;\n  }\n\n  handleChange(event) {\n    event.preventDefault();\n    this.setState({\n      data: event.target.value\n    });\n  }\n\n  render() {\n    const inputStyle = {\n      padding: '4px',\n      fontSize: 24,\n      width: '388px',\n      height: '40px',\n      borderRadius: '1px',\n      border: '10px'\n    };\n    const conversationStyle = {\n      width: '400px',\n      height: this.props.height,\n      border: 'px solid #ccc',\n      backgroundColor: this.props.backgroundColor,\n      padding: '4px',\n      overflow: 'scroll',\n      borderBottom: 'thin ridge #bfbfbf'\n    };\n    const chatcontainerStyle = {\n      backgroundColor: '#FFFFFF',\n      width: 408\n    };\n    const chatFormStyle = {\n      margin: '1px',\n      padding: '2px'\n    };\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"chatcontainer\",\n        className: `${style['chatcontainer']} ${style[this.props.visible]}`,\n        style: chatcontainerStyle,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"chatheader\",\n          className: style['chatheader'],\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            className: \"lazyload\",\n            alt: \"Leasing Options Leasebot will help you find the best deals 24/7!\",\n            width: \"50\",\n            height: \"50\",\n            \"data-src\": `${process.env.NEXT_PUBLIC_CDN}/website/static/leasebot.png`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 74\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"LeaseBot\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 268\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"conversation\",\n          className: style['conversation'],\n          style: conversationStyle\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          id: \"chatform\",\n          className: style['chatform'],\n          style: chatFormStyle,\n          onSubmit: this.pushChat.bind(this),\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            id: \"inputField\",\n            size: \"40\",\n            value: this.state.data,\n            placeholder: this.props.placeholder,\n            onChange: this.handleChange.bind(this),\n            style: inputStyle\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 17\n      }, this)\n    }, void 0, false);\n  }\n\n}\n\nLeaseBot.propTypes = {\n  botName: PropTypes.string,\n  IdentityPoolId: PropTypes.string.isRequired,\n  placeholder: PropTypes.string.isRequired,\n  backgroundColor: PropTypes.string,\n  height: PropTypes.number,\n  headerText: PropTypes.string\n};\nexport default LeaseBot;","map":{"version":3,"sources":["E:/current_project/PPH/tfs/Website/website/components/leasebot/index.js"],"names":["React","style","PropTypes","LexRuntimeService","CognitoIdentityClient","fromCognitoIdentityPool","PostTextCommand","LeaseBot","Component","constructor","props","err","data","console","log","stack","showError","message","setState","sessionAttributes","showResponse","inputFieldText","document","getElementById","value","locked","state","lexUserId","Date","now","handleChange","bind","componentDidMount","focus","lexRuntimeService","region","IdentityPoolId","credentials","client","identityPoolId","params","botAlias","botName","inputText","userId","postTextRequest","send","callback","pushChat","event","preventDefault","trim","length","inputField","showRequest","daText","conversationDiv","requestPara","createElement","className","appendChild","createTextNode","scrollTop","scrollHeight","errorPara","lexResponse","responsePara","dialogState","target","render","inputStyle","padding","fontSize","width","height","borderRadius","border","conversationStyle","backgroundColor","overflow","borderBottom","chatcontainerStyle","chatFormStyle","margin","visible","process","env","NEXT_PUBLIC_CDN","placeholder","propTypes","string","isRequired","number","headerText"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport style from './leasebot.module.scss';\r\nimport PropTypes from 'prop-types';\r\nimport { LexRuntimeService  } from \"@aws-sdk/client-lex-runtime-service-browser/LexRuntimeService\";\r\nimport { CognitoIdentityClient }  from \"@aws-sdk/client-cognito-identity\";\r\nimport { fromCognitoIdentityPool }  from \"@aws-sdk/credential-provider-cognito-identity\";\r\nimport { PostTextCommand  } from \"@aws-sdk/client-lex-runtime-service-browser/commands/PostTextCommand\";\r\nclass LeaseBot extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            data: '', \r\n            lexUserId: 'chatbot' + Date.now(), \r\n            sessionAttributes: {}\r\n        };\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n\r\n    componentDidMount() {      \r\n        document.getElementById(\"inputField\").focus();\r\n\r\n        this.lexRuntimeService = new LexRuntimeService({ \r\n            region: \"eu-west-1\",\r\n            IdentityPoolId: this.props.IdentityPoolId, \r\n            credentials: fromCognitoIdentityPool({\r\n                client: new CognitoIdentityClient({ region: \"eu-west-1\" }),\r\n                identityPoolId: this.props.IdentityPoolId // IDENTITY_POOL_ID\r\n            }),\r\n        });\r\n    \r\n        var params = {\r\n            botAlias: 'LeaseBot',\r\n            botName: this.props.botName,\r\n            inputText: 'Hi',\r\n            userId: this.state.lexUserId,      \r\n            sessionAttributes: this.state.sessionAttributes\r\n        };\r\n\r\n        const postTextRequest = new PostTextCommand(params);\r\n\r\n        this.lexRuntimeService.send(postTextRequest, (err, data) => {\r\n            this.callback(err, data);\r\n        });\r\n\r\n        // this.lexruntime.postText(params, this.callback);\r\n    }\r\n\r\n \r\n  \r\n    callback = (err, data) => {\r\n        if (err) {\r\n            console.log(err, err.stack);\r\n            this.showError('Error:  ' + err.message + ' (see console for details)')\r\n        }\r\n        if (data) {\r\n            // capture the sessionAttributes for the next cycle\r\n            this.setState({sessionAttributes: data.sessionAttributes})\r\n            //sessionAttributes = data.sessionAttributes;\r\n            // show response and/or error/dialog status\r\n            this.showResponse(data);\r\n        }\r\n        var inputFieldText = document.getElementById('inputField');\r\n        // re-enable input\r\n        inputFieldText.value = '';\r\n        inputFieldText.locked = false;\r\n    };\r\n\r\n    pushChat(event) {\r\n        event.preventDefault();\r\n\r\n        var inputFieldText = document.getElementById('inputField');\r\n\r\n        if (inputFieldText && inputFieldText.value && inputFieldText.value.trim().length > 0) {\r\n\r\n            // disable input to show we're sending it\r\n            var inputField = inputFieldText.value.trim();\r\n            inputFieldText.value = '...';\r\n            inputFieldText.locked = true;\r\n\r\n            // send it to the Lex runtime\r\n            var params = {\r\n                botAlias: 'LeaseBot',\r\n                botName: this.props.botName,\r\n                inputText: inputField,\r\n                userId: this.state.lexUserId,\r\n                sessionAttributes: this.state.sessionAttributes\r\n            };\r\n\r\n            this.showRequest(inputField);\r\n\r\n            const postTextRequest = new PostTextCommand(params);\r\n\r\n            this.lexRuntimeService.send(postTextRequest, (err, data) => {\r\n                this.callback(err, data);\r\n            });\r\n        }\r\n        // we always cancel form submission\r\n        return false;\r\n    }\r\n\r\n    showRequest(daText) {\r\n        var conversationDiv = document.getElementById('conversation');\r\n        var requestPara = document.createElement(\"P\");\r\n        requestPara.className = 'userRequest';\r\n        requestPara.appendChild(document.createTextNode(daText));\r\n        conversationDiv.appendChild(requestPara);\r\n        conversationDiv.scrollTop = conversationDiv.scrollHeight;\r\n    }\r\n\r\n    showError(daText) {\r\n        var conversationDiv = document.getElementById('conversation');\r\n        var errorPara = document.createElement(\"P\");\r\n        errorPara.className = 'lexError';\r\n        errorPara.appendChild(document.createTextNode(daText));\r\n        conversationDiv.appendChild(errorPara);\r\n        conversationDiv.scrollTop = conversationDiv.scrollHeight;\r\n    }\r\n\r\n    showResponse(lexResponse) {\r\n        var conversationDiv = document.getElementById('conversation');\r\n        var responsePara = document.createElement(\"P\");\r\n        responsePara.className = 'lexResponse';\r\n        \r\n        if (lexResponse.message) {\r\n            responsePara.appendChild(document.createTextNode(lexResponse.message));\r\n            responsePara.appendChild(document.createElement('br'));\r\n        }\r\n        if (lexResponse.dialogState === 'ReadyForFulfillment') {\r\n            responsePara.appendChild(document.createTextNode(\r\n            'Ready for fulfillment'));\r\n            // TODO:  show slot values\r\n        } else {\r\n            responsePara.appendChild(document.createTextNode(''));\r\n        }\r\n        conversationDiv.appendChild(responsePara);\r\n        conversationDiv.scrollTop = conversationDiv.scrollHeight;\r\n    }\r\n\r\n    handleChange(event) {\r\n        event.preventDefault();\r\n        this.setState({data: event.target.value});\r\n    }\r\n\r\n    render() {\r\n        const inputStyle = {\r\n            padding: '4px',\r\n            fontSize: 24,\r\n            width: '388px',\r\n            height: '40px',\r\n            borderRadius: '1px',\r\n            border: '10px'\r\n        }\r\n        const conversationStyle = {\r\n            width: '400px',\r\n            height: this.props.height,\r\n            border: 'px solid #ccc',\r\n            backgroundColor: this.props.backgroundColor,\r\n            padding: '4px',\r\n            overflow: 'scroll',\r\n            borderBottom: 'thin ridge #bfbfbf'\r\n        }\r\n        const chatcontainerStyle = {\r\n            backgroundColor: '#FFFFFF',\r\n            width: 408\r\n        }\r\n        const chatFormStyle = {\r\n            margin: '1px', \r\n            padding: '2px'\r\n        }\r\n\r\n        return (\r\n            <>\r\n                <div id=\"chatcontainer\" className={`${style['chatcontainer']} ${style[this.props.visible]}`} style={chatcontainerStyle}>\r\n                    <div id=\"chatheader\" className={style['chatheader']}><img className=\"lazyload\" alt=\"Leasing Options Leasebot will help you find the best deals 24/7!\" width=\"50\" height=\"50\" data-src={`${process.env.NEXT_PUBLIC_CDN}/website/static/leasebot.png`} /><span>LeaseBot</span></div>\r\n                    <div id=\"conversation\" className={style['conversation']} style={conversationStyle} ></div>\r\n                    <form id=\"chatform\" className={style['chatform']} style={chatFormStyle} onSubmit={this.pushChat.bind(this)}>\r\n                        <input\r\n                            type=\"text\"\r\n                            id=\"inputField\"\r\n                            size=\"40\"\r\n                            value={this.state.data}\r\n                            placeholder={this.props.placeholder}\r\n                            onChange={this.handleChange.bind(this)}\r\n                            style={inputStyle}\r\n                        />\r\n                    </form>\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nLeaseBot.propTypes = {\r\n    botName: PropTypes.string,\r\n    IdentityPoolId: PropTypes.string.isRequired,\r\n    placeholder: PropTypes.string.isRequired,\r\n    backgroundColor: PropTypes.string,\r\n    height: PropTypes.number,\r\n    headerText: PropTypes.string\r\n}\r\n\r\nexport default LeaseBot;"]},"metadata":{},"sourceType":"module"}