{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createStore } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension/developmentOnly';\nimport siteReducers from 'reducers/reducers';\nimport { createWrapper, HYDRATE } from 'next-redux-wrapper';\n\nconst reducer = (state, action) => {\n  if (action.type === HYDRATE) {\n    const nextState = _objectSpread(_objectSpread({}, state), action.payload); // preserve count value on client side navigation\n\n\n    if (state.stickerList) nextState.stickerList = state.stickerList;\n    if (state.headerToggle) nextState.headerToggle = state.headerToggle;\n    if (state.stepIndicator) nextState.stepIndicator = state.stepIndicator;\n    if (state.formData) nextState.formData = state.formData;\n    if (state.navigationStates) nextState.navigationStates = state.navigationStates;\n    if (state.garageData) nextState.garageData = state.garageData;\n    return nextState;\n  } else {\n    return siteReducers(state, action);\n  }\n}; // create a makeStore function\n\n\nconst makeStore = context => createStore(reducer, composeWithDevTools());\n\n; // export an assembled wrapper\n\nexport const wrapper = createWrapper(makeStore, {\n  debug: false\n});\nexport default wrapper;","map":null,"metadata":{},"sourceType":"module"}