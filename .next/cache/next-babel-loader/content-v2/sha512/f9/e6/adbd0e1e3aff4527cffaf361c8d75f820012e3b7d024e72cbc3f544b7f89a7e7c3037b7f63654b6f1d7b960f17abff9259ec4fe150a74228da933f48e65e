{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport _toConsumableArray from \"E:/current_project/PPH/tfs/Website/website/node_modules/next/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"E:/current_project/PPH/tfs/Website/website/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect } from 'react';\nimport moment from 'moment';\nimport EmploymentInput from './employment-input';\n\nvar EmploymentHistory = function EmploymentHistory(_ref) {\n  var _employments$;\n\n  var formData = _ref.formData,\n      minHistoryMonths = _ref.minHistoryMonths,\n      showSingleEmployentHistoryOnly = _ref.showSingleEmployentHistoryOnly,\n      showYourPosition = _ref.showYourPosition,\n      showLandLine = _ref.showLandLine;\n  var collectionName = \"employments\"; //used only for initial setup\n\n  var _useState = useState([]),\n      employments = _useState[0],\n      setEmployments = _useState[1];\n\n  useEffect(function () {\n    if (!formData[collectionName]) {\n      setEmployments([{}]);\n    } else {\n      setEmployments(formData[collectionName].map(function (value, index) {\n        return _objectSpread(_objectSpread({}, value), {}, {\n          previousDate: index > 0 ? formData[collectionName][index - 1].startDate : null\n        });\n      }));\n    }\n  }, []);\n\n  var subscribeComponent = function subscribeComponent(callback, index) {\n    updateEmployment(_objectSpread({\n      notificationsHandler: callback\n    }, employments[index]), index);\n  };\n\n  var updateEmployment = function updateEmployment(data, index) {\n    setEmployments([].concat(_toConsumableArray(employments.slice(0, index)), [data], _toConsumableArray(employments.slice(index + 1))));\n  };\n\n  var _onTimePeriodUpdate = function onTimePeriodUpdate(startDate, index) {\n    //create new array instance here\n    var items = employments.slice(0);\n\n    if (items.length > 0) {\n      var _items$totalMonths;\n\n      //update current item\n      items[index] = _objectSpread(_objectSpread({}, items[index]), {}, {\n        startDate: startDate\n      }); //update next item\n\n      if (index + 1 < items.length) {\n        items[index + 1] = _objectSpread(_objectSpread({}, items[index + 1]), {}, {\n          previousDate: startDate\n        }); //force next item to update years & months employed\n\n        if (items[index + 1].notificationsHandler) {\n          items[index + 1].notificationsHandler(\"previous-date\", startDate);\n        }\n      }\n\n      var totalHistory = 0;\n      items.forEach(function (item, index) {\n        var dateStart = moment(item.previousDate || Date.now()).startOf('day');\n        var dateEnd = moment(item.startDate).endOf('day');\n        item.totalMonths = 0;\n\n        if (!dateStart.isBefore(dateEnd)) {\n          var monthsDelta = dateStart.diff(dateEnd, \"months\");\n          var years = Math.floor(monthsDelta / 12);\n          var months = monthsDelta % 12;\n          item.totalMonths = (years !== null && years !== void 0 ? years : 0) * 12 + (months !== null && months !== void 0 ? months : 0);\n        }\n\n        totalHistory += item.totalMonths;\n      });\n\n      if (totalHistory < minHistoryMonths && (items.length == 1 || ((_items$totalMonths = items[items.length - 1].totalMonths) !== null && _items$totalMonths !== void 0 ? _items$totalMonths : 0) > 0)) {\n        items.push({\n          previousDate: items[items.length - 1].startDate,\n          totalMonths: 0\n        });\n      } else {\n        while (items.length > 1 && totalHistory >= minHistoryMonths && totalHistory - ((_items$totalMonths2 = items[items.length - 1].totalMonths) !== null && _items$totalMonths2 !== void 0 ? _items$totalMonths2 : 0) >= minHistoryMonths) {\n          var _items$totalMonths2;\n\n          items = items.slice(0, -1);\n          totalHistory = 0;\n          items.forEach(function (item, index) {\n            var _item$totalMonths;\n\n            totalHistory += (_item$totalMonths = item.totalMonths) !== null && _item$totalMonths !== void 0 ? _item$totalMonths : 0;\n          });\n        }\n      }\n    }\n\n    setEmployments(items);\n  };\n\n  return /*#__PURE__*/_jsxs(React.Fragment, {\n    children: [showSingleEmployentHistoryOnly && /*#__PURE__*/_jsxs(React.Fragment, {\n      children: [/*#__PURE__*/_jsx(\"h3\", {\n        children: \"Current Employment\"\n      }), /*#__PURE__*/_jsx(EmploymentInput, {\n        showLandLine: showLandLine,\n        showYourPosition: showYourPosition,\n        formData: employments,\n        initialPreviousDate: (_employments$ = employments[0]) === null || _employments$ === void 0 ? void 0 : _employments$.previousDate,\n        index: 0,\n        collectionName: collectionName,\n        onTimePeriodUpdate: function onTimePeriodUpdate(startDate) {\n          _onTimePeriodUpdate(startDate, 0);\n        },\n        notificationsSubscribe: subscribeComponent\n      })]\n    }, 0), !showSingleEmployentHistoryOnly && employments.map(function (item, index) {\n      return /*#__PURE__*/_jsxs(React.Fragment, {\n        children: [/*#__PURE__*/_jsx(\"h3\", {\n          children: index === 0 ? \"Current Employment\" : \"Previous Employment: \".concat(index)\n        }), /*#__PURE__*/_jsx(EmploymentInput, {\n          showLandLine: showLandLine,\n          showYourPosition: showYourPosition,\n          formData: item,\n          initialPreviousDate: item.previousDate,\n          index: index,\n          collectionName: collectionName,\n          onTimePeriodUpdate: function onTimePeriodUpdate(startDate) {\n            _onTimePeriodUpdate(startDate, index);\n          },\n          notificationsSubscribe: subscribeComponent\n        })]\n      }, index);\n    })]\n  });\n};\n\nexport default EmploymentHistory;","map":null,"metadata":{},"sourceType":"module"}