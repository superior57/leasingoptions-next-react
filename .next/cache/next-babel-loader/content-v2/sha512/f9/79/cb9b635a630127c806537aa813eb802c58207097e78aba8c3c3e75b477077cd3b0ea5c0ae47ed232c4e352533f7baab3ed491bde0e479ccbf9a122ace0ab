{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _ from 'underscore';\nimport { VehicleExtraOptionsHelper } from './helpers/VehicleExtraOptionsHelper';\nexport var VehicleExtraOptionsManager = /*#__PURE__*/function () {\n  function VehicleExtraOptionsManager() {\n    _classCallCheck(this, VehicleExtraOptionsManager);\n\n    _defineProperty(this, \"_vehicleOptions\", []);\n\n    _defineProperty(this, \"_vehicleOptionRelationships\", []);\n\n    _defineProperty(this, \"_selectedOptionIds\", []);\n\n    _defineProperty(this, \"_confirmRelationshipIds\", []);\n\n    _defineProperty(this, \"_optionsStates\", []);\n  }\n\n  _createClass(VehicleExtraOptionsManager, [{\n    key: \"_clearMangerState\",\n    value: function _clearMangerState() {\n      this._confirmRelationshipIds = [];\n      this._selectedOptionIds = [];\n      this._optionsStates = [];\n    }\n  }, {\n    key: \"init\",\n    value: function init(options, relationships) {\n      this._vehicleOptions = options || [];\n      this._vehicleOptionRelationships = relationships || [];\n\n      this._clearMangerState();\n    }\n  }, {\n    key: \"processOptions\",\n    value: function processOptions(optionsToProcess) {\n      var confirmRelationshipIds = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var selectedOptionIds = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      var optionsStates = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n\n      this._clearMangerState();\n\n      this._selectedOptionIds = _.clone(selectedOptionIds || []);\n      this._confirmRelationshipIds = _.clone(confirmRelationshipIds || []);\n      this._optionsStates = VehicleExtraOptionsHelper.cloneOptionsStates(optionsStates || []);\n      var silentlySelectedOptionIds = null;\n\n      if (optionsToProcess && optionsToProcess.length > 0) {\n        var _selectedOptionIds = _.clone(this._selectedOptionIds);\n\n        var optionIdsByAction = VehicleExtraOptionsHelper.splitOptionIdsByAction(optionsToProcess);\n\n        if (_.intersection(optionIdsByAction.selectIds, optionIdsByAction.deselectIds).length > 0) {\n          alert(\"Action is not allowed.\");\n          return null;\n        }\n\n        var forSilentSelect = _.pluck(VehicleExtraOptionsHelper.getOptionsWithoutRelationships(this._vehicleOptions, optionIdsByAction.selectIds), 'id');\n\n        var forSilentDeselect = _.pluck(VehicleExtraOptionsHelper.getOptionsWithoutRelationships(this._vehicleOptions, optionIdsByAction.deselectIds), 'id');\n\n        var optionIdsForSilentApply = _.union(forSilentSelect, forSilentDeselect);\n\n        if (optionIdsForSilentApply.length > 0) {\n          _selectedOptionIds = _.union(_selectedOptionIds, forSilentSelect);\n          _selectedOptionIds = _.difference(_selectedOptionIds, forSilentDeselect);\n          this._selectedOptionIds = _.clone(_selectedOptionIds);\n          silentlySelectedOptionIds = _.clone(_selectedOptionIds);\n        }\n\n        var optionsToConfirm = _.filter(optionsToProcess, function (optionToProcess) {\n          return !_.contains(optionIdsForSilentApply, optionToProcess.id);\n        });\n\n        if (optionsToConfirm != null && optionsToConfirm.length > 0) {\n          var confirmDetails = this._getConfirmDetails(optionsToConfirm, _selectedOptionIds, this._confirmRelationshipIds, this._optionsStates);\n\n          if (confirmDetails.hasConflicts) {\n            alert(\"Action is not allowed.\");\n            return null;\n          }\n\n          var optionsForSilentApply = _.filter(optionsToConfirm, function (option) {\n            var notAny = !_.some(confirmDetails.confirmRelationships, function (confirmRelationship) {\n              var contains = _.contains(confirmRelationship.optionIds, option.id);\n\n              return contains;\n            });\n            return notAny;\n          });\n\n          if (optionsForSilentApply.length > 0) {\n            silentlySelectedOptionIds = _.clone(this._selectedOptionIds);\n            optionIdsByAction = VehicleExtraOptionsHelper.splitOptionIdsByAction(optionsForSilentApply);\n            silentlySelectedOptionIds = _.union(silentlySelectedOptionIds, optionIdsByAction.selectIds);\n            silentlySelectedOptionIds = _.difference(silentlySelectedOptionIds, optionIdsByAction.deselectIds);\n          }\n\n          this._selectedOptionIds = confirmDetails.selectedOptionIds;\n          this._confirmRelationshipIds = _.pluck(confirmDetails.confirmRelationships, \"id\");\n          this._optionsStates = confirmDetails.optionsStates;\n        }\n      }\n\n      var result = {\n        selectedOptionIds: _.clone(this._selectedOptionIds),\n        confirmRelationshipIds: _.clone(this._confirmRelationshipIds),\n        optionsStates: _.clone(this._optionsStates),\n        silentlySelectedOptionIds: silentlySelectedOptionIds\n      };\n      return result;\n    }\n  }, {\n    key: \"_getConfirmDetails\",\n    value: function _getConfirmDetails(optionsToConfirm, initialSelectedOptionIds, initialConfirmReationshipIds, initialOptionsStates) {\n      var _this = this;\n\n      var result = {\n        hasConflicts: false,\n        selectedOptionIds: [],\n        confirmRelationships: [],\n        optionsStates: []\n      };\n\n      if (optionsToConfirm && optionsToConfirm.length > 0) {\n        (function () {\n          var currentSelectedOptionIds = _.clone(initialSelectedOptionIds || []);\n\n          var currentPendingRelationshipIds = _.clone(initialConfirmReationshipIds || []);\n\n          var currentOptionsStates = VehicleExtraOptionsHelper.cloneOptionsStates(initialOptionsStates || []);\n\n          var iterationOptions = _.clone(optionsToConfirm);\n\n          var iterationResult = _this._getConfirmDetailsIteration(iterationOptions, currentSelectedOptionIds, currentOptionsStates);\n\n          while (iterationResult) {\n            if (iterationResult.hasConflicts) {\n              result.hasConflicts = true;\n              break;\n            }\n\n            iterationOptions.forEach(function (iterationOptionState) {\n              var optionState = _.find(currentOptionsStates, function (optionState) {\n                return optionState.id === iterationOptionState.id;\n              });\n\n              if (!optionState) {\n                optionState = {\n                  id: iterationOptionState.id,\n                  selectionRequiredBy: [],\n                  deselectionRequiredBy: [],\n                  mirrorIn: []\n                };\n                currentOptionsStates.push(optionState);\n              }\n\n              optionState.selectionRequiredBy = _.union(optionState.selectionRequiredBy, _.difference(iterationOptionState.selectionRequiredBy, [-1]));\n              optionState.deselectionRequiredBy = _.union(optionState.deselectionRequiredBy, _.difference(iterationOptionState.deselectionRequiredBy, [-1]));\n              optionState.mirrorIn = _.union(optionState.mirrorIn, iterationOptionState.mirrorIn);\n            });\n\n            if (iterationResult.recallRestrictionRelationshipIds) {\n              currentOptionsStates.forEach(function (optionState) {\n                optionState.selectionRequiredBy = _.difference(optionState.selectionRequiredBy, iterationResult.recallRestrictionRelationshipIds);\n                optionState.deselectionRequiredBy = _.difference(optionState.deselectionRequiredBy, iterationResult.recallRestrictionRelationshipIds);\n              });\n            }\n\n            var selectIds = _.pluck(_.filter(iterationOptions, function (option) {\n              return option.selectionRequiredBy.length > 0;\n            }), \"id\");\n\n            var deselectIds = _.pluck(_.filter(iterationOptions, function (option) {\n              return option.deselectionRequiredBy.length > 0;\n            }), \"id\");\n\n            currentSelectedOptionIds = _.difference(_.union(currentSelectedOptionIds, selectIds), deselectIds);\n            currentPendingRelationshipIds = _.union(currentPendingRelationshipIds, iterationResult.confirmRelationshipIds);\n            iterationOptions = iterationResult.nextIterationOptions;\n            iterationResult = _this._getConfirmDetailsIteration(iterationOptions, currentSelectedOptionIds, currentOptionsStates);\n          }\n\n          if (!result.hasConflicts) {\n            var self = _this;\n            var optionsStates = currentOptionsStates;\n            var selectedOptionIds = currentSelectedOptionIds;\n            var confirmRelationships = [];\n            currentPendingRelationshipIds.forEach(function (relationshipId) {\n              var relationship = _.find(self._vehicleOptionRelationships, function (item) {\n                return item && item.id === relationshipId;\n              });\n\n              if (relationship) {\n                var optionIds = [];\n                optionIds = _.union(optionIds, relationship.primaryOptionIds);\n                optionIds = _.union(optionIds, relationship.regularOptionIds);\n                optionIds = _.filter(optionIds, function (id) {\n                  return VehicleExtraOptionsHelper.optionExists(id, self._vehicleOptions);\n                });\n\n                if (optionIds.length > 0) {\n                  confirmRelationships.push({\n                    id: relationshipId,\n                    optionIds: optionIds\n                  });\n                }\n              }\n            }); //process empty RO, IO here\n            //wrong, should be applied processed items which not covered by confirm rules\n            //if ((!confirmRelationships || confirmRelationships.length === 0) && silentApplyAllowed && selectedOptionIds.length > 0) {\n            //    if (this.onApply) {\n            //        this.onApply(_.clone(selectedOptionIds));\n            //    }\n            //}\n            //cleanup confirm relationships\n            //--------------------------\n\n            var emptyRelationships = _.filter(confirmRelationships, function (item) {\n              return _.intersection(item.optionIds, selectedOptionIds).length == 0;\n            });\n\n            if (confirmRelationships.length > emptyRelationships.length) {\n              confirmRelationships = _.filter(confirmRelationships, function (item) {\n                return _.intersection(item.optionIds, selectedOptionIds).length > 0;\n              });\n            } //--------------------------\n            //confirmRelationships.forEach(function (confirmRelationship) {\n            //    VehicleExtraOptionsHelper.disableConfirmRelationshipOptions(confirmRelationship, selectedOptionIds);\n            //});\n\n\n            var zeroPriceOptionIds = [];\n\n            var activeINRelationships = _.filter(_this._vehicleOptionRelationships, function (relationship) {\n              return relationship && _.contains(VehicleExtraOptionsHelper.allowedRelationshipTypes, relationship.type) && relationship.type === \"IN\" && _.intersection(selectedOptionIds, relationship.primaryOptionIds).length === relationship.primaryOptionIds.length;\n            });\n\n            if (activeINRelationships && activeINRelationships.length > 0) {\n              activeINRelationships.forEach(function (relationship) {\n                zeroPriceOptionIds = _.union(zeroPriceOptionIds, relationship.regularOptionIds);\n              });\n            }\n\n            optionsStates.forEach(function (optionState) {\n              optionState.useZeroPrice = _.contains(zeroPriceOptionIds, optionState.id);\n              optionState.selectionRequiredBy = _.without(optionState.selectionRequiredBy, 0);\n              optionState.deselectionRequiredBy = _.without(optionState.deselectionRequiredBy, 0);\n            });\n            result.optionsStates = optionsStates;\n            result.selectedOptionIds = selectedOptionIds;\n            result.confirmRelationships = confirmRelationships;\n          }\n        })();\n      }\n\n      return result;\n    }\n  }, {\n    key: \"_getConfirmDetailsIteration\",\n    value: function _getConfirmDetailsIteration(iterationOptions, selectedOptionIds, optionsStates) {\n      var _this2 = this;\n\n      if (iterationOptions && iterationOptions.length > 0) {\n        var _ret = function () {\n          var hasConflicts = false;\n          var confirmRelationshipIds = [];\n          var nextIterationOptions = [];\n          var recallRestrictionRelationshipIds = [];\n          var requiredOptionIdsByAction = VehicleExtraOptionsHelper.splitOptionIdsByAction(iterationOptions);\n          hasConflicts = _.intersection(requiredOptionIdsByAction.selectIds, requiredOptionIdsByAction.deselectIds).length > 0;\n\n          if (!hasConflicts) {\n            var uniqueSelectIds = _.difference(requiredOptionIdsByAction.selectIds, selectedOptionIds);\n\n            var uniqueDeselectIds = _.intersection(requiredOptionIdsByAction.deselectIds, selectedOptionIds);\n\n            var iterationSelectedOptionIds = _.difference(_.union(selectedOptionIds, uniqueSelectIds), uniqueDeselectIds);\n\n            var relationshipsToConfirm = VehicleExtraOptionsHelper.getRelationships(_this2._vehicleOptionRelationships, _.union(uniqueSelectIds, uniqueDeselectIds));\n\n            if (relationshipsToConfirm && relationshipsToConfirm.length > 0) {\n              var _loop = function _loop(relationshipIdx) {\n                var relationshipToConfirm = relationshipsToConfirm[relationshipIdx];\n                var primaryOptionIds = relationshipToConfirm.primaryOptionIds;\n                var regularOptionIds = relationshipToConfirm.regularOptionIds;\n\n                var optionIds = _.union(primaryOptionIds, regularOptionIds);\n\n                var selectIntersection = _.intersection(optionIds, uniqueSelectIds);\n\n                var deselectIntersection = _.intersection(optionIds, uniqueDeselectIds);\n\n                if (selectIntersection.length > 0 && deselectIntersection.length > 0) {} else if (selectIntersection.length > 0) {\n                  var isActive = relationshipToConfirm.type === \"OO\" || _.intersection(primaryOptionIds, iterationSelectedOptionIds).length === primaryOptionIds.length;\n\n                  if (!isActive) {\n                    return \"continue\";\n                  }\n\n                  var _loop2 = function _loop2(i) {\n                    var optionId = selectIntersection[0];\n\n                    var optionState = _.find(optionsStates, function (optionState) {\n                      return optionState.id === optionId;\n                    });\n\n                    if (optionState) {\n                      if (_.difference(optionState.deselectionRequiredBy, [relationshipToConfirm.id, -1]).length > 0) {\n                        hasConflicts = true;\n                        return \"break\";\n                      }\n                    }\n                  };\n\n                  for (var i = 0; i < selectIntersection.length; i++) {\n                    var _ret3 = _loop2(i);\n\n                    if (_ret3 === \"break\") break;\n                  }\n\n                  if (hasConflicts) {\n                    return \"break\";\n                  }\n\n                  if (relationshipToConfirm.type == \"OO\") {\n                    if (selectIntersection.length > 1) {\n                      hasConflicts = true;\n                      return \"break\";\n                    } else {\n                      var selectOptionState = _.find(optionsStates, function (optionState) {\n                        return optionState.id === selectIntersection[0];\n                      }); //if (selectOptionState) {\n                      //    selectOptionState.deselectionRequiredBy = _.without(selectOptionState.deselectionRequiredBy, relationshipToConfirm.id);\n                      //}\n\n\n                      _.difference(regularOptionIds, selectIntersection).forEach(function (optionId) {\n                        var nextIterationOption = _.find(nextIterationOptions, function (option) {\n                          return option.id === optionId;\n                        });\n\n                        if (!nextIterationOption) {\n                          nextIterationOption = {\n                            id: optionId,\n                            selectionRequiredBy: [],\n                            deselectionRequiredBy: []\n                          };\n                          nextIterationOptions.push(nextIterationOption);\n                        }\n\n                        nextIterationOption.deselectionRequiredBy = _.union(nextIterationOption.deselectionRequiredBy, [-1]);\n                      });\n                    }\n                  } else if (relationshipToConfirm.type == \"RA\" || relationshipToConfirm.type == \"IN\") {\n                    var isMirror = relationshipToConfirm.mirrorRelationshipIds && relationshipToConfirm.mirrorRelationshipIds.length > 0;\n                    regularOptionIds.forEach(function (optionId) {\n                      var nextIterationOption = _.find(nextIterationOptions, function (option) {\n                        return option.id === optionId;\n                      });\n\n                      if (!nextIterationOption) {\n                        nextIterationOption = {\n                          id: optionId,\n                          selectionRequiredBy: [],\n                          deselectionRequiredBy: [],\n                          mirrorIn: []\n                        };\n                        nextIterationOptions.push(nextIterationOption);\n                      }\n\n                      nextIterationOption.selectionRequiredBy = _.union(nextIterationOption.selectionRequiredBy, [relationshipToConfirm.id]);\n\n                      if (isMirror) {\n                        nextIterationOption.mirrorIn = _.union(nextIterationOption.mirrorIn, [relationshipToConfirm.id], relationshipToConfirm.mirrorRelationshipIds);\n                      }\n                    });\n                  }\n\n                  confirmRelationshipIds = _.union(confirmRelationshipIds, [relationshipToConfirm.id]);\n                } else if (deselectIntersection.length > 0) {\n                  var _loop3 = function _loop3(_i) {\n                    var optionId = deselectIntersection[_i];\n\n                    var optionState = _.find(optionsStates, function (optionState) {\n                      return optionState.id === optionId;\n                    });\n\n                    if (optionState && _.difference(optionState.selectionRequiredBy, optionState.mirrorIn).length > 0) {\n                      hasConflicts = true;\n                      return \"break\";\n                    }\n                  };\n\n                  for (var _i = 0; _i < deselectIntersection.length; _i++) {\n                    var _ret4 = _loop3(_i);\n\n                    if (_ret4 === \"break\") break;\n                  }\n\n                  if (hasConflicts) {\n                    return \"break\";\n                  }\n\n                  if (relationshipToConfirm.type == \"OO\") {\n                    if (_.intersection(iterationSelectedOptionIds, optionIds).length == 0) {\n                      recallRestrictionRelationshipIds.push(relationshipToConfirm.id);\n                    }\n\n                    confirmRelationshipIds = _.union(confirmRelationshipIds, [relationshipToConfirm.id]);\n                  } else if (relationshipToConfirm.type == \"RA\" || relationshipToConfirm.type == \"IN\") {\n                    var _isMirror = relationshipToConfirm.mirrorRelationshipIds && relationshipToConfirm.mirrorRelationshipIds.length > 0;\n\n                    if (_isMirror) {\n                      _.difference(optionIds, deselectIntersection).forEach(function (optionId) {\n                        var nextIterationOption = _.find(nextIterationOptions, function (option) {\n                          return option.id === optionId;\n                        });\n\n                        if (!nextIterationOption) {\n                          nextIterationOption = {\n                            id: optionId,\n                            selectionRequiredBy: [],\n                            deselectionRequiredBy: [],\n                            mirrorIn: []\n                          };\n                          nextIterationOptions.push(nextIterationOption);\n                        }\n\n                        nextIterationOption.deselectionRequiredBy = _.union(nextIterationOption.deselectionRequiredBy, [0]);\n                      });\n                    }\n\n                    if (_.intersection(primaryOptionIds, iterationSelectedOptionIds).length !== primaryOptionIds.length) {\n                      recallRestrictionRelationshipIds.push(relationshipToConfirm.id);\n                    }\n\n                    if (_.intersection(primaryOptionIds, selectedOptionIds).length === primaryOptionIds.length) {\n                      confirmRelationshipIds = _.union(confirmRelationshipIds, [relationshipToConfirm.id]);\n                    }\n                  }\n                }\n              };\n\n              for (var relationshipIdx = 0; relationshipIdx < relationshipsToConfirm.length; relationshipIdx++) {\n                var _ret2 = _loop(relationshipIdx);\n\n                if (_ret2 === \"continue\") continue;\n                if (_ret2 === \"break\") break;\n              }\n            }\n          }\n\n          return {\n            v: {\n              hasConflicts: hasConflicts,\n              confirmRelationshipIds: hasConflicts ? [] : confirmRelationshipIds,\n              nextIterationOptions: hasConflicts ? [] : nextIterationOptions,\n              recallRestrictionRelationshipIds: hasConflicts ? [] : recallRestrictionRelationshipIds\n            }\n          };\n        }();\n\n        if (typeof _ret === \"object\") return _ret.v;\n      }\n\n      return null;\n    }\n  }]);\n\n  return VehicleExtraOptionsManager;\n}();","map":null,"metadata":{},"sourceType":"module"}