{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _classCallCheck from \"E:/current_project/PPH/tfs/Website/website/node_modules/next/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"E:/current_project/PPH/tfs/Website/website/node_modules/next/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"E:/current_project/PPH/tfs/Website/website/node_modules/next/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"E:/current_project/PPH/tfs/Website/website/node_modules/next/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"E:/current_project/PPH/tfs/Website/website/node_modules/next/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"E:/current_project/PPH/tfs/Website/website/node_modules/next/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"E:/current_project/PPH/tfs/Website/website/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"E:\\\\current_project\\\\PPH\\\\tfs\\\\Website\\\\website\\\\components\\\\leasebot\\\\index.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport style from './leasebot.module.scss';\nimport PropTypes from 'prop-types';\nimport { LexRuntimeService } from \"@aws-sdk/client-lex-runtime-service-browser/LexRuntimeService\";\nimport { CognitoIdentityClient } from \"@aws-sdk/client-cognito-identity\";\nimport { fromCognitoIdentityPool } from \"@aws-sdk/credential-provider-cognito-identity\";\nimport { PostTextCommand } from \"@aws-sdk/client-lex-runtime-service-browser/commands/PostTextCommand\";\n\nvar LeaseBot = /*#__PURE__*/function (_React$Component) {\n  _inherits(LeaseBot, _React$Component);\n\n  var _super = _createSuper(LeaseBot);\n\n  function LeaseBot(props) {\n    var _this;\n\n    _classCallCheck(this, LeaseBot);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"callback\", function (err, data) {\n      if (err) {\n        console.log(err, err.stack);\n\n        _this.showError('Error:  ' + err.message + ' (see console for details)');\n      }\n\n      if (data) {\n        // capture the sessionAttributes for the next cycle\n        _this.setState({\n          sessionAttributes: data.sessionAttributes\n        }); //sessionAttributes = data.sessionAttributes;\n        // show response and/or error/dialog status\n\n\n        _this.showResponse(data);\n      }\n\n      var inputFieldText = document.getElementById('inputField'); // re-enable input\n\n      inputFieldText.value = '';\n      inputFieldText.locked = false;\n    });\n\n    _this.state = {\n      data: '',\n      lexUserId: 'chatbot' + Date.now(),\n      sessionAttributes: {}\n    };\n    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(LeaseBot, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      document.getElementById(\"inputField\").focus();\n      this.lexRuntimeService = new LexRuntimeService({\n        region: \"eu-west-1\",\n        IdentityPoolId: this.props.IdentityPoolId,\n        credentials: fromCognitoIdentityPool({\n          client: new CognitoIdentityClient({\n            region: \"eu-west-1\"\n          }),\n          identityPoolId: this.props.IdentityPoolId // IDENTITY_POOL_ID\n\n        })\n      });\n      var params = {\n        botAlias: 'LeaseBot',\n        botName: this.props.botName,\n        inputText: 'Hi',\n        userId: this.state.lexUserId,\n        sessionAttributes: this.state.sessionAttributes\n      };\n      var postTextRequest = new PostTextCommand(params);\n      this.lexRuntimeService.send(postTextRequest, function (err, data) {\n        _this2.callback(err, data);\n      }); // this.lexruntime.postText(params, this.callback);\n    }\n  }, {\n    key: \"pushChat\",\n    value: function pushChat(event) {\n      var _this3 = this;\n\n      event.preventDefault();\n      var inputFieldText = document.getElementById('inputField');\n\n      if (inputFieldText && inputFieldText.value && inputFieldText.value.trim().length > 0) {\n        // disable input to show we're sending it\n        var inputField = inputFieldText.value.trim();\n        inputFieldText.value = '...';\n        inputFieldText.locked = true; // send it to the Lex runtime\n\n        var params = {\n          botAlias: 'LeaseBot',\n          botName: this.props.botName,\n          inputText: inputField,\n          userId: this.state.lexUserId,\n          sessionAttributes: this.state.sessionAttributes\n        };\n        this.showRequest(inputField);\n        var postTextRequest = new PostTextCommand(params);\n        this.lexRuntimeService.send(postTextRequest, function (err, data) {\n          _this3.callback(err, data);\n        });\n      } // we always cancel form submission\n\n\n      return false;\n    }\n  }, {\n    key: \"showRequest\",\n    value: function showRequest(daText) {\n      var conversationDiv = document.getElementById('conversation');\n      var requestPara = document.createElement(\"P\");\n      requestPara.className = 'userRequest';\n      requestPara.appendChild(document.createTextNode(daText));\n      conversationDiv.appendChild(requestPara);\n      conversationDiv.scrollTop = conversationDiv.scrollHeight;\n    }\n  }, {\n    key: \"showError\",\n    value: function showError(daText) {\n      var conversationDiv = document.getElementById('conversation');\n      var errorPara = document.createElement(\"P\");\n      errorPara.className = 'lexError';\n      errorPara.appendChild(document.createTextNode(daText));\n      conversationDiv.appendChild(errorPara);\n      conversationDiv.scrollTop = conversationDiv.scrollHeight;\n    }\n  }, {\n    key: \"showResponse\",\n    value: function showResponse(lexResponse) {\n      var conversationDiv = document.getElementById('conversation');\n      var responsePara = document.createElement(\"P\");\n      responsePara.className = 'lexResponse';\n\n      if (lexResponse.message) {\n        responsePara.appendChild(document.createTextNode(lexResponse.message));\n        responsePara.appendChild(document.createElement('br'));\n      }\n\n      if (lexResponse.dialogState === 'ReadyForFulfillment') {\n        responsePara.appendChild(document.createTextNode('Ready for fulfillment')); // TODO:  show slot values\n      } else {\n        responsePara.appendChild(document.createTextNode(''));\n      }\n\n      conversationDiv.appendChild(responsePara);\n      conversationDiv.scrollTop = conversationDiv.scrollHeight;\n    }\n  }, {\n    key: \"handleChange\",\n    value: function handleChange(event) {\n      event.preventDefault();\n      this.setState({\n        data: event.target.value\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var inputStyle = {\n        padding: '4px',\n        fontSize: 24,\n        width: '388px',\n        height: '40px',\n        borderRadius: '1px',\n        border: '10px'\n      };\n      var conversationStyle = {\n        width: '400px',\n        height: this.props.height,\n        border: 'px solid #ccc',\n        backgroundColor: this.props.backgroundColor,\n        padding: '4px',\n        overflow: 'scroll',\n        borderBottom: 'thin ridge #bfbfbf'\n      };\n      var chatcontainerStyle = {\n        backgroundColor: '#FFFFFF',\n        width: 408\n      };\n      var chatFormStyle = {\n        margin: '1px',\n        padding: '2px'\n      };\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"chatcontainer\",\n          className: \"\".concat(style['chatcontainer'], \" \").concat(style[this.props.visible]),\n          style: chatcontainerStyle,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"chatheader\",\n            className: style['chatheader'],\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              className: \"lazyload\",\n              alt: \"Leasing Options Leasebot will help you find the best deals 24/7!\",\n              width: \"50\",\n              height: \"50\",\n              \"data-src\": \"\".concat(process.env.NEXT_PUBLIC_CDN, \"/website/static/leasebot.png\")\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 174,\n              columnNumber: 74\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"LeaseBot\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 174,\n              columnNumber: 268\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"conversation\",\n            className: style['conversation'],\n            style: conversationStyle\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n            id: \"chatform\",\n            className: style['chatform'],\n            style: chatFormStyle,\n            onSubmit: this.pushChat.bind(this),\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              id: \"inputField\",\n              size: \"40\",\n              value: this.state.data,\n              placeholder: this.props.placeholder,\n              onChange: this.handleChange.bind(this),\n              style: inputStyle\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 177,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 17\n        }, this)\n      }, void 0, false);\n    }\n  }]);\n\n  return LeaseBot;\n}(React.Component);\n\nLeaseBot.propTypes = {\n  botName: PropTypes.string,\n  IdentityPoolId: PropTypes.string.isRequired,\n  placeholder: PropTypes.string.isRequired,\n  backgroundColor: PropTypes.string,\n  height: PropTypes.number,\n  headerText: PropTypes.string\n};\nexport default LeaseBot;","map":{"version":3,"sources":["E:/current_project/PPH/tfs/Website/website/components/leasebot/index.js"],"names":["React","style","PropTypes","LexRuntimeService","CognitoIdentityClient","fromCognitoIdentityPool","PostTextCommand","LeaseBot","props","err","data","console","log","stack","showError","message","setState","sessionAttributes","showResponse","inputFieldText","document","getElementById","value","locked","state","lexUserId","Date","now","handleChange","bind","focus","lexRuntimeService","region","IdentityPoolId","credentials","client","identityPoolId","params","botAlias","botName","inputText","userId","postTextRequest","send","callback","event","preventDefault","trim","length","inputField","showRequest","daText","conversationDiv","requestPara","createElement","className","appendChild","createTextNode","scrollTop","scrollHeight","errorPara","lexResponse","responsePara","dialogState","target","inputStyle","padding","fontSize","width","height","borderRadius","border","conversationStyle","backgroundColor","overflow","borderBottom","chatcontainerStyle","chatFormStyle","margin","visible","process","env","NEXT_PUBLIC_CDN","pushChat","placeholder","Component","propTypes","string","isRequired","number","headerText"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport style from './leasebot.module.scss';\r\nimport PropTypes from 'prop-types';\r\nimport { LexRuntimeService  } from \"@aws-sdk/client-lex-runtime-service-browser/LexRuntimeService\";\r\nimport { CognitoIdentityClient }  from \"@aws-sdk/client-cognito-identity\";\r\nimport { fromCognitoIdentityPool }  from \"@aws-sdk/credential-provider-cognito-identity\";\r\nimport { PostTextCommand  } from \"@aws-sdk/client-lex-runtime-service-browser/commands/PostTextCommand\";\r\nclass LeaseBot extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            data: '', \r\n            lexUserId: 'chatbot' + Date.now(), \r\n            sessionAttributes: {}\r\n        };\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n\r\n    componentDidMount() {      \r\n        document.getElementById(\"inputField\").focus();\r\n\r\n        this.lexRuntimeService = new LexRuntimeService({ \r\n            region: \"eu-west-1\",\r\n            IdentityPoolId: this.props.IdentityPoolId, \r\n            credentials: fromCognitoIdentityPool({\r\n                client: new CognitoIdentityClient({ region: \"eu-west-1\" }),\r\n                identityPoolId: this.props.IdentityPoolId // IDENTITY_POOL_ID\r\n            }),\r\n        });\r\n    \r\n        var params = {\r\n            botAlias: 'LeaseBot',\r\n            botName: this.props.botName,\r\n            inputText: 'Hi',\r\n            userId: this.state.lexUserId,      \r\n            sessionAttributes: this.state.sessionAttributes\r\n        };\r\n\r\n        const postTextRequest = new PostTextCommand(params);\r\n\r\n        this.lexRuntimeService.send(postTextRequest, (err, data) => {\r\n            this.callback(err, data);\r\n        });\r\n\r\n        // this.lexruntime.postText(params, this.callback);\r\n    }\r\n\r\n \r\n  \r\n    callback = (err, data) => {\r\n        if (err) {\r\n            console.log(err, err.stack);\r\n            this.showError('Error:  ' + err.message + ' (see console for details)')\r\n        }\r\n        if (data) {\r\n            // capture the sessionAttributes for the next cycle\r\n            this.setState({sessionAttributes: data.sessionAttributes})\r\n            //sessionAttributes = data.sessionAttributes;\r\n            // show response and/or error/dialog status\r\n            this.showResponse(data);\r\n        }\r\n        var inputFieldText = document.getElementById('inputField');\r\n        // re-enable input\r\n        inputFieldText.value = '';\r\n        inputFieldText.locked = false;\r\n    };\r\n\r\n    pushChat(event) {\r\n        event.preventDefault();\r\n\r\n        var inputFieldText = document.getElementById('inputField');\r\n\r\n        if (inputFieldText && inputFieldText.value && inputFieldText.value.trim().length > 0) {\r\n\r\n            // disable input to show we're sending it\r\n            var inputField = inputFieldText.value.trim();\r\n            inputFieldText.value = '...';\r\n            inputFieldText.locked = true;\r\n\r\n            // send it to the Lex runtime\r\n            var params = {\r\n                botAlias: 'LeaseBot',\r\n                botName: this.props.botName,\r\n                inputText: inputField,\r\n                userId: this.state.lexUserId,\r\n                sessionAttributes: this.state.sessionAttributes\r\n            };\r\n\r\n            this.showRequest(inputField);\r\n\r\n            const postTextRequest = new PostTextCommand(params);\r\n\r\n            this.lexRuntimeService.send(postTextRequest, (err, data) => {\r\n                this.callback(err, data);\r\n            });\r\n        }\r\n        // we always cancel form submission\r\n        return false;\r\n    }\r\n\r\n    showRequest(daText) {\r\n        var conversationDiv = document.getElementById('conversation');\r\n        var requestPara = document.createElement(\"P\");\r\n        requestPara.className = 'userRequest';\r\n        requestPara.appendChild(document.createTextNode(daText));\r\n        conversationDiv.appendChild(requestPara);\r\n        conversationDiv.scrollTop = conversationDiv.scrollHeight;\r\n    }\r\n\r\n    showError(daText) {\r\n        var conversationDiv = document.getElementById('conversation');\r\n        var errorPara = document.createElement(\"P\");\r\n        errorPara.className = 'lexError';\r\n        errorPara.appendChild(document.createTextNode(daText));\r\n        conversationDiv.appendChild(errorPara);\r\n        conversationDiv.scrollTop = conversationDiv.scrollHeight;\r\n    }\r\n\r\n    showResponse(lexResponse) {\r\n        var conversationDiv = document.getElementById('conversation');\r\n        var responsePara = document.createElement(\"P\");\r\n        responsePara.className = 'lexResponse';\r\n        \r\n        if (lexResponse.message) {\r\n            responsePara.appendChild(document.createTextNode(lexResponse.message));\r\n            responsePara.appendChild(document.createElement('br'));\r\n        }\r\n        if (lexResponse.dialogState === 'ReadyForFulfillment') {\r\n            responsePara.appendChild(document.createTextNode(\r\n            'Ready for fulfillment'));\r\n            // TODO:  show slot values\r\n        } else {\r\n            responsePara.appendChild(document.createTextNode(''));\r\n        }\r\n        conversationDiv.appendChild(responsePara);\r\n        conversationDiv.scrollTop = conversationDiv.scrollHeight;\r\n    }\r\n\r\n    handleChange(event) {\r\n        event.preventDefault();\r\n        this.setState({data: event.target.value});\r\n    }\r\n\r\n    render() {\r\n        const inputStyle = {\r\n            padding: '4px',\r\n            fontSize: 24,\r\n            width: '388px',\r\n            height: '40px',\r\n            borderRadius: '1px',\r\n            border: '10px'\r\n        }\r\n        const conversationStyle = {\r\n            width: '400px',\r\n            height: this.props.height,\r\n            border: 'px solid #ccc',\r\n            backgroundColor: this.props.backgroundColor,\r\n            padding: '4px',\r\n            overflow: 'scroll',\r\n            borderBottom: 'thin ridge #bfbfbf'\r\n        }\r\n        const chatcontainerStyle = {\r\n            backgroundColor: '#FFFFFF',\r\n            width: 408\r\n        }\r\n        const chatFormStyle = {\r\n            margin: '1px', \r\n            padding: '2px'\r\n        }\r\n\r\n        return (\r\n            <>\r\n                <div id=\"chatcontainer\" className={`${style['chatcontainer']} ${style[this.props.visible]}`} style={chatcontainerStyle}>\r\n                    <div id=\"chatheader\" className={style['chatheader']}><img className=\"lazyload\" alt=\"Leasing Options Leasebot will help you find the best deals 24/7!\" width=\"50\" height=\"50\" data-src={`${process.env.NEXT_PUBLIC_CDN}/website/static/leasebot.png`} /><span>LeaseBot</span></div>\r\n                    <div id=\"conversation\" className={style['conversation']} style={conversationStyle} ></div>\r\n                    <form id=\"chatform\" className={style['chatform']} style={chatFormStyle} onSubmit={this.pushChat.bind(this)}>\r\n                        <input\r\n                            type=\"text\"\r\n                            id=\"inputField\"\r\n                            size=\"40\"\r\n                            value={this.state.data}\r\n                            placeholder={this.props.placeholder}\r\n                            onChange={this.handleChange.bind(this)}\r\n                            style={inputStyle}\r\n                        />\r\n                    </form>\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nLeaseBot.propTypes = {\r\n    botName: PropTypes.string,\r\n    IdentityPoolId: PropTypes.string.isRequired,\r\n    placeholder: PropTypes.string.isRequired,\r\n    backgroundColor: PropTypes.string,\r\n    height: PropTypes.number,\r\n    headerText: PropTypes.string\r\n}\r\n\r\nexport default LeaseBot;"]},"metadata":{},"sourceType":"module"}