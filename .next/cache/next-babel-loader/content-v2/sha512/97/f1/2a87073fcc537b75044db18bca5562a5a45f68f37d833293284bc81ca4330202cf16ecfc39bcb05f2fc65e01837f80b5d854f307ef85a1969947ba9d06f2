{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport style from './leasebot.module.scss';\nimport { LexRuntimeService } from \"@aws-sdk/client-lex-runtime-service-browser/LexRuntimeService\";\nimport { CognitoIdentityClient } from \"@aws-sdk/client-cognito-identity\";\nimport { fromCognitoIdentityPool } from \"@aws-sdk/credential-provider-cognito-identity\";\nimport { PostTextCommand } from \"@aws-sdk/client-lex-runtime-service-browser/commands/PostTextCommand\";\n\nclass LeaseBot extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"callback\", (err, data) => {\n      if (err) {\n        console.log(err, err.stack);\n        this.showError('Error:  ' + err.message + ' (see console for details)');\n      }\n\n      if (data) {\n        // capture the sessionAttributes for the next cycle\n        this.setState({\n          sessionAttributes: data.sessionAttributes\n        }); //sessionAttributes = data.sessionAttributes;\n        // show response and/or error/dialog status\n\n        this.showResponse(data);\n      }\n\n      var inputFieldText = document.getElementById('inputField'); // re-enable input\n\n      inputFieldText.value = '';\n      inputFieldText.locked = false;\n    });\n\n    this.state = {\n      data: '',\n      lexUserId: 'chatbot' + Date.now(),\n      sessionAttributes: {}\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentDidMount() {\n    document.getElementById(\"inputField\").focus();\n    this.lexRuntimeService = new LexRuntimeService({\n      region: \"eu-west-1\",\n      IdentityPoolId: this.props.IdentityPoolId,\n      credentials: fromCognitoIdentityPool({\n        client: new CognitoIdentityClient({\n          region: \"eu-west-1\"\n        }),\n        identityPoolId: this.props.IdentityPoolId // IDENTITY_POOL_ID\n\n      })\n    });\n    var params = {\n      botAlias: 'LeaseBot',\n      botName: this.props.botName,\n      inputText: 'Hi',\n      userId: this.state.lexUserId,\n      sessionAttributes: this.state.sessionAttributes\n    };\n    const postTextRequest = new PostTextCommand(params);\n    this.lexRuntimeService.send(postTextRequest, (err, data) => {\n      this.callback(err, data);\n    }); // this.lexruntime.postText(params, this.callback);\n  }\n\n  pushChat(event) {\n    event.preventDefault();\n    var inputFieldText = document.getElementById('inputField');\n\n    if (inputFieldText && inputFieldText.value && inputFieldText.value.trim().length > 0) {\n      // disable input to show we're sending it\n      var inputField = inputFieldText.value.trim();\n      inputFieldText.value = '...';\n      inputFieldText.locked = true; // send it to the Lex runtime\n\n      var params = {\n        botAlias: 'LeaseBot',\n        botName: this.props.botName,\n        inputText: inputField,\n        userId: this.state.lexUserId,\n        sessionAttributes: this.state.sessionAttributes\n      };\n      this.showRequest(inputField);\n      const postTextRequest = new PostTextCommand(params);\n      this.lexRuntimeService.send(postTextRequest, (err, data) => {\n        this.callback(err, data);\n      });\n    } // we always cancel form submission\n\n\n    return false;\n  }\n\n  showRequest(daText) {\n    var conversationDiv = document.getElementById('conversation');\n    var requestPara = document.createElement(\"P\");\n    requestPara.className = 'userRequest';\n    requestPara.appendChild(document.createTextNode(daText));\n    conversationDiv.appendChild(requestPara);\n    conversationDiv.scrollTop = conversationDiv.scrollHeight;\n  }\n\n  showError(daText) {\n    var conversationDiv = document.getElementById('conversation');\n    var errorPara = document.createElement(\"P\");\n    errorPara.className = 'lexError';\n    errorPara.appendChild(document.createTextNode(daText));\n    conversationDiv.appendChild(errorPara);\n    conversationDiv.scrollTop = conversationDiv.scrollHeight;\n  }\n\n  showResponse(lexResponse) {\n    var conversationDiv = document.getElementById('conversation');\n    var responsePara = document.createElement(\"P\");\n    responsePara.className = 'lexResponse';\n\n    if (lexResponse.message) {\n      responsePara.appendChild(document.createTextNode(lexResponse.message));\n      responsePara.appendChild(document.createElement('br'));\n    }\n\n    if (lexResponse.dialogState === 'ReadyForFulfillment') {\n      responsePara.appendChild(document.createTextNode('Ready for fulfillment')); // TODO:  show slot values\n    } else {\n      responsePara.appendChild(document.createTextNode(''));\n    }\n\n    conversationDiv.appendChild(responsePara);\n    conversationDiv.scrollTop = conversationDiv.scrollHeight;\n  }\n\n  handleChange(event) {\n    event.preventDefault();\n    this.setState({\n      data: event.target.value\n    });\n  }\n\n  render() {\n    const inputStyle = {\n      padding: '4px',\n      fontSize: 24,\n      width: '388px',\n      height: '40px',\n      borderRadius: '1px',\n      border: '10px'\n    };\n    const conversationStyle = {\n      width: '400px',\n      height: this.props.height,\n      border: 'px solid #ccc',\n      backgroundColor: this.props.backgroundColor,\n      padding: '4px',\n      overflow: 'scroll',\n      borderBottom: 'thin ridge #bfbfbf'\n    };\n    const chatcontainerStyle = {\n      backgroundColor: '#FFFFFF',\n      width: 408\n    };\n    const chatFormStyle = {\n      margin: '1px',\n      padding: '2px'\n    };\n    return /*#__PURE__*/_jsx(_Fragment, {\n      children: /*#__PURE__*/_jsxs(\"div\", {\n        id: \"chatcontainer\",\n        className: `${style['chatcontainer']} ${style[this.props.visible]}`,\n        style: chatcontainerStyle,\n        children: [/*#__PURE__*/_jsxs(\"div\", {\n          id: \"chatheader\",\n          className: style['chatheader'],\n          children: [/*#__PURE__*/_jsx(\"img\", {\n            className: \"lazyload\",\n            alt: \"Leasing Options Leasebot will help you find the best deals 24/7!\",\n            width: \"50\",\n            height: \"50\",\n            \"data-src\": `${process.env.NEXT_PUBLIC_CDN}/website/static/leasebot.png`\n          }), /*#__PURE__*/_jsx(\"span\", {\n            children: \"LeaseBot\"\n          })]\n        }), /*#__PURE__*/_jsx(\"div\", {\n          id: \"conversation\",\n          className: style['conversation'],\n          style: conversationStyle\n        }), /*#__PURE__*/_jsx(\"form\", {\n          id: \"chatform\",\n          className: style['chatform'],\n          style: chatFormStyle,\n          onSubmit: this.pushChat.bind(this),\n          children: /*#__PURE__*/_jsx(\"input\", {\n            type: \"text\",\n            id: \"inputField\",\n            size: \"40\",\n            value: this.state.data,\n            placeholder: this.props.placeholder,\n            onChange: this.handleChange.bind(this),\n            style: inputStyle\n          })\n        })]\n      })\n    });\n  }\n\n}\n\nexport default LeaseBot;","map":null,"metadata":{},"sourceType":"module"}